; compilation instructions:
; ca65 -t c64 drmario.ca65
; ld65 --lib c64.lib -C rom32k.cfg --start-addr $8000 -o drmario.rom drmario.o

.include "macros.ca65"

; da65 V2.18 - N/A
; Created:    2020-12-19 10:34:39
; Input file: drmario.prg
; Page:       1
; da65 drmario.prg --comments 3 > drmario.ca65

        .setcpu "6502"

; ----------------------------------------------------------------------------

.define L33_NMI_SIGNAL  $33
.define L38_V1_X        $38
.define L39_V1_Y        $39
.define L3A_V2_X        $3A
.define L3B_V2_Y        $3B
.define L3C_V3_X        $3C
.define L3D_V3_Y        $3D
.define L3E_VIRUS_CYCLE $3E
.define L42_OAM_OFFSET  $42
.define L44_SPRITE_X    $44
.define L45_SPRITE_Y    $45
.define L46_TOP_STATE   $46
.define L53_SPRITE_NUM  $53
.define L66_PALETTE     $66
.define L72_V1_COUNT    $72
.define L73_V2_COUNT    $73
.define L74_V3_COUNT    $74
.define L75_V1_STATE    $75
.define L76_V2_STATE    $76
.define L77_V3_STATE    $77
.define L78_V1_TIMER    $78
.define L79_V2_TIMER    $79
.define L7A_V3_TIMER    $7A
.define L7B_VIRUS_MARCH $7B

.define L8B_SPEED      $8B
.define L96_LEVEL      $96
.define LA4_VIRUS_BCD  $A4



L0101 := $0101
L0120 := $0120
L0202 := $0202

L030B_P1_SPEED := $030B
L0324_P1_VIRUS := $0324

L038B_P2_SPEED := $038B
L03A4_P2_VIRUS := $03A4

L068D := $068D



L0700_TOP_SCORE_0 := $0700
L0701_TOP_SCORE_1 := $0701
L0702_TOP_SCORE_2 := $0702
L0703_TOP_SCORE_3 := $0703
L0704_TOP_SCORE_4 := $0704
L0705_TOP_SCORE_5 := $0705
L0727_NUM_PLAYERS := $0727
L0729_SCORE_0 := $0729
L072A_SCORE_1 := $072A
L072B_SCORE_2 := $072B
L072C_SCORE_3 := $072C
L072D_SCORE_4 := $072D
L072E_SCORE_5 := $072E

L2000 := $2000
L2001 := $2001

.org    $8000
.export LOADADDR = *

; ----------------------------------------------------------------------------
L8000:  ldx     #$00                            ; 8000 A2 00
        jmp     L8036                           ; 8002 4C 36 80

; ----------------------------------------------------------------------------
; NMI vector
L8005:  pha                                     ; 8005 48
        txa                                     ; 8006 8A
        pha                                     ; 8007 48
        tya                                     ; 8008 98
        pha                                     ; 8009 48
        jsr RB788                               ; 800A 20 88 B7
        jsr R8393                               ; 800D 20 93 83
        jsr R82F7                               ; 8010 20 F7 82
        jsr R8661                               ; 8013 20 61 86
        lda $43                                 ; 8016 A5 43
        clc                                     ; 8018 18
        adc #$01                                ; 8019 69 01
        sta $43                                 ; 801B 85 43
        lda #$00                                ; 801D A9 00
        sta $2005                               ; 801F 8D 05 20
        sta $2005                               ; 8022 8D 05 20
        ; signal to RB654 to continue
        lda #$01                                ; 8025 A9 01
        sta L33_NMI_SIGNAL                      ; 8027 85 33
        jsr R9134                               ; 8029 20 34 91
        lda #$00                                ; 802C A9 00
        sta L42_OAM_OFFSET                      ; 802E 85 42
        pla                                     ; 8030 68
        tay                                     ; 8031 A8
        pla                                     ; 8032 68
        tax                                     ; 8033 AA
        pla                                     ; 8034 68
; IRQ vector
L8035:  rti                                     ; 8035 40

; ----------------------------------------------------------------------------
; Continuation of RESET vector
L8036:
.scope
    lda $0316                                   ; 8036 AD 16 03
    sta $0732                                   ; 8039 8D 32 07
    lda $0396                                   ; 803C AD 96 03
    sta $0733                                   ; 803F 8D 33 07
    lda L030B_P1_SPEED                          ; 8042 AD 0B 03
    sta $0734                                   ; 8045 8D 34 07
    lda L038B_P2_SPEED                          ; 8048 AD 8B 03
    sta $0735                                   ; 804B 8D 35 07
    ; clear pages $01 to $06
    ldy #$06                                    ; 804E A0 06
    sty $01                                     ; 8050 84 01
    ldy #$00                                    ; 8052 A0 00
    sty $00                                     ; 8054 84 00
    lda #$00                                    ; 8056 A9 00
    loop
        loop
            sta ($00),y                         ; 8058 91 00
            dey                                 ; 805A 88
        while_ne                                ; 805B D0 FB
        dec $01                                 ; 805D C6 01
    while_pl                                    ; 805F 10 F7

    lda $0732                                   ; 8061 AD 32 07
    sta $0316                                   ; 8064 8D 16 03
    lda $0733                                   ; 8067 AD 33 07
    sta $0396                                   ; 806A 8D 96 03
    lda $0734                                   ; 806D AD 34 07
    sta L030B_P1_SPEED                          ; 8070 8D 0B 03
    lda $0735                                   ; 8073 AD 35 07
    sta L038B_P2_SPEED                          ; 8076 8D 8B 03
    ldx #$0A                                    ; 8079 A2 0A
L807B:
    lda $070F,x                                 ; 807B BD 0F 07
    sta $47                                     ; 807E 85 47
    lda L9FEE-1,x                               ; 8080 BD ED 9F
    cmp $47                                     ; 8083 C5 47
    bne L808D                                   ; 8085 D0 06
    dex                                         ; 8087 CA
    bne L807B                                   ; 8088 D0 F1
    jmp L80DC                                   ; 808A 4C DC 80

L808D:
    ldx #$00                                    ; 808D A2 00
    ; set top score to 1000.
    lda #$00                                    ; 808F A9 00
    sta L0700_TOP_SCORE_0                       ; 8091 8D 00 07
    sta L0701_TOP_SCORE_1                       ; 8094 8D 01 07
    sta L0702_TOP_SCORE_2                       ; 8097 8D 02 07
    sta L0704_TOP_SCORE_4                       ; 809A 8D 04 07
    sta L0705_TOP_SCORE_5                       ; 809D 8D 05 07
    lda #$01                                    ; 80A0 A9 01
    sta L0703_TOP_SCORE_3                       ; 80A2 8D 03 07
    lda #$00                                    ; 80A5 A9 00
    sta $0723                                   ; 80A7 8D 23 07
    sta $0724                                   ; 80AA 8D 24 07
    sta $0728                                   ; 80AD 8D 28 07
    sta $0316                                   ; 80B0 8D 16 03
    sta $0396                                   ; 80B3 8D 96 03
    sta $0731                                   ; 80B6 8D 31 07
    lda #$01                                    ; 80B9 A9 01
    sta $0720                                   ; 80BB 8D 20 07
    sta L0727_NUM_PLAYERS                       ; 80BE 8D 27 07
    sta L030B_P1_SPEED                          ; 80C1 8D 0B 03
    sta L038B_P2_SPEED                          ; 80C4 8D 8B 03
    lda #$02                                    ; 80C7 A9 02
    sta $0722                                   ; 80C9 8D 22 07
    lda #$03                                    ; 80CC A9 03
    sta $0725                                   ; 80CE 8D 25 07
    ldx #$0A                                    ; 80D1 A2 0A
    loop
        lda L9FEE-1,x                           ; 80D3 BD ED 9F
        sta $070F,x                             ; 80D6 9D 0F 07
        dex                                     ; 80D9 CA
    while_ne                                    ; 80DA D0 F7
L80DC:
    ldx #$89                                    ; 80DC A2 89
    stx $17                                     ; 80DE 86 17
    dex                                         ; 80E0 CA
    stx $18                                     ; 80E1 86 18
    ldy #$00                                    ; 80E3 A0 00
    sty $FD                                     ; 80E5 84 FD
    sty $2005                                   ; 80E7 8C 05 20
    ldy #$00                                    ; 80EA A0 00
    sty $FC                                     ; 80EC 84 FC
    sty $2005                                   ; 80EE 8C 05 20
    lda #$90                                    ; 80F1 A9 90
    sta $FF                                     ; 80F3 85 FF
    sta L2000                                   ; 80F5 8D 00 20
    lda #$06                                    ; 80F8 A9 06
    sta L2001                                   ; 80FA 8D 01 20
    jsr RFFD6                                   ; 80FD 20 D6 FF
    jsr RFFD3                                   ; 8100 20 D3 FF
    lda #$C0                                    ; 8103 A9 C0
    sta $0100                                   ; 8105 8D 00 01
    lda #$80                                    ; 8108 A9 80
    sta L0101                                   ; 810A 8D 01 01
    lda #$35                                    ; 810D A9 35
    sta $0103                                   ; 810F 8D 03 01
    lda #$AC                                    ; 8112 A9 AC
    sta $0104                                   ; 8114 8D 04 01
    jsr RB67C                                   ; 8117 20 7C B6
    jsr RB6A2                                   ; 811A 20 A2 B6
    lda #$20                                    ; 811D A9 20
    jsr RB6AC                                   ; 811F 20 AC B6
    lda #$24                                    ; 8122 A9 24
    jsr RB6AC                                   ; 8124 20 AC B6
    lda #$28                                    ; 8127 A9 28
    jsr RB6AC                                   ; 8129 20 AC B6
    lda #$2C                                    ; 812C A9 2C
    jsr RB6AC                                   ; 812E 20 AC B6
    lda #$00                                    ; 8131 A9 00
    sta $5D                                     ; 8133 85 5D
    jsr R90C9                                   ; 8135 20 C9 90
    jsr RB695                                   ; 8138 20 95 B6
    jsr RB654                                   ; 813B 20 54 B6
    jsr RB689                                   ; 813E 20 89 B6
    jsr RB654                                   ; 8141 20 54 B6
    lda #$0E                                    ; 8144 A9 0E
    sta $34                                     ; 8146 85 34
    loop
        jsr R8157                               ; 8148 20 57 81
        jsr R978E                               ; 814B 20 8E 97
        jsr RB654                               ; 814E 20 54 B6
        jsr R8712 ; pad OAM with FF             ; 8151 20 12 87
    forever                                     ; 8154 4C 48 81
.endscope

; ----------------------------------------------------------------------------
; Top-level state machine.
; Current state is in L46_TOP_STATE.
; State ranges from 0 to 8.
R8157:
.scope
        lda L46_TOP_STATE                       ; 8157 A5 46
        jsr     RB8AC                           ; 8159 20 AC B8
        .word   L981C
        .word   L9953
        .word   L816E
        .word   L8206
        .word   L9B73
        .word   L9532
        .word   L8FEF
        .word   L958A
        .word   L9C91

; ----------------------------------------------------------------------------
; jump table vector 2

L816E:
    jsr RB67C                                   ; 816E 20 7C B6
    jsr RB6A2                                   ; 8171 20 A2 B6
    lda #$02                                    ; 8174 A9 02
    jsr RB8E0 ; Set mapper CHR bank 0.          ; 8176 20 E0 B8
    lda #$03                                    ; 8179 A9 03
    jsr RB8F4 ; Set mapper CHR bank 1.          ; 817B 20 F4 B8
    lda L0727_NUM_PLAYERS                       ; 817E AD 27 07
    cmp #$01                                    ; 8181 C9 01
    if_eq                                       ; 8183 D0 06
        jsr R82D1                               ; 8185 20 D1 82
    else                                        ; 8188 4C D8 81
        jsr RB6C2                               ; 818B 20 C2 B6
        .word LC5F9
        ; PPU address $20EC (row 7, col 12)
        lda #$20                                ; 8190 A9 20
        sta $2006                               ; 8192 8D 06 20
        lda #$EC                                ; 8195 A9 EC
        sta $2006                               ; 8197 8D 06 20
        lda L030B_P1_SPEED                      ; 819A AD 0B 03
        asl a                                   ; 819D 0A
        asl a                                   ; 819E 0A
        tax                                     ; 819F AA
        lda LA23D,x                             ; 81A0 BD 3D A2
        sta $2007                               ; 81A3 8D 07 20
        lda LA23D+1,x                           ; 81A6 BD 3E A2
        sta $2007                               ; 81A9 8D 07 20
        lda LA23D+2,x                           ; 81AC BD 3F A2
        sta $2007                               ; 81AF 8D 07 20
        ; PPU address $20F1 (row 7, col 17)
        lda #$20                                ; 81B2 A9 20
        sta $2006                               ; 81B4 8D 06 20
        lda #$F1                                ; 81B7 A9 F1
        sta $2006                               ; 81B9 8D 06 20
        lda L038B_P2_SPEED                      ; 81BC AD 8B 03
        asl a                                   ; 81BF 0A
        asl a                                   ; 81C0 0A
        tax                                     ; 81C1 AA
        lda LA23D,x                             ; 81C2 BD 3D A2
        sta $2007                               ; 81C5 8D 07 20
        lda LA23D+1,x                           ; 81C8 BD 3E A2
        sta $2007                               ; 81CB 8D 07 20
        lda LA23D+2,x                           ; 81CE BD 3F A2
        sta $2007                               ; 81D1 8D 07 20
        lda #$83                                ; 81D4 A9 83
        sta L66_PALETTE                         ; 81D6 85 66
    end_if
    lda #$FF                                    ; 81D8 A9 FF
    sta $5D                                     ; 81DA 85 5D
    jsr RB695                                   ; 81DC 20 95 B6
    jsr RB689                                   ; 81DF 20 89 B6
    lda #$0F                                    ; 81E2 A9 0F
    sta $80                                     ; 81E4 85 80
    jsr R90C9                                   ; 81E6 20 C9 90
    lda #$00                                    ; 81E9 A9 00
    sta L0729_SCORE_0                           ; 81EB 8D 29 07
    sta L072A_SCORE_1                           ; 81EE 8D 2A 07
    sta L072B_SCORE_2                           ; 81F1 8D 2B 07
    sta L072C_SCORE_3                           ; 81F4 8D 2C 07
    sta L072D_SCORE_4                           ; 81F7 8D 2D 07
    sta L072E_SCORE_5                           ; 81FA 8D 2E 07
    sta $031E                                   ; 81FD 8D 1E 03
    sta $039E
    ; enter top-level state 3
    inc L46_TOP_STATE                           ; 8203 E6 46
    rts                                         ; 8205 60

; ----------------------------------------------------------------------------
; jump table vector 3
L8206:
    lda #$00                                    ; 8206 A9 00
    sta $92                                     ; 8208 85 92
    sta $57                                     ; 820A 85 57
    sta $8F                                     ; 820C 85 8F
    sta $A1                                     ; 820E 85 A1
    sta $98                                     ; 8210 85 98
    sta $97                                     ; 8212 85 97
    sta $87                                     ; 8214 85 87
    sta $88                                     ; 8216 85 88
    sta $89                                     ; 8218 85 89
    sta $80                                     ; 821A 85 80
    sta $90                                     ; 821C 85 90
    sta $91                                     ; 821E 85 91
    sta $7D                                     ; 8220 85 7D
    sta $A7                                     ; 8222 85 A7
    sta $0728                                   ; 8224 8D 28 07
    sta L75_V1_STATE                            ; 8227 85 75
    sta L76_V2_STATE                            ; 8229 85 76
    sta L77_V3_STATE                            ; 822B 85 77
    sta L78_V1_TIMER                            ; 822D 85 78
    sta L79_V2_TIMER                            ; 822F 85 79
    sta L7A_V3_TIMER                            ; 8231 85 7A
    sta L72_V1_COUNT                            ; 8233 85 72
    sta L73_V2_COUNT                            ; 8235 85 73
    sta L74_V3_COUNT                            ; 8237 85 74
    sta $7E                                     ; 8239 85 7E
    sta $61                                     ; 823B 85 61
    sta $55                                     ; 823D 85 55
    sta L3E_VIRUS_CYCLE                         ; 823F 85 3E
    lda #$06                                    ; 8241 A9 06
    sta $97                                     ; 8243 85 97
    lda #$04                                    ; 8245 A9 04
    sta $58                                     ; 8247 85 58
    lda #$FF                                    ; 8249 A9 FF
    sta $54                                     ; 824B 85 54
    lda $0728                                   ; 824D AD 28 07
    sta $8A                                     ; 8250 85 8A
    sta $A0                                     ; 8252 85 A0
    jsr R82A0                                   ; 8254 20 A0 82
    jsr R8E8D                                   ; 8257 20 8D 8E
    jsr R8E8D                                   ; 825A 20 8D 8E
    lda #$01                                    ; 825D A9 01
    sta $90                                     ; 825F 85 90
    jsr R8FA5                                   ; 8261 20 A5 8F
    jsr R90AF ; Save P1 state                   ; 8264 20 AF 90
    jsr R90BC                                   ; 8267 20 BC 90
    jsr R8FCA                                   ; 826A 20 CA 8F
    lda $0316                                   ; 826D AD 16 03
    cmp #$15                                    ; 8270 C9 15
    if_pl                                       ; 8272 30 08
        sec                                     ; 8274 38
        sbc #$14                                ; 8275 E9 14
        sta $0728                               ; 8277 8D 28 07
        lda #$14                                ; 827A A9 14
    end_if
    clc                                         ; 827C 18
    adc #$01                                    ; 827D 69 01
    asl a                                       ; 827F 0A
    asl a                                       ; 8280 0A
    sta $0328                                   ; 8281 8D 28 03
    lda $0396                                   ; 8284 AD 96 03
    clc                                         ; 8287 18
    adc #$01                                    ; 8288 69 01
    asl a                                       ; 828A 0A
    asl a                                       ; 828B 0A
    sta $03A8                                   ; 828C 8D A8 03
    lda #$9F                                    ; 828F A9 9F
    sta $52                                     ; 8291 85 52
    ldx $0731                                   ; 8293 AE 31 07
    lda LA264,x                                 ; 8296 BD 64 A2
    sta $06F5                                   ; 8299 8D F5 06
    jsr RB654                                   ; 829C 20 54 B6
    rts                                         ; 829F 60

; ----------------------------------------------------------------------------
R82A0:
        lda     #$80                            ; 82A0 A9 80
        sta     $47                             ; 82A2 85 47
        lda     #$00                            ; 82A4 A9 00
        sta     $48                             ; 82A6 85 48
        loop
            ldx #$17                            ; 82A8 A2 17
            ldy #$02                            ; 82AA A0 02
            jsr RB771 ; advance LFSR            ; 82AC 20 71 B7
            ldx $47                             ; 82AF A6 47
            dex                                 ; 82B1 CA
            lda $17                             ; 82B2 A5 17
            and #$0F                            ; 82B4 29 0F
            clc                                 ; 82B6 18
            adc $48                             ; 82B7 65 48
            loop
                sta $48                         ; 82B9 85 48
                cmp #$09                        ; 82BB C9 09
                bcc break                       ; 82BD 90 06
                sec                             ; 82BF 38
                sbc #$09                        ; 82C0 E9 09
            forever                             ; 82C2 4C B9 82
            sta $0780,x                         ; 82C5 9D 80 07
            dec $47                             ; 82C8 C6 47
        while_ne                                ; 82CA D0 DC
        ; enter top-level state 8
        lda #$08                                ; 82CC A9 08
        sta L46_TOP_STATE                       ; 82CE 85 46
        rts                                     ; 82D0 60
.endscope

; ----------------------------------------------------------------------------
R82D1:
    jsr RB6C2                                   ; 82D1 20 C2 B6
    .word LC198 ; level screen                  ; 82D4 98 C1
    lda #$80                                    ; 82D6 A9 80
    sta L66_PALETTE                             ; 82D8 85 66
    lda L030B_P1_SPEED                          ; 82DA AD 0B 03
    asl a                                       ; 82DD 0A
    asl a                                       ; 82DE 0A
    tax                                         ; 82DF AA
    ldy #$03                                    ; 82E0 A0 03
    ; PPU address $22DA (row 22, col 26)
    ; 1-player screen speed
    lda #$22                                    ; 82E2 A9 22
    sta $2006                                   ; 82E4 8D 06 20
    lda #$DA                                    ; 82E7 A9 DA
    sta $2006                                   ; 82E9 8D 06 20
    loop
        lda LA23D,x                             ; 82EC BD 3D A2
        sta $2007                               ; 82EF 8D 07 20
        inx                                     ; 82F2 E8
        dey                                     ; 82F3 88
    while_ne                                    ; 82F4 D0 F6
    rts                                         ; 82F6 60

; ----------------------------------------------------------------------------
R82F7:
    lda #$04                                    ; 82F7 A9 04
    sta $58                                     ; 82F9 85 58
    lda $0300                                   ; 82FB AD 00 03
    sta $80                                     ; 82FE 85 80
    jsr R8321                                   ; 8300 20 21 83
    lda $80                                     ; 8303 A5 80
    sta $0300                                   ; 8305 8D 00 03
    lda L0727_NUM_PLAYERS                       ; 8308 AD 27 07
    cmp #$02                                    ; 830B C9 02
    if_eq                                       ; 830D D0 11
        lda #$05                                ; 830F A9 05
        sta $58                                 ; 8311 85 58
        lda $0380                               ; 8313 AD 80 03
        sta $80                                 ; 8316 85 80
        jsr R8321                               ; 8318 20 21 83
        lda $80                                 ; 831B A5 80
        sta $0380                               ; 831D 8D 80 03
    end_if
    rts                                         ; 8320 60

; ----------------------------------------------------------------------------
R8321:
.scope
        lda $80                                 ; 8321 A5 80
        cmp #$FF                                ; 8323 C9 FF
        if_ne                                   ; 8325 F0 6B
            lda L0727_NUM_PLAYERS               ; 8327 AD 27 07
            cmp #$01                            ; 832A C9 01
            if_eq                               ; 832C D0 13
                lda $80                         ; 832E A5 80
                asl a                           ; 8330 0A
                tay                             ; 8331 A8
                lda LA717,y                     ; 8332 B9 17 A7
                sta $2006                       ; 8335 8D 06 20
                lda LA717+1,y                   ; 8338 B9 18 A7
                sta $2006                       ; 833B 8D 06 20
            else                                ; 833E 4C 6A 83
                lda $58                         ; 8341 A5 58
                cmp #$04                        ; 8343 C9 04
                if_eq                           ; 8345 D0 13
                    lda $80                     ; 8347 A5 80
                    asl a                       ; 8349 0A
                    tay                         ; 834A A8
                    lda LA737,y                 ; 834B B9 37 A7
                    sta $2006                   ; 834E 8D 06 20
                    lda LA737+1,y               ; 8351 B9 38 A7
                    sta $2006                   ; 8354 8D 06 20
                else                            ; 8357 4C 6A 83
                    lda $80                     ; 835A A5 80
                    asl a                       ; 835C 0A
                    tay                         ; 835D A8
                    lda LA757,y                 ; 835E B9 57 A7
                    sta $2006                   ; 8361 8D 06 20
                    lda LA757+1,y               ; 8364 B9 58 A7
                    sta $2006                   ; 8367 8D 06 20
                end_if
            end_if
            lda #$00                            ; 836A A9 00
            sta $57                             ; 836C 85 57
            lda $80                             ; 836E A5 80
            asl a                               ; 8370 0A
            asl a                               ; 8371 0A
            asl a                               ; 8372 0A
            tay                                 ; 8373 A8
            ldx #$08                            ; 8374 A2 08
            loop
                lda ($57),y                     ; 8376 B1 57
                and #$F0                        ; 8378 29 F0
                cmp #$B0                        ; 837A C9 B0
                if_eq                           ; 837C D0 09
                    lda ($57),y                 ; 837E B1 57
                    and #$0F                    ; 8380 29 0F
                    ora #$F0                    ; 8382 09 F0
                else                            ; 8384 4C 89 83
                    lda ($57),y                 ; 8387 B1 57
                end_if
                sta $2007                       ; 8389 8D 07 20
                iny                             ; 838C C8
                dex                             ; 838D CA
            while_ne                            ; 838E D0 E6
            dec $80                             ; 8390 C6 80
        end_if
        rts                                     ; 8392 60
.endscope

; ----------------------------------------------------------------------------
R8393:
.scope
    lda L66_PALETTE                             ; 8393 A5 66
    if_ne                                       ; 8395 F0 03
        jmp L857A ; set PPU palette             ; 8397 4C 7A 85
    end_if
    lda $68                                     ; 839A A5 68
    if_ne                                       ; 839C F0 03
        jmp R8508                               ; 839E 4C 08 85
    end_if
    lda $52                                     ; 83A1 A5 52
    if_eq                                       ; 83A3 D0 03
        jmp L8507 ; rts                         ; 83A5 4C 07 85
    end_if
    lda L0727_NUM_PLAYERS                       ; 83A8 AD 27 07
    cmp #$01                                    ; 83AB C9 01
    if_ne                                       ; 83AD F0 03
        jmp L846E                               ; 83AF 4C 6E 84
    end_if

    ; test bit 2
    lda $52                                     ; 83B2 A5 52
    and #$04                                    ; 83B4 29 04
    if_ne                                       ; 83B6 F0 34
        ; PPU address $2162 (row 11, col 2)
        ; 1-player screen score
        lda #$21                                ; 83B8 A9 21
        sta $2006                               ; 83BA 8D 06 20
        lda #$62                                ; 83BD A9 62
        sta $2006                               ; 83BF 8D 06 20
        lda L072E_SCORE_5                       ; 83C2 AD 2E 07
        sta $2007                               ; 83C5 8D 07 20
        lda L072D_SCORE_4                       ; 83C8 AD 2D 07
        sta $2007                               ; 83CB 8D 07 20
        lda L072C_SCORE_3                       ; 83CE AD 2C 07
        sta $2007                               ; 83D1 8D 07 20
        lda L072B_SCORE_2                       ; 83D4 AD 2B 07
        sta $2007                               ; 83D7 8D 07 20
        lda L072A_SCORE_1                       ; 83DA AD 2A 07
        sta $2007                               ; 83DD 8D 07 20
        lda L0729_SCORE_0                       ; 83E0 AD 29 07
        sta $2007                               ; 83E3 8D 07 20
        ; clear bit 2
        lda $52                                 ; 83E6 A5 52
        and #$FB                                ; 83E8 29 FB
        sta $52                                 ; 83EA 85 52
    end_if

    ; test bit 3
    lda $52                                     ; 83EC A5 52
    and #$08                                    ; 83EE 29 08
    if_ne                                       ; 83F0 F0 34
        ; PPU address $2102 (row 8, col 2)
        ; 1-player screen top score
        lda #$21                                ; 83F2 A9 21
        sta $2006                               ; 83F4 8D 06 20
        lda #$02                                ; 83F7 A9 02
        sta $2006                               ; 83F9 8D 06 20
        lda L0705_TOP_SCORE_5                   ; 83FC AD 05 07
        sta $2007                               ; 83FF 8D 07 20
        lda L0704_TOP_SCORE_4                   ; 8402 AD 04 07
        sta $2007                               ; 8405 8D 07 20
        lda L0703_TOP_SCORE_3                   ; 8408 AD 03 07
        sta $2007                               ; 840B 8D 07 20
        lda L0702_TOP_SCORE_2                   ; 840E AD 02 07
        sta $2007                               ; 8411 8D 07 20
        lda L0701_TOP_SCORE_1                   ; 8414 AD 01 07
        sta $2007                               ; 8417 8D 07 20
        lda L0700_TOP_SCORE_0                   ; 841A AD 00 07
        sta $2007                               ; 841D 8D 07 20
        ; clear bit 3
        lda $52                                 ; 8420 A5 52
        and #$F7                                ; 8422 29 F7
        sta $52                                 ; 8424 85 52
    end_if

    ; test bit 4
    lda $52                                     ; 8426 A5 52
    and #$10                                    ; 8428 29 10
    if_ne                                       ; 842A F0 23
        ; PPU address $233B (row 25, col 27)
        ; 1-player screen virus count
        lda #$23                                ; 842C A9 23
        sta $2006                               ; 842E 8D 06 20
        lda #$3B                                ; 8431 A9 3B
        sta $2006                               ; 8433 8D 06 20
        lda L0324_P1_VIRUS                      ; 8436 AD 24 03
        and #$F0                                ; 8439 29 F0
        lsr a                                   ; 843B 4A
        lsr a                                   ; 843C 4A
        lsr a                                   ; 843D 4A
        lsr a                                   ; 843E 4A
        sta $2007                               ; 843F 8D 07 20
        lda LA4_VIRUS_BCD                       ; 8442 A5 A4
        and #$0F                                ; 8444 29 0F
        sta $2007                               ; 8446 8D 07 20
        ; clear bit 4
        lda $52                                 ; 8449 A5 52
        and #$EF                                ; 844B 29 EF
        sta $52                                 ; 844D 85 52
    end_if

    ; test bit 1
    lda $52                                     ; 844F A5 52
    and #$02                                    ; 8451 29 02
    if_ne                                       ; 8453 F0 19
        ; PPU address $227B (row 19, col 27)
        ; 1-player screen level number
        lda #$22                                ; 8455 A9 22
        sta $2006                               ; 8457 8D 06 20
        lda #$7B                                ; 845A A9 7B
        sta $2006                               ; 845C 8D 06 20
        ldx $0316                               ; 845F AE 16 03
        lda LA777,x ; BCD table 00-29           ; 8462 BD 77 A7
        jsr R864E ; write nybbles to $2007      ; 8465 20 4E 86
        ; clear bit 1
        lda $52                                 ; 8468 A5 52
        and #$FD                                ; 846A 29 FD
        sta $52                                 ; 846C 85 52
    end_if
L846E:

    lda L0727_NUM_PLAYERS                       ; 846E AD 27 07
    cmp #$02                                    ; 8471 C9 02
    if_ne                                       ; 8473 F0 03
        jmp L8507                               ; 8475 4C 07 85
    end_if

    ; test bit 7
    lda $52                                     ; 8478 A5 52
    and #$80                                    ; 847A 29 80
    ; TODO: long-if
    if_eq                                       ; 847C D0 03
    else                                        ; 847E 4C 07 85
        lda $031E                               ; 8481 AD 1E 03
        if_ne                                   ; 8484 F0 3B
            ; look up PPU address from LA396
            ; save a copy in $47/$48
            asl a                               ; 8486 0A
            tax                                 ; 8487 AA
            dex                                 ; 8488 CA
            dex                                 ; 8489 CA
            lda LA396,x                         ; 848A BD 96 A3
            sta $2006                           ; 848D 8D 06 20
            sta $48                             ; 8490 85 48
            lda LA396+1,x                       ; 8492 BD 97 A3
            sta $2006                           ; 8495 8D 06 20
            sta $47                             ; 8498 85 47
            lda #$5C                            ; 849A A9 5C
            sta $2007                           ; 849C 8D 07 20
            lda #$5D                            ; 849F A9 5D
            sta $2007                           ; 84A1 8D 07 20
            ; $47/$48 += #$0020
            ; set PPU address one row down
            lda $47                             ; 84A4 A5 47
            clc                                 ; 84A6 18
            adc #$20                            ; 84A7 69 20
            sta $47                             ; 84A9 85 47
            lda #$00                            ; 84AB A9 00
            adc $48                             ; 84AD 65 48
            sta $2006                           ; 84AF 8D 06 20
            lda $47                             ; 84B2 A5 47
            sta $2006                           ; 84B4 8D 06 20
            lda #$6C                            ; 84B7 A9 6C
            sta $2007                           ; 84B9 8D 07 20
            lda #$6D                            ; 84BC A9 6D
            sta $2007                           ; 84BE 8D 07 20
        end_if
        lda $039E                               ; 84C1 AD 9E 03
        if_ne                                   ; 84C4 F0 3B
            ; look up PPU address from LA39C
            ; save a copy in $47/$48
            asl a                               ; 84C6 0A
            tax                                 ; 84C7 AA
            dex                                 ; 84C8 CA
            dex                                 ; 84C9 CA
            lda LA39C,x                         ; 84CA BD 9C A3
            sta $2006                           ; 84CD 8D 06 20
            sta $48                             ; 84D0 85 48
            lda LA39C+1,x                       ; 84D2 BD 9D A3
            sta $2006                           ; 84D5 8D 06 20
            sta $47                             ; 84D8 85 47
            lda #$5C                            ; 84DA A9 5C
            sta $2007                           ; 84DC 8D 07 20
            lda #$5D                            ; 84DF A9 5D
            sta $2007                           ; 84E1 8D 07 20
            ; $47/$48 += #$0020
            ; set PPU address one row down
            lda $47                             ; 84E4 A5 47
            clc                                 ; 84E6 18
            adc #$20                            ; 84E7 69 20
            sta $47                             ; 84E9 85 47
            lda #$00                            ; 84EB A9 00
            adc $48                             ; 84ED 65 48
            sta $2006                           ; 84EF 8D 06 20
            lda $47                             ; 84F2 A5 47
            sta $2006                           ; 84F4 8D 06 20
            lda #$6C                            ; 84F7 A9 6C
            sta $2007                           ; 84F9 8D 07 20
            lda #$6D                            ; 84FC A9 6D
            sta $2007                           ; 84FE 8D 07 20
        end_if
        ; clear bit 7
        lda $52                                 ; 8501 A5 52
        and $7F ; typo in original?             ; 8503 25 7F
        sta $52                                 ; 8505 85 52
    end_if
L8507:
    rts                                         ; 8507 60
.endscope

; ----------------------------------------------------------------------------
; Write settings screen info to PPU nametables.
; Input in $68.
R8508:
    begin
        lda $68                                 ; 8508 A5 68
        and #$FC                                ; 850A 29 FC
        if_eq                                   ; 850C D0 32
            lda $68                             ; 850E A5 68
            cmp #$01                            ; 8510 C9 01
            if_eq                               ; 8512 D0 0C
                jsr RB6C2 ; screen memory       ; 8514 20 C2 B6
                .word LA2B8 ; attribute data
                lda #$00
                sta $68                         ; 851B 85 68
                jmp break                       ; 851D 4C 79 85
            end_if
            cmp #$02                            ; 8520 C9 02
            if_eq                               ; 8522 D0 0C
                jsr RB6C2                       ; 8524 20 C2 B6
                .word LA2FF ; attribute data    ; 8527 FF A2
                lda #$00                        ; 8529 A9 00
                sta $68                         ; 852B 85 68
                jmp break                       ; 852D 4C 79 85
            end_if
            cmp #$03                            ; 8530 C9 03
            bne break                           ; 8532 D0 45
            jsr RB6C2                           ; 8534 20 C2 B6
            .word LA346 ; attribute data        ; 8537 46 A3
            lda #$00                            ; 8539 A9 00
            sta $68                             ; 853B 85 68
            jmp break                           ; 853D 4C 79 85
        end_if
        lda $68                                 ; 8540 A5 68
        and #$04                                ; 8542 29 04
        beq break                               ; 8544 F0 33
        lda $68                                 ; 8546 A5 68
        and #$FB                                ; 8548 29 FB
        sta $68                                 ; 854A 85 68
        ; PPU address $2157
        ; row 10, column 23
        ; (virus level on settings screen)
        lda #$21                                ; 854C A9 21
        sta $2006                               ; 854E 8D 06 20
        lda #$57                                ; 8551 A9 57
        sta $2006                               ; 8553 8D 06 20
        ldx $0316                               ; 8556 AE 16 03
        lda LA777,x ; BCD table 00-29           ; 8559 BD 77 A7
        jsr R864E ; write nybbles to $2007      ; 855C 20 4E 86
        lda L0727_NUM_PLAYERS                   ; 855F AD 27 07
        cmp #$02                                ; 8562 C9 02
        bne break                               ; 8564 D0 13
        ; PPU address $21B7
        ; row 13, column 23
        lda #$21                                ; 8566 A9 21
        sta $2006                               ; 8568 8D 06 20
        lda #$B7                                ; 856B A9 B7
        sta $2006                               ; 856D 8D 06 20
        ldx $0396                               ; 8570 AE 96 03
        lda LA777,x ; BCD table 00-29           ; 8573 BD 77 A7
        jsr R864E ; write nybbles to $2007      ; 8576 20 4E 86
    end
    rts                                         ; 8579 60

; ----------------------------------------------------------------------------
; Copy palette data to PPU palette ram ($3F00-$3F1F), based on L66_PALETTE.
; This is a big switch statement, with cases for #$80 to #$8B.
; case L66_PALETTE of
; #$80: RB6C2(LA56B) : jsr R8617
; #$81: RB6C2(LA58F)
; #$82: RB6C2(LA5B3)
; #$83: RB6C2(LA5D7) : jsr R8617
; #$84: RB6C2(LA5FB)
; #$85: RB6C2(LA61F)
; #$86: RB6C2(LA643)
; #$87: RB6C2(LA667)
; #$88: RB6C2(LA67B)
; #$89: RB6C2(LA69F)
; #$8A: RB6C2(LA6C3)
; #$8B: RB6C2(LA6E7)
; afterward set L66_PALETTE to 0.
L857A:
.scope
    begin ; switch L66_PALETTE
        lda L66_PALETTE                         ; 857A A5 66
        cmp #$80                                ; 857C C9 80
        if_eq                                   ; 857E D0 0B
            jsr RB6C2                           ; 8580 20 C2 B6
            .word LA56B                         ; 8583 6B A5
            jsr R8617 ; set palette color
            jmp break
        end_if
        cmp #$81                                ; 858B C9 81
        if_eq                                   ; 858D D0 08
            jsr RB6C2                           ; 858F 20 C2 B6
            .word LA58F                         ; 8592 8F A5
            jmp break                           ; 8594 4C 12 86
        end_if
        cmp #$82                                ; 8597 C9 82
        if_eq                                   ; 8599 D0 08
            jsr RB6C2                           ; 859B 20 C2 B6
            .word LA5B3                         ; 859E B3 A5
            jmp break                           ; 859F 4C 12 86
        end_if
        cmp #$83                                ; 85A3 C9 83
        if_eq                                   ; 85A5 D0 0B
            jsr RB6C2                           ; 85A7 20 C2 B6
            .word LA5D7                         ; 85AA D7 A5
            jsr R8617 ; set palette color       ; 85AC 20 17 86
            jmp break                           ; 85AF 4C 12 86
        end_if
        cmp #$84                                ; 85B2 C9 84
        if_eq                                   ; 85B4 D0 08
            jsr RB6C2                           ; 85B6 20 C2 B6
            .word LA5FB                         ; 85B9 FB A5
            jmp break                           ; 85BB 4C 12 86
        end_if
        cmp #$85                                ; 85BE C9 85
        if_eq                                   ; 85C0 D0 08
            jsr RB6C2                           ; 85C2 20 C2 B6
            .word LA61F                         ; 85C5 1F A6
            jmp break                           ; 85C7 4C 12 86
        end_if
        cmp #$86                                ; 85CA C9 86
        if_eq                                   ; 85CC D0 08
            jsr RB6C2                           ; 85CE 20 C2 B6
            .word LA643                         ; 85D1 43 A6
            jmp break                           ; 85D3 4C 12 86
        end_if
        cmp #$87                                ; 85D6 C9 87
        if_eq                                   ; 85D8 D0 08
            jsr RB6C2                           ; 85DA 20 C2 B6
            .word LA667                         ; 85DD 67 A6
            jmp break                           ; 85DF 4C 12 86
        end_if
        cmp #$88                                ; 85E2 C9 88
        if_eq                                   ; 85E4 D0 08
            jsr RB6C2                           ; 85E6 20 C2 B6
            .word LA67B                         ; 85E9 7B A6
            jmp break                           ; 85EB 4C 12 86
        end_if
        cmp #$89                                ; 85EE C9 89
        if_eq                                   ; 85F0 D0 08
            jsr RB6C2                           ; 85F2 20 C2 B6
            .word LA69F                         ; 85F5 9F A6
            jmp break                           ; 85F7 4C 12 86
        end_if
        cmp #$8A                                ; 85FA C9 8A
        if_eq                                   ; 85FC D0 08
            jsr RB6C2                           ; 85FE 20 C2 B6
            .word LA6C3                         ; 8601 C3 A6
            jmp break                           ; 8603 4C 12 86
        end_if
        cmp #$8B                                ; 8606 C9 8B
        if_eq                                   ; 8608 D0 08
            jsr RB6C2                           ; 860A 20 C2 B6
            .word LA6E7                         ; 860D E7 A6
            jmp break                           ; 860F 4C 12 86
        end_if
    end
    lda #$00                                    ; 8612 A9 00
    sta L66_PALETTE                             ; 8614 85 66
    rts                                         ; 8616 60
.endscope

; ----------------------------------------------------------------------------
; Set palette color 3 to green, purple, or gray based on L8B_SPEED.
R8617:
    ; PPU address $3F03
    ; Background palette 0, color 3
    lda #$3F                            ; 8617 A9 3F
    sta $2006                           ; 8619 8D 06 20
    lda #$03                            ; 861C A9 03
    sta $2006                           ; 861E 8D 06 20
    ldx L8B_SPEED                       ; 8621 A6 8B
    lda LA22A,x                         ; 8623 BD 2A A2
    sta $2007                           ; 8626 8D 07 20
    ; PPU address $3F07
    ; Background palette 1, color 3
    lda #$3F                            ; 8629 A9 3F
    sta $2006                           ; 862B 8D 06 20
    lda #$07                            ; 862E A9 07
    sta $2006                           ; 8630 8D 06 20
    ldx L8B_SPEED                       ; 8633 A6 8B
    lda LA22A,x                         ; 8635 BD 2A A2
    sta $2007                           ; 8638 8D 07 20
    ; PPU address $3F0F
    ; Background palette 3, color 3
    lda #$3F                            ; 863B A9 3F
    sta $2006                           ; 863D 8D 06 20
    lda #$0F                            ; 8640 A9 0F
    sta $2006                           ; 8642 8D 06 20
    ldx L8B_SPEED                       ; 8645 A6 8B
    lda LA22A,x                         ; 8647 BD 2A A2
    sta $2007                           ; 864A 8D 07 20
    rts                                 ; 864D 60

; ----------------------------------------------------------------------------
; Input A
; Write high nybble then low nybble of A to $2007.
R864E:
    sta $47                                     ; 864E 85 47
    and #$F0                                    ; 8650 29 F0
    lsr a                                       ; 8652 4A
    lsr a                                       ; 8653 4A
    lsr a                                       ; 8654 4A
    lsr a                                       ; 8655 4A
    sta $2007                                   ; 8656 8D 07 20
    lda $47                                     ; 8659 A5 47
    and #$0F                                    ; 865B 29 0F
    sta $2007                                   ; 865D 8D 07 20
    rts                                         ; 8660 60

; ----------------------------------------------------------------------------
; Called by NMI handler.
; Display some stuff on screen. Settings sliders, maybe?
R8661:
.scope
    lda $7F                                     ; 8661 A5 7F
    beq L8692                                   ; 8663 F0 2D
    cmp #$80                                    ; 8665 C9 80
    bcs L86CD                                   ; 8667 B0 64
    lda $43                                     ; 8669 A5 43
    and #$07                                    ; 866B 29 07
    if_eq                                       ; 866D D0 23
        lda $7F                                 ; 866F A5 7F
        tax                                     ; 8671 AA
        lda #$01                                ; 8672 A9 01
        sta $06F1                               ; 8674 8D F1 06
        ; screen position depends on $7F
        lda #$21                                ; 8677 A9 21
        sta $2006                               ; 8679 8D 06 20
        lda LA098,x                             ; 867C BD 98 A0
        sta $2006                               ; 867F 8D 06 20
        lda LA0BB,x                             ; 8682 BD BB A0
        jsr R8693 ; output LOW/MED/HI           ; 8685 20 93 86
        inc $7F                                 ; 8688 E6 7F
        cmp #$FF                                ; 868A C9 FF
        if_eq                                   ; 868C D0 04
            lda #$00                            ; 868E A9 00
            sta $7F                             ; 8690 85 7F
        end_if
    end_if
L8692:
    rts                                         ; 8692 60

R8693:
    bne L86AD                                   ; 8693 D0 18
    ; output "LOW" "MED" or " HI" to $2007
    lda L8B_SPEED                               ; 8695 A5 8B
    asl a                                       ; 8697 0A
    asl a                                       ; 8698 0A
    tax                                         ; 8699 AA
    lda LA249,x                                 ; 869A BD 49 A2
    sta $2007                                   ; 869D 8D 07 20
    lda LA249+1,x                               ; 86A0 BD 4A A2
    sta $2007                                   ; 86A3 8D 07 20
    lda LA249+2,x                               ; 86A6 BD 4B A2
    sta $2007                                   ; 86A9 8D 07 20
    rts                                         ; 86AC 60

L86AD:
    cmp #$01                                    ; 86AD C9 01
    bne L86C9                                   ; 86AF D0 18
    ldx L96_LEVEL                               ; 86B1 A6 96
    dex                                         ; 86B3 CA
    lda LA777,x ; BCD table 00-29               ; 86B4 BD 77 A7
    and #$F0                                    ; 86B7 29 F0
    lsr a                                       ; 86B9 4A
    lsr a                                       ; 86BA 4A
    lsr a                                       ; 86BB 4A
    lsr a                                       ; 86BC 4A
    sta $2007                                   ; 86BD 8D 07 20
    lda LA777,x ; BCD table 00-29               ; 86C0 BD 77 A7
    and #$0F                                    ; 86C3 29 0F
    sta $2007                                   ; 86C5 8D 07 20
    rts                                         ; 86C8 60

L86C9:
    sta $2007                                   ; 86C9 8D 07 20
    rts                                         ; 86CC 60

L86CD:
    lda $7F                                     ; 86CD A5 7F
    and #$7F                                    ; 86CF 29 7F
    tax                                         ; 86D1 AA
    lda #$21                                    ; 86D2 A9 21
    sta $2006                                   ; 86D4 8D 06 20
    lda LA098,x                                 ; 86D7 BD 98 A0
    sta $2006                                   ; 86DA 8D 06 20
    lda LA0BB,x                                 ; 86DD BD BB A0
    jsr R86F1                                   ; 86E0 20 F1 86
    inc $7F                                     ; 86E3 E6 7F
    lda LA0BB,x                                 ; 86E5 BD BB A0
    cmp #$FF                                    ; 86E8 C9 FF
    if_eq                                       ; 86EA D0 04
        lda #$00                                ; 86EC A9 00
        sta $7F                                 ; 86EE 85 7F
    end_if
    rts                                         ; 86F0 60

; Output 3, 2, or 1 FFs to $2007 depending on A.
R86F1:
    if_eq                                       ; 86F1 D0 0C
        lda #$FF                                ; 86F3 A9 FF
        sta $2007                               ; 86F5 8D 07 20
        sta $2007                               ; 86F8 8D 07 20
        sta $2007                               ; 86FB 8D 07 20
        rts                                     ; 86FE 60
    end_if
    cmp #$01                                    ; 86FF C9 01
    if_eq                                       ; 8701 D0 09
        lda #$FF                                ; 8703 A9 FF
        sta $2007                               ; 8705 8D 07 20
        sta $2007                               ; 8708 8D 07 20
        rts                                     ; 870B 60
    end_if
    lda #$FF                                    ; 870C A9 FF
    sta $2007                                   ; 870E 8D 07 20
    rts                                         ; 8711 60
.endscope

; ----------------------------------------------------------------------------
; Pad remainder of sprite attribute table with FF.
R8712:
    ldx L42_OAM_OFFSET                          ; 8712 A6 42
    if_ne                                       ; 8714 F0 08
        lda #$FF                                ; 8716 A9 FF
        loop
            sta $0200,x                         ; 8718 9D 00 02
            inx                                 ; 871B E8
        while_ne                                ; 871C D0 FA
    end_if
    rts                                         ; 871E 60

; ----------------------------------------------------------------------------
R871F:
    lda L0727_NUM_PLAYERS                       ; 871F AD 27 07
    sec                                         ; 8722 38
    sbc #$01                                    ; 8723 E9 01
    asl a                                       ; 8725 0A
    sta $47                                     ; 8726 85 47
    lda $58                                     ; 8728 A5 58
    sec                                         ; 872A 38
    sbc #$04                                    ; 872B E9 04
    clc                                         ; 872D 18
    adc $47                                     ; 872E 65 47
    tay                                         ; 8730 A8
    lda LA6FB,y                                 ; 8731 B9 FB A6
    sta $47                                     ; 8734 85 47
    lda $85                                     ; 8736 A5 85
    asl a                                       ; 8738 0A
    asl a                                       ; 8739 0A
    asl a                                       ; 873A 0A
    clc                                         ; 873B 18
    adc $47                                     ; 873C 65 47
    sta L44_SPRITE_X                            ; 873E 85 44
    ldx $86                                     ; 8740 A6 86
    lda LA484,x                                 ; 8742 BD 84 A4
    sta L45_SPRITE_Y                            ; 8745 85 45
; from this point, similar to R88CB
    ldy L42_OAM_OFFSET                          ; 8747 A4 42
    lda $A6                                     ; 8749 A5 A6
    asl a                                       ; 874B 0A
    asl a                                       ; 874C 0A
    clc                                         ; 874D 18
    adc $A5                                     ; 874E 65 A5
    tax                                         ; 8750 AA
    lda LA494,x                                 ; 8751 BD 94 A4
    tax                                         ; 8754 AA
    lda $81                                     ; 8755 A5 81
    sta $47                                     ; 8757 85 47
    jsr R8772                                   ; 8759 20 72 87
    lda $82                                     ; 875C A5 82
    sta $47                                     ; 875E 85 47
    jsr R8772                                   ; 8760 20 72 87
    lda $83                                     ; 8763 A5 83
    sta $47                                     ; 8765 85 47
    jsr R8772                                   ; 8767 20 72 87
    lda $84                                     ; 876A A5 84
    sta $47                                     ; 876C 85 47
    jsr R8772                                   ; 876E 20 72 87
    rts                                         ; 8771 60

; ----------------------------------------------------------------------------
; -XY----D--/AXY-CZ--VN
; RTS
; READS L44_SPRITE_X L45_SPRITE_Y $47 La4a0,X
; WRITES L42_OAM_OFFSET L0200,Y
; Precondition: L42_OAM_OFFSET is loaded into Y.
; Copy 4 bytes of sprite data from LA4A0,x into page 2.
; Increment x and y by 4.
; Add L45_SPRITE_Y to 1st byte (Y coordinate).
; Add L44_SPRITE_X to 4th byte (X coordinate).
; Add $47 to 2nd byte (Tile index number).
R8772:
    lda LA4A0,x                                 ; 8772 BD A0 A4
    cmp #$FF                                    ; 8775 C9 FF
    if_ne                                       ; 8777 F0 28
        clc                                     ; 8779 18
        adc L45_SPRITE_Y                        ; 877A 65 45
        sta $0200,y                             ; 877C 99 00 02
        inx                                     ; 877F E8
        iny                                     ; 8780 C8
        lda LA4A0,x                             ; 8781 BD A0 A4
        clc                                     ; 8784 18
        adc $47                                 ; 8785 65 47
        sta $0200,y                             ; 8787 99 00 02
        inx                                     ; 878A E8
        iny                                     ; 878B C8
        lda LA4A0,x                             ; 878C BD A0 A4
        sta $0200,y                             ; 878F 99 00 02
        inx                                     ; 8792 E8
        iny                                     ; 8793 C8
        lda LA4A0,x                             ; 8794 BD A0 A4
        clc                                     ; 8797 18
        adc L44_SPRITE_X                        ; 8798 65 44
        sta $0200,y                             ; 879A 99 00 02
        inx                                     ; 879D E8
        iny                                     ; 879E C8
        sty L42_OAM_OFFSET                      ; 879F 84 42
    end_if
    rts                                         ; 87A1 60

; ----------------------------------------------------------------------------
; Display sprites on level screen
R87A2:
    begin
        jsr R89C9                               ; 87A2 20 C9 89
        lda L0727_NUM_PLAYERS                   ; 87A5 AD 27 07
        cmp #$01                                ; 87A8 C9 01
        if_eq                                   ; 87AA D0 26
            jsr R89D4_VIRUS_SPRITES             ; 87AC 20 D4 89
            lda $0309                           ; 87AF AD 09 03
            if_ne                               ; 87B2 F0 12
                lda #$C0                        ; 87B4 A9 C0
                sta L44_SPRITE_X                ; 87B6 85 44
                lda #$4B                        ; 87B8 A9 4B
                sta L45_SPRITE_Y                ; 87BA 85 45
                lda #$32                        ; 87BC A9 32
                sta L53_SPRITE_NUM              ; 87BE 85 53
                jsr R88F6_SPRITE                ; 87C0 20 F6 88
                ; Shrugging Mario
                jmp break                       ; 87C3 4C 6B 88
            end_if
            jsr R9075 ; Load P1 state           ; 87C6 20 75 90
            jsr R89B6 ; Mario sprite            ; 87C9 20 B6 89
            jsr R88B1                           ; 87CC 20 B1 88
            jmp break                           ; 87CF 4C 6B 88
        end_if

        lda $61                                 ; 87D2 A5 61
        if_eq                                   ; 87D4 D0 4C
            lda $55                             ; 87D6 A5 55
            if_eq                               ; 87D8 D0 48
                lda $031A                       ; 87DA AD 1A 03
                sta $9A                         ; 87DD 85 9A
                lda $031B                       ; 87DF AD 1B 03
                sta $9B                         ; 87E2 85 9B
                lda $031C                       ; 87E4 AD 1C 03
                sta $9C                         ; 87E7 85 9C
                lda $031D                       ; 87E9 AD 1D 03
                sta $9D                         ; 87EC 85 9D
                lda $0325                       ; 87EE AD 25 03
                sta $A5                         ; 87F1 85 A5
                lda #$38                        ; 87F3 A9 38
                sta L44_SPRITE_X                ; 87F5 85 44
                lda #$33                        ; 87F7 A9 33
                sta L45_SPRITE_Y                ; 87F9 85 45
                jsr R88CB                       ; 87FB 20 CB 88
                lda $039A                       ; 87FE AD 9A 03
                sta $9A                         ; 8801 85 9A
                lda $039B                       ; 8803 AD 9B 03
                sta $9B                         ; 8806 85 9B
                lda $039C                       ; 8808 AD 9C 03
                sta $9C                         ; 880B 85 9C
                lda $039D                       ; 880D AD 9D 03
                sta $9D                         ; 8810 85 9D
                lda $03A5                       ; 8812 AD A5 03
                sta $A5                         ; 8815 85 A5
                lda #$B8                        ; 8817 A9 B8
                sta L44_SPRITE_X                ; 8819 85 44
                lda #$33                        ; 881B A9 33
                sta L45_SPRITE_Y                ; 881D 85 45
                jsr R88CB                       ; 881F 20 CB 88
            end_if
        end_if
        lda #$2B                                ; 8822 A9 2B
        sta L45_SPRITE_Y                        ; 8824 85 45
        lda #$01                                ; 8826 A9 01
        sta $60                                 ; 8828 85 60
        lda #$6D                                ; 882A A9 6D
        sta L44_SPRITE_X                        ; 882C 85 44
        ldx $0316                               ; 882E AE 16 03
        lda LA777,x ; BCD table 00-29           ; 8831 BD 77 A7
        sta L53_SPRITE_NUM                      ; 8834 85 53
        jsr R893B_BCD_SPRITE                    ; 8836 20 3B 89
        lda #$84                                ; 8839 A9 84
        sta L44_SPRITE_X                        ; 883B 85 44
        ldx $0396                               ; 883D AE 96 03
        lda LA777,x ; BCD table 00-29           ; 8840 BD 77 A7
        sta L53_SPRITE_NUM                      ; 8843 85 53
        jsr R893B_BCD_SPRITE                    ; 8845 20 3B 89
        lda #$BF                                ; 8848 A9 BF
        sta L45_SPRITE_Y                        ; 884A 85 45
        lda #$6E                                ; 884C A9 6E
        sta L44_SPRITE_X                        ; 884E 85 44
        lda L0324_P1_VIRUS                      ; 8850 AD 24 03
        sta L53_SPRITE_NUM                      ; 8853 85 53
        jsr R893B_BCD_SPRITE                    ; 8855 20 3B 89
        lda #$83                                ; 8858 A9 83
        sta L44_SPRITE_X                        ; 885A 85 44
        lda L03A4_P2_VIRUS                      ; 885C AD A4 03
        sta L53_SPRITE_NUM                      ; 885F 85 53
        jsr R893B_BCD_SPRITE                    ; 8861 20 3B 89
        lda #$00                                ; 8864 A9 00
        sta $60                                 ; 8866 85 60
        jsr R886C                               ; 8868 20 6C 88
    end
    rts                                         ; 886B 60

; ----------------------------------------------------------------------------
R886C:
    lda $55                                     ; 886C A5 55
    if_ne                                       ; 886E F0 1C
        tax                                     ; 8870 AA
        lda LA10B,x ; $00,$34,$B4               ; 8871 BD 0B A1
        sta L44_SPRITE_X                        ; 8874 85 44
        lda #$A7                                ; 8876 A9 A7
        sta L45_SPRITE_Y                        ; 8878 85 45
        lda $43                                 ; 887A A5 43
        and #$08                                ; 887C 29 08
        lsr a                                   ; 887E 4A
        lsr a                                   ; 887F 4A
        lsr a                                   ; 8880 4A
        clc                                     ; 8881 18
        adc #$08                                ; 8882 69 08
        sta L53_SPRITE_NUM                      ; 8884 85 53
        jsr R88F6_SPRITE                        ; 8886 20 F6 88
        ; Open-mouth fist-pumping Mario
    else                                        ; 8889 4C B0 88
        lda $61                                 ; 888C A5 61
        if_ne                                   ; 888E F0 20
            tax                                 ; 8890 AA
            lda LA108,x                         ; 8891 BD 08 A1
            sta L44_SPRITE_X                    ; 8894 85 44
            lda #$B7                            ; 8896 A9 B7
            sta L45_SPRITE_Y                    ; 8898 85 45
            lda #$07                            ; 889A A9 07
            sta L53_SPRITE_NUM                  ; 889C 85 53
            jsr R88F6_SPRITE                    ; 889E 20 F6 88
            ; Big "X" sprite
            lda $43                             ; 88A1 A5 43
            and #$04                            ; 88A3 29 04
            lsr a                               ; 88A5 4A
            lsr a                               ; 88A6 4A
            tax                                 ; 88A7 AA
            lda LA10E,x ; $06,$11               ; 88A8 BD 0E A1
            sta L53_SPRITE_NUM                  ; 88AB 85 53
            jsr R88F6_SPRITE                    ; 88AD 20 F6 88
            ; Red virus sprite
        end_if
    end_if
    rts                                         ; 88B0 60

; ----------------------------------------------------------------------------
; Adds 4 entries to the sprite attribute table.
; L44_SPRITE_X = LA401,$7D + ($A2 & #$01 × #4)
; L45_SPRITE_Y (Y-coord) = LA41B,$7D + ($A2 & #$01 × #4)
R88B1:
    lda $A2                                     ; 88B1 A5 A2
    and #$01                                    ; 88B3 29 01
    asl a                                       ; 88B5 0A
    asl a                                       ; 88B6 0A
    sta $47                                     ; 88B7 85 47
    ldx $7D                                     ; 88B9 A6 7D
    lda LA401,x                                 ; 88BB BD 01 A4
    clc                                         ; 88BE 18
    adc $47                                     ; 88BF 65 47
    sta L44_SPRITE_X                            ; 88C1 85 44
    lda LA41B,x                                 ; 88C3 BD 1B A4
    clc                                         ; 88C6 18
    adc $47                                     ; 88C7 65 47
    sta L45_SPRITE_Y                            ; 88C9 85 45
; Adds 4 entries to the sprite attribute table.
; Inputs:
; L44_SPRITE_X L45_SPRITE_Y
; $9a $9b $9c $9d: 4 sprite table indexes
; 4×$A3+$A2 used as index to LA494.
; called from R87A2
R88CB:
    ldy L42_OAM_OFFSET                          ; 88CB A4 42
    lda $A3                                     ; 88CD A5 A3
    asl a                                       ; 88CF 0A
    asl a                                       ; 88D0 0A
    clc                                         ; 88D1 18
    adc $A2                                     ; 88D2 65 A2
    tax                                         ; 88D4 AA
    lda LA494,x                                 ; 88D5 BD 94 A4
    tax                                         ; 88D8 AA
    lda $9A                                     ; 88D9 A5 9A
    sta $47                                     ; 88DB 85 47
    jsr R8772                                   ; 88DD 20 72 87
    lda $9B                                     ; 88E0 A5 9B
    sta $47                                     ; 88E2 85 47
    jsr R8772                                   ; 88E4 20 72 87
    lda $9C                                     ; 88E7 A5 9C
    sta $47                                     ; 88E9 85 47
    jsr R8772                                   ; 88EB 20 72 87
    lda $9D                                     ; 88EE A5 9D
    sta $47                                     ; 88F0 85 47
    jsr R8772                                   ; 88F2 20 72 87
    rts                                         ; 88F5 60

; ----------------------------------------------------------------------------
; Normal -------D--/AXY-CZ--VN
; READS L44_SPRITE_X L45_SPRITE_Y L53_SPRITE_NUM ($47),Y $a8c2,X
; WRITES $47 $48 $0200,X
; MODIFIES L42_OAM_OFFSET
;
; input L53_SPRITE_NUM: index to a table of pointers at $A8C2
; input L42_OAM_OFFSET: target address in page $02
; input L44_SPRITE_X: offset to add to 4th byte (x position)
; input L45_SPRITE_Y: offset to add to first byte (y position)
; copy 4 bytes at a time until #$80 is seen.
;
; 4 bytes of sprite attributes:
; - Y position of top of sprite
; - Tile index number
; - Attribute flags: v-flip, h-flip, priority, palette
; - X position of left side of sprite

R88F6_SPRITE:
    clc                                         ; 88F6 18
    lda L53_SPRITE_NUM                          ; 88F7 A5 53
    rol a                                       ; 88F9 2A
    tax                                         ; 88FA AA
    lda LA8C2,x                                 ; 88FB BD C2 A8
    sta $47                                     ; 88FE 85 47
    inx                                         ; 8900 E8
    lda LA8C2,x                                 ; 8901 BD C2 A8
    sta $48                                     ; 8904 85 48
    ldx L42_OAM_OFFSET                          ; 8906 A6 42
    ldy #$00                                    ; 8908 A0 00
    loop
        lda ($47),y                             ; 890A B1 47
        cmp #$80                                ; 890C C9 80
        beq break                               ; 890E F0 2A
        clc                                     ; 8910 18
        adc L45_SPRITE_Y                        ; 8911 65 45
        sta $0200,x                             ; 8913 9D 00 02
        inx                                     ; 8916 E8
        iny                                     ; 8917 C8
        lda ($47),y                             ; 8918 B1 47
        sta $0200,x                             ; 891A 9D 00 02
        inx                                     ; 891D E8
        iny                                     ; 891E C8
        lda ($47),y                             ; 891F B1 47
        sta $0200,x                             ; 8921 9D 00 02
        inx                                     ; 8924 E8
        iny                                     ; 8925 C8
        lda ($47),y                             ; 8926 B1 47
        clc                                     ; 8928 18
        adc L44_SPRITE_X                        ; 8929 65 44
        sta $0200,x                             ; 892B 9D 00 02
        inx                                     ; 892E E8
        iny                                     ; 892F C8
        lda #$04                                ; 8930 A9 04
        clc                                     ; 8932 18
        adc L42_OAM_OFFSET                      ; 8933 65 42
        sta L42_OAM_OFFSET                      ; 8935 85 42
    forever                                     ; 8937 4C 0A 89
    rts                                         ; 893A 60

; ----------------------------------------------------------------------------
; Add two sprites to sprite attribute table for 2-digit number.
; At coordinates (L44_SPRITE_X, L45_SPRITE_Y), (L44_SPRITE_X+8, L45_SPRITE_Y).
; The tile indexes come from high and low nybbles of L53_SPRITE_NUM.
; Both have same flags ($60).
R893B_BCD_SPRITE:
    ldx L42_OAM_OFFSET                          ; 893B A6 42
    lda L45_SPRITE_Y                            ; 893D A5 45
    sta $0200,x                                 ; 893F 9D 00 02
    lda L53_SPRITE_NUM                          ; 8942 A5 53
    lsr a                                       ; 8944 4A
    lsr a                                       ; 8945 4A
    lsr a                                       ; 8946 4A
    lsr a                                       ; 8947 4A
    sta $0201,x                                 ; 8948 9D 01 02
    lda $60                                     ; 894B A5 60
    sta L0202,x                                 ; 894D 9D 02 02
    lda L44_SPRITE_X                            ; 8950 A5 44
    sta $0203,x                                 ; 8952 9D 03 02
    lda L45_SPRITE_Y                            ; 8955 A5 45
    sta $0204,x                                 ; 8957 9D 04 02
    lda L53_SPRITE_NUM                          ; 895A A5 53
    and #$0F                                    ; 895C 29 0F
    sta $0205,x                                 ; 895E 9D 05 02
    lda $60                                     ; 8961 A5 60
    sta $0206,x                                 ; 8963 9D 06 02
    lda L44_SPRITE_X                            ; 8966 A5 44
    clc                                         ; 8968 18
    adc #$08                                    ; 8969 69 08
    sta $0207,x                                 ; 896B 9D 07 02
    lda L42_OAM_OFFSET                          ; 896E A5 42
    clc                                         ; 8970 18
    adc #$08                                    ; 8971 69 08
    sta L42_OAM_OFFSET                          ; 8973 85 42
    rts                                         ; 8975 60

; ----------------------------------------------------------------------------
; unreachable?
    lda L0727_NUM_PLAYERS                       ; 8976 AD 27 07
    cmp #$02                                    ; 8979 C9 02
    bne L89B5                                   ; 897B D0 38
    lda #$27                                    ; 897D A9 27
    sta L45_SPRITE_Y                            ; 897F 85 45
    lda #$6C                                    ; 8981 A9 6C
    sta L44_SPRITE_X                            ; 8983 85 44
    lda $0725                                   ; 8985 AD 25 07
    sta L53_SPRITE_NUM                          ; 8988 85 53
    lda #$00                                    ; 898A A9 00
    sta $60                                     ; 898C 85 60
    jsr R893B_BCD_SPRITE                        ; 898E 20 3B 89
    lda #$3F                                    ; 8991 A9 3F
    sta L45_SPRITE_Y                            ; 8993 85 45
    lda #$6C                                    ; 8995 A9 6C
    sta L44_SPRITE_X                            ; 8997 85 44
    lda $031E                                   ; 8999 AD 1E 03
    sta L53_SPRITE_NUM                          ; 899C 85 53
    lda #$00                                    ; 899E A9 00
    sta $60                                     ; 89A0 85 60
    jsr R893B_BCD_SPRITE                        ; 89A2 20 3B 89
    lda #$84                                    ; 89A5 A9 84
    sta L44_SPRITE_X                            ; 89A7 85 44
    lda $039E                                   ; 89A9 AD 9E 03
    sta L53_SPRITE_NUM                          ; 89AC 85 53
    lda #$00                                    ; 89AE A9 00
    sta $60                                     ; 89B0 85 60
    jsr R893B_BCD_SPRITE                        ; 89B2 20 3B 89
L89B5:
    rts                                         ; 89B5 60

; ----------------------------------------------------------------------------
; Load sprite number $7E + #10 at (192,75)
; Pill-tossing mario sprites
; Called once in R87A2.
R89B6:
    lda #$C0                                    ; 89B6 A9 C0
    sta L44_SPRITE_X                            ; 89B8 85 44
    lda #$4B                                    ; 89BA A9 4B
    sta L45_SPRITE_Y                            ; 89BC 85 45
    lda $7E                                     ; 89BE A5 7E
    clc                                         ; 89C0 18
    adc #$0A                                    ; 89C1 69 0A
    sta L53_SPRITE_NUM                          ; 89C3 85 53
    jsr R88F6_SPRITE                            ; 89C5 20 F6 88
    ; Mario sprite
    rts                                         ; 89C8 60

; ----------------------------------------------------------------------------
; Set mapper CHR bank 1 to $43 bit 3.
R89C9:
    lda $43                                     ; 89C9 A5 43
    and #$08                                    ; 89CB 29 08
    lsr a                                       ; 89CD 4A
    lsr a                                       ; 89CE 4A
    lsr a                                       ; 89CF 4A
    jsr RB8F4 ; Set mapper CHR bank 1.          ; 89D0 20 F4 B8
    rts                                         ; 89D3 60

; ----------------------------------------------------------------------------
; Display virus sprites
; No register inputs
; READS $43 L72_V1_COUNT L73_V2_COUNT L74_V3_COUNT $89 L067e
R89D4_VIRUS_SPRITES:
.scope
    lda $89                                     ; 89D4 A5 89
    if_ne                                       ; 89D6 F0 03
        jmp L8C28                               ; 89D8 4C 28 8C
    end_if

    begin
        lda $067E                               ; 89DB AD 7E 06
        cmp $067F                               ; 89DE CD 7F 06
        if_cc                                   ; 89E1 B0 34
            ; increment MARCH mod 4
            inc L7B_VIRUS_MARCH                 ; 89E3 E6 7B
            lda L7B_VIRUS_MARCH                 ; 89E5 A5 7B
            and #$03                            ; 89E7 29 03
            sta L7B_VIRUS_MARCH                 ; 89E9 85 7B
            lda #$00                            ; 89EB A9 00
            sta $067F                           ; 89ED 8D 7F 06
            ldx L75_V1_STATE                    ; 89F0 A6 75
            lda LA11A,x                         ; 89F2 BD 1A A1
            bne break                           ; 89F5 D0 40
            ldx L76_V2_STATE                    ; 89F7 A6 76
            lda LA11A,x                         ; 89F9 BD 1A A1
            bne break                           ; 89FC D0 39
            ldx L77_V3_STATE                    ; 89FE A6 77
            lda LA11A,x                         ; 8A00 BD 1A A1
            bne break                           ; 8A03 D0 32
            lda L7B_VIRUS_MARCH                 ; 8A05 A5 7B
            and #$01                            ; 8A07 29 01
            bne break                           ; 8A09 D0 2C
            ; increment CYCLE mod 64
            inc L3E_VIRUS_CYCLE                 ; 8A0B E6 3E
            lda L3E_VIRUS_CYCLE                 ; 8A0D A5 3E
            cmp #$40                            ; 8A0F C9 40
            if_eq                               ; 8A11 D0 04
                lda #$00                        ; 8A13 A9 00
                sta L3E_VIRUS_CYCLE             ; 8A15 85 3E
            end_if
        end_if
        ldx L3E_VIRUS_CYCLE                     ; 8A17 A6 3E
        lda LA11F,x                             ; 8A19 BD 1F A1
        sta L38_V1_X                            ; 8A1C 85 38
        lda LA19F,x                             ; 8A1E BD 9F A1
        sta L39_V1_Y                            ; 8A21 85 39
        lda LA11F+21,x                          ; 8A23 BD 34 A1
        sta L3A_V2_X                            ; 8A26 85 3A
        lda LA19F+21,x                          ; 8A28 BD B4 A1
        sta L3B_V2_Y                            ; 8A2B 85 3B
        lda LA11F+42,x                          ; 8A2D BD 49 A1
        sta L3C_V3_X                            ; 8A30 85 3C
        lda LA19F+42,x                          ; 8A32 BD C9 A1
        sta L3D_V3_Y                            ; 8A35 85 3D
    end

    lda L38_V1_X                                ; 8A37 A5 38
    sta L44_SPRITE_X                            ; 8A39 85 44
    lda L39_V1_Y                                ; 8A3B A5 39
    sta L45_SPRITE_Y                            ; 8A3D 85 45

    begin ; switch L75_V1_STATE
        lda L75_V1_STATE                        ; 8A3F A5 75
        if_eq                                   ; 8A41 D0 11
            ldx L7B_VIRUS_MARCH                 ; 8A43 A6 7B
            lda LA25D,x ; $29,$2A,$29,$2B       ; 8A45 BD 5D A2
            sta L53_SPRITE_NUM                  ; 8A48 85 53
            jsr R88F6_SPRITE                    ; 8A4A 20 F6 88
            ; Yellow virus marching
            lda #$00                            ; 8A4D A9 00
            sta L78_V1_TIMER                    ; 8A4F 85 78
            jmp break                           ; 8A51 4C C6 8A
        end_if

        cmp #$01                                ; 8A54 C9 01
        if_eq                                   ; 8A56 D0 22
            inc L78_V1_TIMER                    ; 8A58 E6 78
            lda #$30                            ; 8A5A A9 30
            sta L53_SPRITE_NUM                  ; 8A5C 85 53
            ldx L78_V1_TIMER                    ; 8A5E A6 78
            lda LA231,x                         ; 8A60 BD 31 A2
            clc                                 ; 8A63 18
            adc L39_V1_Y                        ; 8A64 65 39
            sta L45_SPRITE_Y                    ; 8A66 85 45
            jsr R88F6_SPRITE                    ; 8A68 20 F6 88
            ; Yellow virus fussy
            lda L45_SPRITE_Y                    ; 8A6B A5 45
            cmp L39_V1_Y                        ; 8A6D C5 39
            bne break                           ; 8A6F D0 55
            inc L75_V1_STATE                    ; 8A71 E6 75
            lda #$00                            ; 8A73 A9 00
            sta L78_V1_TIMER                    ; 8A75 85 78
            jmp break                           ; 8A77 4C C6 8A
        end_if

        cmp #$02                                ; 8A7A C9 02
        if_eq                                   ; 8A7C D0 33
            inc L78_V1_TIMER                    ; 8A7E E6 78
            lda L78_V1_TIMER                    ; 8A80 A5 78
            cmp #$A0                            ; 8A82 C9 A0
            if_eq                               ; 8A84 D0 15
                lda #$00                        ; 8A86 A9 00
                sta L75_V1_STATE                ; 8A88 85 75
                lda L72_V1_COUNT                ; 8A8A A5 72
                if_eq                           ; 8A8C D0 0D
                    lda #$09                    ; 8A8E A9 09
                    sta $06F1                   ; 8A90 8D F1 06
                    lda #$03                    ; 8A93 A9 03
                    sta L75_V1_STATE            ; 8A95 85 75
                    lda #$00                    ; 8A97 A9 00
                    sta L78_V1_TIMER            ; 8A99 85 78
                end_if
            end_if
            lda #$03                            ; 8A9B A9 03
            sta $06F0                           ; 8A9D 8D F0 06
            lda $43                             ; 8AA0 A5 43
            and #$04                            ; 8AA2 29 04
            lsr a                               ; 8AA4 4A
            lsr a                               ; 8AA5 4A
            clc                                 ; 8AA6 18
            adc #$30                            ; 8AA7 69 30
            sta L53_SPRITE_NUM                  ; 8AA9 85 53
            jsr R88F6_SPRITE                    ; 8AAB 20 F6 88
            ; Yellow virus fussy animation
            jmp break                           ; 8AAE 4C C6 8A
        end_if

        cmp #$03                                ; 8AB1 C9 03
        if_eq                                   ; 8AB3 D0 11
            lda #$33                            ; 8AB5 A9 33
            sta L53_SPRITE_NUM                  ; 8AB7 85 53
            jsr R88F6_SPRITE                    ; 8AB9 20 F6 88
            ; 8-way pop lines
            inc L78_V1_TIMER                    ; 8ABC E6 78
            lda L78_V1_TIMER                    ; 8ABE A5 78
            cmp #$05                            ; 8AC0 C9 05
            if_cs                               ; 8AC2 90 02
                inc L75_V1_STATE                ; 8AC4 E6 75
            end_if
        end_if
    end

    lda L3A_V2_X                                ; 8AC6 A5 3A
    sta L44_SPRITE_X                            ; 8AC8 85 44
    lda L3B_V2_Y                                ; 8ACA A5 3B
    sta L45_SPRITE_Y                            ; 8ACC 85 45

    begin ; switch L76_V2_STATE
        lda L76_V2_STATE                        ; 8ACE A5 76
        if_eq                                   ; 8AD0 D0 11
            ldx L7B_VIRUS_MARCH                 ; 8AD2 A6 7B
            lda LA255,x ; $23,$24,$23,$25       ; 8AD4 BD 55 A2
            sta L53_SPRITE_NUM                  ; 8AD7 85 53
            jsr R88F6_SPRITE                    ; 8AD9 20 F6 88
            ; Red virus marching
            lda #$00                            ; 8ADC A9 00
            sta L79_V2_TIMER                    ; 8ADE 85 79
            jmp break                           ; 8AE0 4C 55 8B
        end_if

        cmp #$01                                ; 8AE3 C9 01
        if_eq                                   ; 8AE5 D0 22
            inc L79_V2_TIMER                    ; 8AE7 E6 79
            lda #$2C                            ; 8AE9 A9 2C
            sta L53_SPRITE_NUM                  ; 8AEB 85 53
            ldx L79_V2_TIMER                    ; 8AED A6 79
            lda LA231,x                         ; 8AEF BD 31 A2
            clc                                 ; 8AF2 18
            adc L3B_V2_Y                        ; 8AF3 65 3B
            sta L45_SPRITE_Y                    ; 8AF5 85 45
            jsr R88F6_SPRITE                    ; 8AF7 20 F6 88
            ; Red virus fussy
            lda L45_SPRITE_Y                    ; 8AFA A5 45
            cmp L3B_V2_Y                        ; 8AFC C5 3B
            bne break                           ; 8AFE D0 55
            inc L76_V2_STATE                    ; 8B00 E6 76
            lda #$00                            ; 8B02 A9 00
            sta L79_V2_TIMER                    ; 8B04 85 79
            jmp break                           ; 8B06 4C 55 8B
        end_if

        cmp #$02                                ; 8B09 C9 02
        if_eq                                   ; 8B0B D0 33
            inc L79_V2_TIMER                    ; 8B0D E6 79
            lda L79_V2_TIMER                    ; 8B0F A5 79
            cmp #$A0                            ; 8B11 C9 A0
            if_eq                               ; 8B13 D0 15
                lda #$00                        ; 8B15 A9 00
                sta L76_V2_STATE                ; 8B17 85 76
                lda L73_V2_COUNT                ; 8B19 A5 73
                if_eq                           ; 8B1B D0 0D
                    lda #$09                    ; 8B1D A9 09
                    sta $06F1                   ; 8B1F 8D F1 06
                    lda #$03                    ; 8B22 A9 03
                    sta L76_V2_STATE            ; 8B24 85 76
                    lda #$00                    ; 8B26 A9 00
                    sta L79_V2_TIMER            ; 8B28 85 79
                end_if
            end_if
            lda #$03                            ; 8B2A A9 03
            sta $06F0                           ; 8B2C 8D F0 06
            lda $43                             ; 8B2F A5 43
            and #$04                            ; 8B31 29 04
            lsr a                               ; 8B33 4A
            lsr a                               ; 8B34 4A
            clc                                 ; 8B35 18
            adc #$2C                            ; 8B36 69 2C
            sta L53_SPRITE_NUM                  ; 8B38 85 53
            jsr R88F6_SPRITE                    ; 8B3A 20 F6 88
            ; Red virus fussy animated
            jmp break                           ; 8B3D 4C 55 8B
        end_if

        cmp #$03                                ; 8B40 C9 03
        if_eq                                   ; 8B42 D0 11
            lda #$33                            ; 8B44 A9 33
            sta L53_SPRITE_NUM                  ; 8B46 85 53
            jsr R88F6_SPRITE                    ; 8B48 20 F6 88
            ; 8-way pop
            inc L79_V2_TIMER                    ; 8B4B E6 79
            lda L79_V2_TIMER                    ; 8B4D A5 79
            cmp #$05                            ; 8B4F C9 05
            if_cs                               ; 8B51 90 02
                inc L76_V2_STATE                ; 8B53 E6 76
            end_if
        end_if
    end

    lda L3C_V3_X                                ; 8B55 A5 3C
    sta L44_SPRITE_X                            ; 8B57 85 44
    lda L3D_V3_Y                                ; 8B59 A5 3D
    sta L45_SPRITE_Y                            ; 8B5B 85 45
    begin ; switch L77_V3_STATE
        lda L77_V3_STATE                        ; 8B5D A5 77
        if_eq                                   ; 8B5F D0 11
            ldx L7B_VIRUS_MARCH                 ; 8B61 A6 7B
            lda LA259,x ; $26,$27,$26,$28       ; 8B63 BD 59 A2
            sta L53_SPRITE_NUM                  ; 8B66 85 53
            jsr R88F6_SPRITE                    ; 8B68 20 F6 88
            ; Blue virus marching
            lda #$00                            ; 8B6B A9 00
            sta L7A_V3_TIMER                    ; 8B6D 85 7A
            jmp break                           ; 8B6F 4C E4 8B
        end_if

        cmp #$01                                ; 8B72 C9 01
        if_eq                                   ; 8B74 D0 22
            inc L7A_V3_TIMER                    ; 8B76 E6 7A
            lda #$2E                            ; 8B78 A9 2E
            sta L53_SPRITE_NUM                  ; 8B7A 85 53
            ldx L7A_V3_TIMER                    ; 8B7C A6 7A
            lda LA231,x                         ; 8B7E BD 31 A2
            clc                                 ; 8B81 18
            adc L3D_V3_Y                        ; 8B82 65 3D
            sta L45_SPRITE_Y                    ; 8B84 85 45
            jsr R88F6_SPRITE                    ; 8B86 20 F6 88
            ; Blue virus fussy
            lda L45_SPRITE_Y                    ; 8B89 A5 45
            cmp L3D_V3_Y                        ; 8B8B C5 3D
            bne break                           ; 8B8D D0 55
            inc L77_V3_STATE                    ; 8B8F E6 77
            lda #$00                            ; 8B91 A9 00
            sta L7A_V3_TIMER                    ; 8B93 85 7A
            jmp break                           ; 8B95 4C E4 8B
        end_if

        cmp #$02                                ; 8B98 C9 02
        if_eq                                   ; 8B9A D0 33
            inc L7A_V3_TIMER                    ; 8B9C E6 7A
            lda L7A_V3_TIMER                    ; 8B9E A5 7A
            cmp #$A0                            ; 8BA0 C9 A0
            if_eq                               ; 8BA2 D0 15
                lda #$00                        ; 8BA4 A9 00
                sta L77_V3_STATE                ; 8BA6 85 77
                lda L74_V3_COUNT                ; 8BA8 A5 74
                if_eq                           ; 8BAA D0 0D
                    lda #$09                    ; 8BAC A9 09
                    sta $06F1                   ; 8BAE 8D F1 06
                    lda #$03                    ; 8BB1 A9 03
                    sta L77_V3_STATE            ; 8BB3 85 77
                    lda #$00                    ; 8BB5 A9 00
                    sta L7A_V3_TIMER            ; 8BB7 85 7A
                end_if
            end_if
            lda #$03                            ; 8BB9 A9 03
            sta $06F0                           ; 8BBB 8D F0 06
            lda $43                             ; 8BBE A5 43
            and #$04                            ; 8BC0 29 04
            lsr a                               ; 8BC2 4A
            lsr a                               ; 8BC3 4A
            clc                                 ; 8BC4 18
            adc #$2E                            ; 8BC5 69 2E
            sta L53_SPRITE_NUM                  ; 8BC7 85 53
            jsr R88F6_SPRITE                    ; 8BC9 20 F6 88
            jmp break                           ; 8BCC 4C E4 8B
        end_if

        cmp #$03                                ; 8BCF C9 03
        if_eq                                   ; 8BD1 D0 11
            lda #$33                            ; 8BD3 A9 33
            sta L53_SPRITE_NUM                  ; 8BD5 85 53
            jsr R88F6_SPRITE                    ; 8BD7 20 F6 88
            ; 8-way pop
            inc L7A_V3_TIMER                    ; 8BDA E6 7A
            lda L7A_V3_TIMER                    ; 8BDC A5 7A
            cmp #$05                            ; 8BDE C9 05
            if_cs                               ; 8BE0 90 02
                inc L77_V3_STATE                ; 8BE2 E6 77
            end_if
        end_if
    end
    rts                                         ; 8BE4 60
.endscope

; ----------------------------------------------------------------------------
R8BE5:
.scope
        lda $067E                                   ; 8BE5 AD 7E 06
        cmp $067F                                   ; 8BE8 CD 7F 06
        if_cc                                       ; 8BEB B0 0D
        inc L7B_VIRUS_MARCH                         ; 8BED E6 7B
        lda L7B_VIRUS_MARCH                         ; 8BEF A5 7B
        and #$03                                    ; 8BF1 29 03
        sta L7B_VIRUS_MARCH                         ; 8BF3 85 7B
        lda #$00                                    ; 8BF5 A9 00
        sta $067F                                   ; 8BF7 8D 7F 06
        end_if
        lda #$C0                                    ; 8BFA A9 C0
        sta L44_SPRITE_X                            ; 8BFC 85 44
        lda #$B0                                    ; 8BFE A9 B0
        sta L45_SPRITE_Y                            ; 8C00 85 45
        ldx L7B_VIRUS_MARCH                         ; 8C02 A6 7B
        lda LA259,x ; $26,$27,$26,$28               ; 8C04 BD 59 A2
        sta L53_SPRITE_NUM                          ; 8C07 85 53
        jsr R88F6_SPRITE                            ; 8C09 20 F6 88
        ; Blue virus marching
        lda #$2C                                    ; 8C0C A9 2C
        sta L44_SPRITE_X                            ; 8C0E 85 44
        lda #$A7                                    ; 8C10 A9 A7
        sta L45_SPRITE_Y                            ; 8C12 85 45
        lda #$48                                    ; 8C14 A9 48
        sta L53_SPRITE_NUM                          ; 8C16 85 53
        jsr R88F6_SPRITE                            ; 8C18 20 F6 88
        lda L7B_VIRUS_MARCH                         ; 8C1B A5 7B
        and #$01                                    ; 8C1D 29 01
        clc                                         ; 8C1F 18
        adc #$49                                    ; 8C20 69 49
        sta L53_SPRITE_NUM                          ; 8C22 85 53
        jsr R88F6_SPRITE                            ; 8C24 20 F6 88
        rts                                         ; 8C27 60
.endscope

; ----------------------------------------------------------------------------
; Jump from R89D4_VIRUS_SPRITES
L8C28:
    lda L38_V1_X                                ; 8C28 A5 38
    sta L44_SPRITE_X                            ; 8C2A 85 44
    lda L39_V1_Y                                ; 8C2C A5 39
    sta L45_SPRITE_Y                            ; 8C2E 85 45
    lda $43                                     ; 8C30 A5 43
    and #$04                                    ; 8C32 29 04
    lsr a                                       ; 8C34 4A
    lsr a                                       ; 8C35 4A
    tax                                         ; 8C36 AA
    lda LA0FF,x ; $29,$14                       ; 8C37 BD FF A0
    sta L53_SPRITE_NUM                          ; 8C3A 85 53
    jsr R88F6_SPRITE                            ; 8C3C 20 F6 88
    lda L3A_V2_X                                ; 8C3F A5 3A
    sta L44_SPRITE_X                            ; 8C41 85 44
    lda L3B_V2_Y                                ; 8C43 A5 3B
    sta L45_SPRITE_Y                            ; 8C45 85 45
    lda $43                                     ; 8C47 A5 43
    and #$08                                    ; 8C49 29 08
    lsr a                                       ; 8C4B 4A
    lsr a                                       ; 8C4C 4A
    lsr a                                       ; 8C4D 4A
    tax                                         ; 8C4E AA
    lda LA101,x ; #$23 or #$13                  ; 8C4F BD 01 A1
    sta L53_SPRITE_NUM                          ; 8C52 85 53
    jsr R88F6_SPRITE                            ; 8C54 20 F6 88
    lda L3C_V3_X                                ; 8C57 A5 3C
    sta L44_SPRITE_X                            ; 8C59 85 44
    lda L3D_V3_Y                                ; 8C5B A5 3D
    sta L45_SPRITE_Y                            ; 8C5D 85 45
    lda $43                                     ; 8C5F A5 43
    and #$04                                    ; 8C61 29 04
    lsr a                                       ; 8C63 4A
    lsr a                                       ; 8C64 4A
    tax                                         ; 8C65 AA
    lda LA103,x ; #$26 or #$15                  ; 8C66 BD 03 A1
    sta L53_SPRITE_NUM                          ; 8C69 85 53
    jsr R88F6_SPRITE                            ; 8C6B 20 F6 88
    rts                                         ; 8C6E 60

; ----------------------------------------------------------------------------
; R9BB9 routine 1.
L8C6F:  jsr     R8C73                           ; 8C6F 20 73 8C
        rts                                     ; 8C72 60

; ----------------------------------------------------------------------------
; Jump to one of 9 subroutines based on $87.
R8C73:
        lda     $87                             ; 8C73 A5 87
        jsr     RB8AC                           ; 8C75 20 AC B8
        .word   L8C8A
        .word   L8C91
        .word   L8C91
        .word   L8C94
        .word   L9413
        .word   L91FB
        .word   L9469
        .word   L92DB
        .word   L8D4F

; ----------------------------------------------------------------------------
; R8C73 routine 0.
; Go to state 1.
L8C8A:
    lda #$00
    sta $AD                                     ; 8C8C 85 AD
    inc $87                                     ; 8C8E E6 87
    rts                                         ; 8C90 60

; ----------------------------------------------------------------------------
; R8C73 routine 1 and 2.
; Go to state 2 and 3 (respectively).
L8C91:
    inc $87                                     ; 8C91 E6 87
    rts                                         ; 8C93 60

; ----------------------------------------------------------------------------
; R8C73 routine 3.
L8C94:
.scope
    lda $80                                     ; 8C94 A5 80
    cmp #$FF                                    ; 8C96 C9 FF
    if_ne                                       ; 8C98 F0 03
    else                                        ; 8C9A 4C 4E 8D
        lda #$00                                ; 8C9D A9 00
        sta $47                                 ; 8C9F 85 47
        sta $57                                 ; 8CA1 85 57
        ldy #$7F                                ; 8CA3 A0 7F
        sty $49                                 ; 8CA5 84 49
    L8CA7:
        ldy $49                                 ; 8CA7 A4 49
        lda ($57),y                             ; 8CA9 B1 57
        cmp #$F0                                ; 8CAB C9 F0
        if_cc                                   ; 8CAD B0 03
        else                                    ; 8CAF 4C 34 8D
            lda #$FF                            ; 8CB2 A9 FF
            sta ($57),y                         ; 8CB4 91 57
            sta $48                             ; 8CB6 85 48
            lda $0724                           ; 8CB8 AD 24 07
            bne L8D34                           ; 8CBB D0 77
            sty $49                             ; 8CBD 84 49
            tya                                 ; 8CBF 98
            sec                                 ; 8CC0 38
            sbc #$08                            ; 8CC1 E9 08
            tay                                 ; 8CC3 A8
            lda ($57),y                         ; 8CC4 B1 57
            cmp #$A0                            ; 8CC6 C9 A0
            bcs L8D34                           ; 8CC8 B0 6A
            and #$F0                            ; 8CCA 29 F0
            cmp #$60                            ; 8CCC C9 60
            beq L8D34                           ; 8CCE F0 64
            cmp #$A0                            ; 8CD0 C9 A0
            beq L8D34                           ; 8CD2 F0 60
            cmp #$70                            ; 8CD4 C9 70
            if_eq                               ; 8CD6 D0 40
                sty $4A                         ; 8CD8 84 4A
                sty $4C                         ; 8CDA 84 4C
                lda $49                         ; 8CDC A5 49
                sta $4B                         ; 8CDE 85 4B
                loop
                    dec $4A                     ; 8CE0 C6 4A
                    dec $4B                     ; 8CE2 C6 4B
                    ldy $4B                     ; 8CE4 A4 4B
                    lda ($57),y                 ; 8CE6 B1 57
                    cmp #$F0                    ; 8CE8 C9 F0
                    bcc L8D34                   ; 8CEA 90 48
                    ldy $4A                     ; 8CEC A4 4A
                    lda ($57),y                 ; 8CEE B1 57
                    and #$F0                    ; 8CF0 29 F0
                    cmp #$60                    ; 8CF2 C9 60
                while_ne                        ; 8CF4 D0 EA
            L8CF6:
                ldy $4C                         ; 8CF6 A4 4C
                lda ($57),y                     ; 8CF8 B1 57
                ldy $49                         ; 8CFA A4 49
                sta ($57),y                     ; 8CFC 91 57
                lda #$FF                        ; 8CFE A9 FF
                ldy $4C                         ; 8D00 A4 4C
                sta ($57),y                     ; 8D02 91 57
                lda $49                         ; 8D04 A5 49
                cmp $4B                         ; 8D06 C5 4B
                beq L8D34                       ; 8D08 F0 2A
                dec $49                         ; 8D0A C6 49
                dec $4C                         ; 8D0C C6 4C
                inc $47                         ; 8D0E E6 47
                lda #$07                        ; 8D10 A9 07
                sta $06F1                       ; 8D12 8D F1 06
                jmp L8CF6                       ; 8D15 4C F6 8C
            end_if
            ldy $49                             ; 8D18 A4 49
            tya                                 ; 8D1A 98
            sec                                 ; 8D1B 38
            sbc #$08                            ; 8D1C E9 08
            tay                                 ; 8D1E A8
            lda ($57),y                         ; 8D1F B1 57
            sta $48                             ; 8D21 85 48
            lda #$FF                            ; 8D23 A9 FF
            sta ($57),y                         ; 8D25 91 57
            ldy $49                             ; 8D27 A4 49
            lda $48                             ; 8D29 A5 48
            sta ($57),y                         ; 8D2B 91 57
            inc $47                             ; 8D2D E6 47
            lda #$07                            ; 8D2F A9 07
            sta $06F1                           ; 8D31 8D F1 06
        L8D34:
        end_if
        dec $49                                 ; 8D34 C6 49
        ldy $49                                 ; 8D36 A4 49
        cpy #$FF                                ; 8D38 C0 FF
        if_ne                                   ; 8D3A F0 03
            jmp L8CA7                           ; 8D3C 4C A7 8C
        end_if
        lda #$0F                                ; 8D3F A9 0F
        sta $80                                 ; 8D41 85 80
        lda $47                                 ; 8D43 A5 47
        if_ne                                   ; 8D45 F0 05
            dec $87                             ; 8D47 C6 87
        else                                    ; 8D49 4C 4E 8D
            inc $87                             ; 8D4C E6 87
        end_if
    end_if
    rts                                         ; 8D4E 60
.endscope

; ----------------------------------------------------------------------------
; R8C73 routine 8.
; Go to state 0.
L8D4F:
    lda #$00                                    ; 8D4F A9 00
    sta $87                                     ; 8D51 85 87
    inc $97                                     ; 8D53 E6 97
    rts                                         ; 8D55 60

; ----------------------------------------------------------------------------
; R9BB9 routine 0.
L8D56:
    lda $A8                                     ; 8D56 A5 A8
    if_ne                                       ; 8D58 F0 05
        inc $97                                 ; 8D5A E6 97
    else                                        ; 8D5C 4C 6F 8D
        lda #$00                                ; 8D5F A9 00
        sta $A1                                 ; 8D61 85 A1
        jsr R871F                               ; 8D63 20 1F 87
        jsr R8D70                               ; 8D66 20 70 8D
        jsr R8DBF                               ; 8D69 20 BF 8D
        jsr R8E2B                               ; 8D6C 20 2B 8E
    end_if
    rts                                         ; 8D6F 60

; ----------------------------------------------------------------------------
; no inputs
; -------D--/AXY-CZ--VN
; LOOP: (0,3) RTS: (0,0,3,3)
; READS $43 $5c $85 $86 $8a $8b $92 $a5 $a6 ($57),Y $a38d,X $a455,X $a458,X $a45b,X $a474,X $a4c4,X $a795,X
; WRITES $47 $48 $49 $4a $57 $80 $86 $92 $97 $a0 $06f1 ($57),Y
; JSR $8f52 $90d3
R8D70:
.scope
    lda $43                                     ; 8D70 A5 43
    and #$01                                    ; 8D72 29 01
    beq L8D7E                                   ; 8D74 F0 08
    lda $5C                                     ; 8D76 A5 5C
    and #$0F                                    ; 8D78 29 0F
    cmp #$04                                    ; 8D7A C9 04
    beq L8D94                                   ; 8D7C F0 16
L8D7E:
    inc $92                                     ; 8D7E E6 92
    lda $8A                                     ; 8D80 A5 8A
    sta $A0                                     ; 8D82 85 A0
    ldx L8B_SPEED                               ; 8D84 A6 8B
    lda LA38D,x                                 ; 8D86 BD 8D A3
    clc                                         ; 8D89 18
    adc $A0                                     ; 8D8A 65 A0
    tax                                         ; 8D8C AA
    lda LA795,x                                 ; 8D8D BD 95 A7
    cmp $92                                     ; 8D90 C5 92
    bcs L8DBE ; rts                             ; 8D92 B0 2A
L8D94:
    dec $86                                     ; 8D94 C6 86
    lda #$00                                    ; 8D96 A9 00
    sta $92                                     ; 8D98 85 92
    jsr R90D3                                   ; 8D9A 20 D3 90
    bne L8DA5                                   ; 8D9D D0 06
    lda $86                                     ; 8D9F A5 86
    cmp #$FF                                    ; 8DA1 C9 FF
    bne L8DBE ; rts                             ; 8DA3 D0 19
L8DA5:
    inc $86                                     ; 8DA5 E6 86
    lda #$07                                    ; 8DA7 A9 07
    sta $06F1                                   ; 8DA9 8D F1 06
    jsr R8F52                                   ; 8DAC 20 52 8F
    ; make the program crash if $0740 is nonzero
    ; (which indicates a checksum failure)
    lda $0740                                   ; 8DAF AD 40 07
    if_ne                                       ; 8DB2 F0 05
        lda L53_SPRITE_NUM                      ; 8DB4 A5 53
        pha                                     ; 8DB6 48
        pha                                     ; 8DB7 48
        pha                                     ; 8DB8 48
    end_if
    inc $97                                     ; 8DB9 E6 97
    jmp L8DBE                                   ; 8DBB 4C BE 8D
L8DBE:
    rts                                         ; 8DBE 60
.endscope

; ----------------------------------------------------------------------------
R8DBF:
    begin
        lda $5B                                 ; 8DBF A5 5B
        and #$03                                ; 8DC1 29 03
        if_eq                                   ; 8DC3 D0 15
            lda $5C                             ; 8DC5 A5 5C
            and #$03                            ; 8DC7 29 03
            beq break                           ; 8DC9 F0 5F
            inc $93                             ; 8DCB E6 93
            lda $93                             ; 8DCD A5 93
            cmp #$10                            ; 8DCF C9 10
            bmi break                           ; 8DD1 30 57
            lda #$0A                            ; 8DD3 A9 0A
            sta $93                             ; 8DD5 85 93
        else                                    ; 8DD7 4C E3 8D
            lda #$00                            ; 8DDA A9 00
            sta $93                             ; 8DDC 85 93
            lda #$03                            ; 8DDE A9 03
            sta $06F1                           ; 8DE0 8D F1 06
        end_if
        lda $5C                                 ; 8DE3 A5 5C
        and #$01                                ; 8DE5 29 01
        if_ne                                   ; 8DE7 F0 20
            lda $A5                             ; 8DE9 A5 A5
            and #$01                            ; 8DEB 29 01
            clc                                 ; 8DED 18
            adc #$06                            ; 8DEE 69 06
            cmp $85                             ; 8DF0 C5 85
            if_ne                               ; 8DF2 F0 15
                inc $85                         ; 8DF4 E6 85
                jsr R90D3                       ; 8DF6 20 D3 90
                if_eq                           ; 8DF9 D0 08
                    lda #$03                    ; 8DFB A9 03
                    sta $06F1                   ; 8DFD 8D F1 06
                else                            ; 8E00 4C 09 8E
                    dec $85                     ; 8E03 C6 85
                    lda #$0F                    ; 8E05 A9 0F
                    sta $93                     ; 8E07 85 93
                end_if
            end_if
        end_if
        lda $5C                                 ; 8E09 A5 5C
        and #$02                                ; 8E0B 29 02
        beq break                               ; 8E0D F0 1B
        lda $85                                 ; 8E0F A5 85
        cmp #$00                                ; 8E11 C9 00
        beq break                               ; 8E13 F0 15
        dec $85                                 ; 8E15 C6 85
        jsr R90D3                               ; 8E17 20 D3 90
        if_eq                                   ; 8E1A D0 08
            lda #$03                            ; 8E1C A9 03
            sta $06F1                           ; 8E1E 8D F1 06
        else                                    ; 8E21 4C 2A 8E
            inc $85                             ; 8E24 E6 85
            lda #$0F                            ; 8E26 A9 0F
            sta $93                             ; 8E28 85 93
        end_if
    end
    rts                                         ; 8E2A 60

; ----------------------------------------------------------------------------
R8E2B:
    lda $A5                                     ; 8E2B A5 A5
    sta $4A                                     ; 8E2D 85 4A
    lda $85                                     ; 8E2F A5 85
    sta $4B                                     ; 8E31 85 4B
    lda $5B                                     ; 8E33 A5 5B
    and #$80                                    ; 8E35 29 80
    if_ne                                       ; 8E37 F0 10
        lda #$05                                ; 8E39 A9 05
        sta $06F1                               ; 8E3B 8D F1 06
        dec $A5                                 ; 8E3E C6 A5
        lda $A5                                 ; 8E40 A5 A5
        and #$03                                ; 8E42 29 03
        sta $A5                                 ; 8E44 85 A5
        jsr R8E60                               ; 8E46 20 60 8E
    end_if
    lda $5B                                     ; 8E49 A5 5B
    and #$40                                    ; 8E4B 29 40
    if_ne                                       ; 8E4D F0 10
        lda #$05                                ; 8E4F A9 05
        sta $06F1                               ; 8E51 8D F1 06
        inc $A5                                 ; 8E54 E6 A5
        lda $A5                                 ; 8E56 A5 A5
        and #$03                                ; 8E58 29 03
        sta $A5                                 ; 8E5A 85 A5
        jsr R8E60                               ; 8E5C 20 60 8E
    end_if
    rts                                         ; 8E5F 60

; ----------------------------------------------------------------------------
R8E60:
.scope
        lda $A5                                 ; 8E60 A5 A5
        and #$01                                ; 8E62 29 01
        bne L8E7F                               ; 8E64 D0 19
        jsr R90D3                               ; 8E66 20 D3 90
        bne L8E7D                               ; 8E69 D0 12
        lda $5C                                 ; 8E6B A5 5C
        and #$02                                ; 8E6D 29 02
        beq L8E8C                               ; 8E6F F0 1B
        dec $85                                 ; 8E71 C6 85
        jsr R90D3                               ; 8E73 20 D3 90
        beq L8E8C                               ; 8E76 F0 14
        inc $85                                 ; 8E78 E6 85
        jmp L8E8C                               ; 8E7A 4C 8C 8E

L8E7D:  dec $85                                 ; 8E7D C6 85
L8E7F:  jsr R90D3                               ; 8E7F 20 D3 90
        if_ne                                   ; 8E82 F0 08
            lda $4A                             ; 8E84 A5 4A
            sta $A5                             ; 8E86 85 A5
            lda $4B                             ; 8E88 A5 4B
            sta $85                             ; 8E8A 85 85
        end_if
L8E8C:  rts                                     ; 8E8C 60
.endscope

; ----------------------------------------------------------------------------
R8E8D:
; $81 <- $9A
; $82 <- $9B
; $83 <- $9C
; $84 <- $9D
; $A5 <- #$00
; $A6 <- $A3
; if $0741 > 0 then x <- LCF80,$A7 else x <- $0780,$A7
; $9A <- LA7FD,x
; $9B <- LA806,x
; inc $A7
; $A7 &= #$7F
; $7D <- #$00
; $A2 <- #$00
; $A3 <- #$02
; $85 <- #$03
; $86 <- #$0F
; inc $90
; if $90 & #$0F >= #$0A then $90+=#$06
; if $90 & #$F0 >= #$A0 then $90+=#$60; $91++
; if $91 & #$0F >= #$0A then $91+=#$06
; if $91 & #$F0 >= #$A0 then $91+=#$60; $90 <- #$99; $91 <- #$99
; if ($0723 == 0) {
;     if ($90 == 0 || $90 & #$0F == 0) {
;         if ($8A != #$31) {
;             inc $8A
;             $06F1 <- #$06
;             $52 |= #$12
;         }
;     }
; }
; $8F <- #$00
; $52 |= #$01
.scope
        lda $9A                                 ; 8E8D A5 9A
        sta $81                                 ; 8E8F 85 81
        lda $9B                                 ; 8E91 A5 9B
        sta $82                                 ; 8E93 85 82
        lda $9C                                 ; 8E95 A5 9C
        sta $83                                 ; 8E97 85 83
        lda $9D                                 ; 8E99 A5 9D
        sta $84                                 ; 8E9B 85 84
        lda #$00                                ; 8E9D A9 00
        sta $A5                                 ; 8E9F 85 A5
        lda $A3                                 ; 8EA1 A5 A3
        sta $A6                                 ; 8EA3 85 A6
        lda $0741                               ; 8EA5 AD 41 07
        if_ne                                   ; 8EA8 F0 09
            ldx $A7                             ; 8EAA A6 A7
            lda LCF80,x                         ; 8EAC BD 80 CF
            tax                                 ; 8EAF AA
        else                                    ; 8EB0 4C B9 8E
            ldx $A7                             ; 8EB3 A6 A7
            lda $0780,x                         ; 8EB5 BD 80 07
            tax                                 ; 8EB8 AA
        end_if
        lda LA7FD,x                             ; 8EB9 BD FD A7
        sta $9A                                 ; 8EBC 85 9A
        lda LA806,x                             ; 8EBE BD 06 A8
        sta $9B                                 ; 8EC1 85 9B
        inc $A7                                 ; 8EC3 E6 A7
        lda $A7                                 ; 8EC5 A5 A7
        and #$7F                                ; 8EC7 29 7F
        sta $A7                                 ; 8EC9 85 A7
        lda #$00                                ; 8ECB A9 00
        sta $7D                                 ; 8ECD 85 7D
        sta $A2                                 ; 8ECF 85 A2
        lda #$02                                ; 8ED1 A9 02
        sta $A3                                 ; 8ED3 85 A3
        lda #$03                                ; 8ED5 A9 03
        sta $85                                 ; 8ED7 85 85
        lda #$0F                                ; 8ED9 A9 0F
        sta $86                                 ; 8EDB 85 86
        inc $90                                 ; 8EDD E6 90
        lda $90                                 ; 8EDF A5 90
        and #$0F                                ; 8EE1 29 0F
        cmp #$0A                                ; 8EE3 C9 0A
        if_cs                                   ; 8EE5 90 07
            lda $90                             ; 8EE7 A5 90
            clc                                 ; 8EE9 18
            adc #$06                            ; 8EEA 69 06
            sta $90                             ; 8EEC 85 90
        end_if
        lda $90                                 ; 8EEE A5 90
        and #$F0                                ; 8EF0 29 F0
        cmp #$A0                                ; 8EF2 C9 A0
        if_cs                                   ; 8EF4 90 09
            lda $90                             ; 8EF6 A5 90
            clc                                 ; 8EF8 18
            adc #$60                            ; 8EF9 69 60
            sta $90                             ; 8EFB 85 90
            inc $91                             ; 8EFD E6 91
        end_if
        lda $91                                 ; 8EFF A5 91
        and #$0F                                ; 8F01 29 0F
        cmp #$0A                                ; 8F03 C9 0A
        if_cs                                   ; 8F05 90 07
            lda $91                             ; 8F07 A5 91
            clc                                 ; 8F09 18
            adc #$06                            ; 8F0A 69 06
            sta $91                             ; 8F0C 85 91
        end_if
        lda $91                                 ; 8F0E A5 91
        and #$F0                                ; 8F10 29 F0
        cmp #$A0                                ; 8F12 C9 A0
        if_cs                                   ; 8F14 90 0B
            lda $91                             ; 8F16 A5 91
            clc                                 ; 8F18 18
            adc #$60                            ; 8F19 69 60
            lda #$99                            ; 8F1B A9 99
            sta $90                             ; 8F1D 85 90
            sta $91                             ; 8F1F 85 91
        end_if
        lda $0723                               ; 8F21 AD 23 07
        if_eq                                   ; 8F24 D0 21
            lda $90                             ; 8F26 A5 90
            cmp #$00                            ; 8F28 C9 00
            beq L8F32                           ; 8F2A F0 06
            and #$0F                            ; 8F2C 29 0F
            cmp #$00                            ; 8F2E C9 00
            bne L8F47                           ; 8F30 D0 15
        L8F32:
            lda $8A                             ; 8F32 A5 8A
            cmp #$31                            ; 8F34 C9 31
            if_ne                               ; 8F36 F0 0F
                inc $8A                         ; 8F38 E6 8A
                lda #$06                        ; 8F3A A9 06
                sta $06F1                       ; 8F3C 8D F1 06
                lda $52                         ; 8F3F A5 52
                ora #$12                        ; 8F41 09 12
                ora #$02                        ; 8F43 09 02
                sta $52                         ; 8F45 85 52
            end_if
        L8F47:
        end_if
        lda #$00                                ; 8F47 A9 00
        sta $8F                                 ; 8F49 85 8F
        lda $52                                 ; 8F4B A5 52
        ora #$01                                ; 8F4D 09 01
        sta $52                                 ; 8F4F 85 52
        rts                                     ; 8F51 60
.endscope

; ----------------------------------------------------------------------------
R8F52:
.scope
    ldx $86                                     ; 8F52 A6 86
    ; A = #$78 - 8*x
    lda LA474,x                                 ; 8F54 BD 74 A4
    clc                                         ; 8F57 18
    adc $85                                     ; 8F58 65 85
    sta $47                                     ; 8F5A 85 47
    lda $A6                                     ; 8F5C A5 A6
    sec                                         ; 8F5E 38
    sbc #$02                                    ; 8F5F E9 02
    asl a                                       ; 8F61 0A
    asl a                                       ; 8F62 0A
    asl a                                       ; 8F63 0A
    asl a                                       ; 8F64 0A
    sta $48                                     ; 8F65 85 48
    lda $A5                                     ; 8F67 A5 A5
    asl a                                       ; 8F69 0A
    asl a                                       ; 8F6A 0A
    clc                                         ; 8F6B 18
    adc $48                                     ; 8F6C 65 48
    tax                                         ; 8F6E AA
    lda #$00                                    ; 8F6F A9 00
    sta $49                                     ; 8F71 85 49
    loop
        lda LA4DC,x                             ; 8F73 BD DC A4
        cmp #$63                                ; 8F76 C9 63
        beq break                               ; 8F78 F0 24
        clc                                     ; 8F7A 18
        adc $47                                 ; 8F7B 65 47
        sta $57                                 ; 8F7D 85 57
        cmp #$80                                ; 8F7F C9 80
        if_cc                                   ; 8F81 B0 12
            lda LA50C,x                         ; 8F83 BD 0C A5
            clc                                 ; 8F86 18
            sta $4A                             ; 8F87 85 4A
            ldy $49                             ; 8F89 A4 49
            lda $81,y                           ; 8F8B B9 81 00
            clc                                 ; 8F8E 18
            adc $4A                             ; 8F8F 65 4A
            ldy #$00                            ; 8F91 A0 00
            sta ($57),y                         ; 8F93 91 57
        end_if
        inx                                     ; 8F95 E8
        inc $49                                 ; 8F96 E6 49
        lda $49                                 ; 8F98 A5 49
        cmp #$04                                ; 8F9A C9 04
    while_ne                                    ; 8F9C D0 D5
    lda $86                                     ; 8F9E A5 86
    eor #$0F                                    ; 8FA0 49 0F
    sta $80                                     ; 8FA2 85 80
    rts                                         ; 8FA4 60
.endscope

; ----------------------------------------------------------------------------
; Copy $031E $039E $0316 $0396 L030B_P1_SPEED L038B_P2_SPEED
; to   $0732 $0733 $0734 $0735 $0736 $0737
R8FA5:
    lda $031E                                   ; 8FA5 AD 1E 03
    sta $0732                                   ; 8FA8 8D 32 07
    lda $039E                                   ; 8FAB AD 9E 03
    sta $0733                                   ; 8FAE 8D 33 07
    lda $0316                                   ; 8FB1 AD 16 03
    sta $0734                                   ; 8FB4 8D 34 07
    lda $0396                                   ; 8FB7 AD 96 03
    sta $0735                                   ; 8FBA 8D 35 07
    lda L030B_P1_SPEED                          ; 8FBD AD 0B 03
    sta $0736                                   ; 8FC0 8D 36 07
    lda L038B_P2_SPEED                          ; 8FC3 AD 8B 03
    sta $0737                                   ; 8FC6 8D 37 07
    rts                                         ; 8FC9 60

; ----------------------------------------------------------------------------
; Copy $0732 $0733 $0734 $0735 $0736 $0737
; to   $031E $039E $0316 $0396 L030B_P1_SPEED L038B_P2_SPEED
R8FCA:
    lda $0732                                   ; 8FCA AD 32 07
    sta $031E                                   ; 8FCD 8D 1E 03
    lda $0733                                   ; 8FD0 AD 33 07
    sta $039E                                   ; 8FD3 8D 9E 03
    lda $0734                                   ; 8FD6 AD 34 07
    sta $0316                                   ; 8FD9 8D 16 03
    lda $0735                                   ; 8FDC AD 35 07
    sta $0396                                   ; 8FDF 8D 96 03
    lda $0736                                   ; 8FE2 AD 36 07
    sta L030B_P1_SPEED                          ; 8FE5 8D 0B 03
    lda $0737                                   ; 8FE8 AD 37 07
    sta L038B_P2_SPEED                          ; 8FEB 8D 8B 03
    rts                                         ; 8FEE 60

; ----------------------------------------------------------------------------
; jump table vector 6
; enter top-level state 4
L8FEF:  lda #$04                                ; 8FEF A9 04
        sta L46_TOP_STATE                       ; 8FF1 85 46
        rts                                     ; 8FF3 60

; ----------------------------------------------------------------------------
; Add value to score, with streak multiplier
; Input: L8B_SPEED+1 is amount to add to score
; Input: $AD is streak length (index for score multiplier)
R8FF4:
    lda L0727_NUM_PLAYERS                       ; 8FF4 AD 27 07
    cmp #$01                                    ; 8FF7 C9 01
    if_eq                                       ; 8FF9 D0 20
        ldx $AD                                 ; 8FFB A6 AD
        lda LA21F,x                             ; 8FFD BD 1F A2
        tax                                     ; 9000 AA
        loop
            lda L8B_SPEED                       ; 9001 A5 8B
            clc                                 ; 9003 18
            adc L072A_SCORE_1                   ; 9004 6D 2A 07
            sta L072A_SCORE_1                   ; 9007 8D 2A 07
            inc L072A_SCORE_1                   ; 900A EE 2A 07
            jsr R901C ; Normalize score         ; 900D 20 1C 90
            dex                                 ; 9010 CA
        while_ne                                ; 9011 D0 EE
        ; set $52 bit 2 (update score)
        lda $52                                 ; 9013 A5 52
        ora #$04                                ; 9015 09 04
        sta $52                                 ; 9017 85 52
        inc $AD                                 ; 9019 E6 AD
    end_if
    rts                                         ; 901B 60

; ----------------------------------------------------------------------------
; Normalize score.
R901C:
    lda L0729_SCORE_0                           ; 901C AD 29 07
    cmp #$0A                                    ; 901F C9 0A
    if_pl                                       ; 9021 30 09
        sec                                     ; 9023 38
        sbc #$0A                                ; 9024 E9 0A
        sta L0729_SCORE_0                       ; 9026 8D 29 07
        inc L072A_SCORE_1                       ; 9029 EE 2A 07
    end_if
    lda L072A_SCORE_1                           ; 902C AD 2A 07
    cmp #$0A                                    ; 902F C9 0A
    if_pl                                       ; 9031 30 09
        sec                                     ; 9033 38
        sbc #$0A                                ; 9034 E9 0A
        sta L072A_SCORE_1                       ; 9036 8D 2A 07
        inc L072B_SCORE_2                       ; 9039 EE 2B 07
    end_if
    lda L072B_SCORE_2                           ; 903C AD 2B 07
    cmp #$0A                                    ; 903F C9 0A
    if_pl                                       ; 9041 30 09
        sec                                     ; 9043 38
        sbc #$0A                                ; 9044 E9 0A
        sta L072B_SCORE_2                       ; 9046 8D 2B 07
        inc L072C_SCORE_3                       ; 9049 EE 2C 07
    end_if
    lda L072C_SCORE_3                           ; 904C AD 2C 07
    cmp #$0A                                    ; 904F C9 0A
    if_eq                                       ; 9051 D0 08
        lda #$00                                ; 9053 A9 00
        sta L072C_SCORE_3                       ; 9055 8D 2C 07
        inc L072D_SCORE_4                       ; 9058 EE 2D 07
    end_if
    lda L072D_SCORE_4                           ; 905B AD 2D 07
    cmp #$0A                                    ; 905E C9 0A
    if_eq                                       ; 9060 D0 08
        lda #$00                                ; 9062 A9 00
        sta L072D_SCORE_4                       ; 9064 8D 2D 07
        inc L072E_SCORE_5                       ; 9067 EE 2E 07
    end_if
    lda L072E_SCORE_5                           ; 906A AD 2E 07
    cmp #$0A                                    ; 906D C9 0A
    if_eq                                       ; 906F D0 03
        dec L072E_SCORE_5                       ; 9071 CE 2E 07
    end_if
    rts                                         ; 9074 60

; ----------------------------------------------------------------------------
; Load P1 state into zero page
; Copy $0300-$032F to $80-$AF
; $F5 -> $5B (controller 1 edge)
; $F7 -> $5C (controller 1 state)
; $0400 -> $57/$58
R9075:
    ; copy $0300-$032F to $80-$AF
    ldx #$00                                    ; 9075 A2 00
    loop
        lda $0300,x                             ; 9077 BD 00 03
        sta $80,x                               ; 907A 95 80
        inx                                     ; 907C E8
        cpx #$30                                ; 907D E0 30
    while_ne                                    ; 907F D0 F6
    lda $F5                                     ; 9081 A5 F5
    sta $5B                                     ; 9083 85 5B
    lda $F7                                     ; 9085 A5 F7
    sta $5C                                     ; 9087 85 5C
    lda #$00                                    ; 9089 A9 00
    sta $57                                     ; 908B 85 57
    lda #$04                                    ; 908D A9 04
    sta $58                                     ; 908F 85 58
    rts                                         ; 9091 60

; ----------------------------------------------------------------------------
; Load P2 state into zero page
; Copy $0380-$038F to $80-$AF
; $F6 -> $5B (controller 2 edge)
; $F8 -> $5C (controller 2 state)
; $0500 -> $57/$58
R9092:
    ldx #$00                                    ; 9092 A2 00
    loop
        lda $0380,x                             ; 9094 BD 80 03
        sta $80,x                               ; 9097 95 80
        inx                                     ; 9099 E8
        cpx #$30                                ; 909A E0 30
    while_ne                                    ; 909C D0 F6
    lda $F6                                     ; 909E A5 F6
    sta $5B                                     ; 90A0 85 5B
    lda $F8                                     ; 90A2 A5 F8
    sta $5C                                     ; 90A4 85 5C
    lda #$00                                    ; 90A6 A9 00
    sta $57                                     ; 90A8 85 57
    lda #$05                                    ; 90AA A9 05
    sta $58                                     ; 90AC 85 58
    rts                                         ; 90AE 60

; ----------------------------------------------------------------------------
; Save P1 state from zero page
; Copy $80-$AF to $0300-$032F
R90AF:
    ldx #$00                                    ; 90AF A2 00
    loop
        lda $80,x                               ; 90B1 B5 80
        sta $0300,x                             ; 90B3 9D 00 03
        inx                                     ; 90B6 E8
        cpx #$30                                ; 90B7 E0 30
    while_ne                                    ; 90B9 D0 F6
    rts                                         ; 90BB 60

; ----------------------------------------------------------------------------
; Save P2 state from zero page
; Copy $80-$AF to $0380-$03AF
R90BC:
    ldx #$00                                    ; 90BC A2 00
    loop
        lda $80,x                               ; 90BE B5 80
        sta $0380,x                             ; 90C0 9D 80 03
        inx                                     ; 90C3 E8
        cpx #$30                                ; 90C4 E0 30
    while_ne                                    ; 90C6 D0 F6
    rts                                         ; 90C8 60

; ----------------------------------------------------------------------------
; Fill pages 4 and 5 with #$FF.
R90C9:
    lda #$FF                                    ; 90C9 A9 FF
    ldx #$04                                    ; 90CB A2 04
    ldy #$05                                    ; 90CD A0 05
    jsr RB894                                   ; 90CF 20 94 B8
    rts                                         ; 90D2 60

; ----------------------------------------------------------------------------
; Return result in A: 0 for ? and FF for ?
R90D3:
.scope
    ldx $A6                                     ; 90D3 A6 A6
    dex                                         ; 90D5 CA
    dex                                         ; 90D6 CA
    lda $A5                                     ; 90D7 A5 A5
    and #$01                                    ; 90D9 29 01
    if_eq                                       ; 90DB D0 13
        lda LA455,x                             ; 90DD BD 55 A4
        clc                                     ; 90E0 18
        adc $85                                 ; 90E1 65 85
        bmi L9131                               ; 90E3 30 4C
        lda LA458,x                             ; 90E5 BD 58 A4
        clc                                     ; 90E8 18
        adc $85                                 ; 90E9 65 85
        bpl L9131                               ; 90EB 10 44
    else                                        ; 90ED 4C F8 90
        lda LA45B,x                             ; 90F0 BD 5B A4
        clc                                     ; 90F3 18
        adc $86                                 ; 90F4 65 86
        bmi L9131                               ; 90F6 30 39
    end_if
    lda #$00                                    ; 90F8 A9 00
    sta $57                                     ; 90FA 85 57
    ldx $86                                     ; 90FC A6 86
    lda LA474,x                                 ; 90FE BD 74 A4
    clc                                         ; 9101 18
    adc $85                                     ; 9102 65 85
    sta $47                                     ; 9104 85 47
    lda $A6                                     ; 9106 A5 A6
    sec                                         ; 9108 38
    sbc #$02                                    ; 9109 E9 02
    asl a                                       ; 910B 0A
    sta $49                                     ; 910C 85 49
    lda $A5                                     ; 910E A5 A5
    and #$01                                    ; 9110 29 01
    clc                                         ; 9112 18
    adc $49                                     ; 9113 65 49
    asl a                                       ; 9115 0A
    asl a                                       ; 9116 0A
    tax                                         ; 9117 AA
    lda #$04                                    ; 9118 A9 04
    sta $48                                     ; 911A 85 48
    loop
        lda LA4C4,x                             ; 911C BD C4 A4
        clc                                     ; 911F 18
        adc $47                                 ; 9120 65 47
        tay                                     ; 9122 A8
        lda ($57),y                             ; 9123 B1 57
        cmp #$FF                                ; 9125 C9 FF
        bne L9131                               ; 9127 D0 08
        inx                                     ; 9129 E8
        dec $48                                 ; 912A C6 48
    while_ne                                    ; 912C D0 EE
    lda #$00                                    ; 912E A9 00
    rts                                         ; 9130 60

L9131:
    lda #$FF                                    ; 9131 A9 FF
    rts                                         ; 9133 60
.endscope

; ----------------------------------------------------------------------------
; Called by NMI handler.
; READS $fb L0741 L4017
; WRITES L46_TOP_STATE $47 $48 $49 L4016
; MODIFIES ($36,X) $00 $01 $36 $37 $69 $70 $f5 $f6 $f7 $f5,X $f7,X
R9134:
.scope
    lda $0741                                   ; 9134 AD 41 07
    if_eq                                       ; 9137 D0 04
        jsr RB7C7                               ; 9139 20 C7 B7
        rts                                     ; 913C 60
    end_if
    lda $0741                                   ; 913D AD 41 07
    cmp #$FF                                    ; 9140 C9 FF
    beq L9190                                   ; 9142 F0 4C
    jsr RB7C7                                   ; 9144 20 C7 B7
    lda $F5                                     ; 9147 A5 F5
    cmp #$10                                    ; 9149 C9 10
    beq L918B                                   ; 914B F0 3E
    lda $69                                     ; 914D A5 69
    if_ne                                       ; 914F F0 05
        dec $69                                 ; 9151 C6 69
        jmp L917D                               ; 9153 4C 7D 91
    end_if
    ldx #$00                                    ; 9156 A2 00
    lda ($36,x)                                 ; 9158 A1 36
    sta $47                                     ; 915A 85 47
    jsr R91C2 ; increment $36/$37               ; 915C 20 C2 91
    lda $70                                     ; 915F A5 70
    eor $47                                     ; 9161 45 47
    and $47                                     ; 9163 25 47
    sta $F5                                     ; 9165 85 F5
    lda $47                                     ; 9167 A5 47
    sta $70                                     ; 9169 85 70
    ldx #$00                                    ; 916B A2 00
    lda ($36,x)                                 ; 916D A1 36
    sta $69                                     ; 916F 85 69
    jsr R91C2 ; increment $36/$37               ; 9171 20 C2 91
    lda $37                                     ; 9174 A5 37
    cmp #$D2                                    ; 9176 C9 D2
    beq L9186                                   ; 9178 F0 0C
    jmp L9181                                   ; 917A 4C 81 91

L917D:
    lda #$00                                    ; 917D A9 00
    sta $F5                                     ; 917F 85 F5
L9181:
    lda $70                                     ; 9181 A5 70
    sta $F7                                     ; 9183 85 F7
    rts                                         ; 9185 60

; enter top-level state 0.
L9186:
    lda #$00                                    ; 9186 A9 00
    sta L46_TOP_STATE                           ; 9188 85 46
    rts                                         ; 918A 60

L918B:
    lda #$D0                                    ; 918B A9 D0
    sta $37                                     ; 918D 85 37
    rts                                         ; 918F 60

L9190:
    jsr RB7C7                                   ; 9190 20 C7 B7
    lda $F7                                     ; 9193 A5 F7
    cmp $70                                     ; 9195 C5 70
    beq L91B8                                   ; 9197 F0 1F
    ldx #$00                                    ; 9199 A2 00
    lda $70                                     ; 919B A5 70
    sta ($36,x)                                 ; 919D 81 36
    jsr R91C2 ; increment $36/$37               ; 919F 20 C2 91
    lda $69                                     ; 91A2 A5 69
    sta ($36,x)                                 ; 91A4 81 36
    jsr R91C2 ; increment $36/$37               ; 91A6 20 C2 91
    lda $37                                     ; 91A9 A5 37
    cmp #$D2                                    ; 91AB C9 D2
    beq L91BB                                   ; 91AD F0 0C
    lda $F7                                     ; 91AF A5 F7
    sta $70                                     ; 91B1 85 70
    lda #$00                                    ; 91B3 A9 00
    sta $69                                     ; 91B5 85 69
    rts                                         ; 91B7 60
L91B8:
    inc $69                                     ; 91B8 E6 69
    rts                                         ; 91BA 60
L91BB:
    lda #$00                                    ; 91BB A9 00
    sta $36                                     ; 91BD 85 36
    ; enter top-level state 0.
    sta L46_TOP_STATE                           ; 91BF 85 46
    rts                                         ; 91C1 60

; ----------------------------------------------------------------------------
; Called by NMI handler.
; Increment 16-bit value in $36/$37.
R91C2:
    lda $36                                     ; 91C2 A5 36
    clc                                         ; 91C4 18
    adc #$01                                    ; 91C5 69 01
    sta $36                                     ; 91C7 85 36
    lda #$00                                    ; 91C9 A9 00
    adc $37                                     ; 91CB 65 37
    sta $37                                     ; 91CD 85 37
    rts                                         ; 91CF 60
.endscope

; ----------------------------------------------------------------------------
; Compute checksum of all bytes from $b900 to $bdff.
; Set $0740 to #$ff if the sum is not #$C1, else #$00.
R91D0:
.scope
    lda #$B9                                    ; 91D0 A9 B9
    sta $48                                     ; 91D2 85 48
    ldy #$00                                    ; 91D4 A0 00
    sty $47                                     ; 91D6 84 47
    sty $49                                     ; 91D8 84 49
    sty $0740                                   ; 91DA 8C 40 07
    loop
        loop
            lda ($47),y                         ; 91DD B1 47
            clc                                 ; 91DF 18
            adc $49                             ; 91E0 65 49
            sta $49                             ; 91E2 85 49
            iny                                 ; 91E4 C8
        while_ne                                ; 91E5 D0 F6
        inc $48                                 ; 91E7 E6 48
        lda $48                                 ; 91E9 A5 48
        cmp #$BE                                ; 91EB C9 BE
    while_ne                                    ; 91ED D0 EE
    lda $49                                     ; 91EF A5 49
    cmp #$C1                                    ; 91F1 C9 C1
    if_ne                                       ; 91F3 F0 05
        lda #$FF                                ; 91F5 A9 FF
        sta $0740                               ; 91F7 8D 40 07
    end_if
    rts                                         ; 91FA 60
.endscope

; ----------------------------------------------------------------------------
; R8C73 routine 5.
L91FB:
.scope
        lda     $94                             ; 91FB A5 94
        if_ne                                   ; 91FD F0 09
            lda $80                             ; 91FF A5 80
            cmp #$FF                            ; 9201 C9 FF
            if_ne                               ; 9203 F0 03
                jmp L92DA                       ; 9205 4C DA 92
            end_if
        end_if

        lda     #$00                            ; 9208 A9 00
        sta     $59                             ; 920A 85 59
L920C:  lda     $59                             ; 920C A5 59
        sta     $5A                             ; 920E 85 5A
        lda     #$00                            ; 9210 A9 00
        sta     $47                             ; 9212 85 47
        ldy     $59                             ; 9214 A4 59
        lda     ($57),y                         ; 9216 B1 57
        sta     $48                             ; 9218 85 48
        cmp     #$F0                            ; 921A C9 F0
        if_cs                                   ; 921C 90 03
            jmp L92AD                           ; 921E 4C AD 92
        end_if

        lda     $48                             ; 9221 A5 48
        and     #$0F                            ; 9223 29 0F
        sta     $48                             ; 9225 85 48
L9227:  inc     $5A                             ; 9227 E6 5A
        lda     $5A                             ; 9229 A5 5A
        and     #$07                            ; 922B 29 07
        if_ne                                   ; 922D F0 0F
            ldy $5A                             ; 922F A4 5A
            lda ($57),y                         ; 9231 B1 57
            and #$0F                            ; 9233 29 0F
            cmp $48                             ; 9235 C5 48
            if_eq                               ; 9237 D0 05
                inc $47                         ; 9239 E6 47
                jmp L9227                       ; 923B 4C 27 92
            end_if
        end_if
        lda     $47                             ; 923E A5 47
        cmp     #$03                            ; 9240 C9 03
        if_pl                                   ; 9242 30 62
            inc $8F                             ; 9244 E6 8F
            sta $8E                             ; 9246 85 8E
            jsr R944B                           ; 9248 20 4B 94
            lda $A1                             ; 924B A5 A1
            clc                                 ; 924D 18
            adc $47                             ; 924E 65 47
            sta $A1                             ; 9250 85 A1
            inc $A1                             ; 9252 E6 A1
            lda $59                             ; 9254 A5 59
            and #$78                            ; 9256 29 78
            lsr a                               ; 9258 4A
            lsr a                               ; 9259 4A
            lsr a                               ; 925A 4A
            sta $95                             ; 925B 85 95
            lda $5A                             ; 925D A5 5A
            sta $49                             ; 925F 85 49
            lda $59                             ; 9261 A5 59
            sta $5A                             ; 9263 85 5A
            loop
                ldy $5A                         ; 9265 A4 5A
                lda ($57),y                     ; 9267 B1 57
                and #$F0                        ; 9269 29 F0
                cmp #$80                        ; 926B C9 80
                if_eq                           ; 926D D0 00
                end_if
                lda #$02                        ; 926F A9 02
                sta $06F1                       ; 9271 8D F1 06
                lda ($57),y                     ; 9274 B1 57
                and #$F0                        ; 9276 29 F0
                cmp #$D0                        ; 9278 C9 D0
                if_eq                           ; 927A D0 14
                    lda #$04                    ; 927C A9 04
                    sta $06F1                   ; 927E 8D F1 06
                    jsr R941A                   ; 9281 20 1A 94
                    lda #$10                    ; 9284 A9 10
                    ora $52                     ; 9286 05 52
                    sta $52                     ; 9288 85 52
                    lda LA4_VIRUS_BCD           ; 928A A5 A4
                    if_eq                       ; 928C D0 02
                        inc $9E                 ; 928E E6 9E
                    end_if
                end_if
                lda ($57),y                     ; 9290 B1 57
                and #$0F                        ; 9292 29 0F
                ora #$B0                        ; 9294 09 B0
                sta ($57),y                     ; 9296 91 57
                inc $5A                         ; 9298 E6 5A
                ldy $5A                         ; 929A A4 5A
                cpy $49                         ; 929C C4 49
            while_ne                            ; 929E D0 C5
            inc $94                             ; 92A0 E6 94
            lda $49                             ; 92A2 A5 49
            sta $5A                             ; 92A4 85 5A
        end_if
        lda     $5A                             ; 92A6 A5 5A
        sta     $59                             ; 92A8 85 59
        jmp     L92AF                           ; 92AA 4C AF 92

L92AD:  inc     $59                             ; 92AD E6 59
L92AF:  lda     $59                             ; 92AF A5 59
        and     #$07                            ; 92B1 29 07
        if_ne                                   ; 92B3 F0 07
            cmp #$05                            ; 92B5 C9 05
            if_mi                               ; 92B7 10 03
                jmp L920C                       ; 92B9 4C 0C 92
            end_if
        end_if

        lda     $59                             ; 92BC A5 59
        cmp     #$80                            ; 92BE C9 80
        if_ne                                   ; 92C0 F0 16
            and #$07                            ; 92C2 29 07
            if_ne                               ; 92C4 F0 09
                lda $59                         ; 92C6 A5 59
                and #$78                        ; 92C8 29 78
                clc                             ; 92CA 18
                adc #$08                        ; 92CB 69 08
                sta $59                         ; 92CD 85 59
            end_if
            lda $59                             ; 92CF A5 59
            cmp #$80                            ; 92D1 C9 80
            if_ne                               ; 92D3 F0 03
                jmp L920C                       ; 92D5 4C 0C 92
            end_if
        end_if
        inc     $87                             ; 92D8 E6 87
L92DA:  rts                                     ; 92DA 60
.endscope ;L91FB

; ----------------------------------------------------------------------------
; R8C73 routine 7.
L92DB:
.scope
        ldy     #$7F                            ; 92DB A0 7F
        sty     $47                             ; 92DD 84 47
L92DF:  ldy     $47                             ; 92DF A4 47
        lda     ($57),y                         ; 92E1 B1 57
        and     #$F0                            ; 92E3 29 F0
        cmp     #$B0                            ; 92E5 C9 B0
        if_eq                                   ; 92E7 D0 09
            lda ($57),y                         ; 92E9 B1 57
            ora #$F0                            ; 92EB 09 F0
            sta ($57),y                         ; 92ED 91 57
            jmp L93F9                           ; 92EF 4C F9 93
        end_if
        cmp #$40                                ; 92F2 C9 40
        if_eq                                   ; 92F4 D0 1F
            lda $47                             ; 92F6 A5 47
            clc                                 ; 92F8 18
            adc #$08                            ; 92F9 69 08
            tay                                 ; 92FB A8
            lda ($57),y                         ; 92FC B1 57
            and #$F0                            ; 92FE 29 F0
            cmp #$90                            ; 9300 C9 90
            if_ne                                   ; 9302 F0 0E
                cmp #$50                        ; 9304 C9 50
                if_ne                           ; 9306 F0 0A
                    ldy $47                     ; 9308 A4 47
                    lda ($57),y                 ; 930A B1 57
                    and #$0F                    ; 930C 29 0F
                    ora #$80                    ; 930E 09 80
                    sta ($57),y                 ; 9310 91 57
                end_if
            end_if
            jmp L93F9                           ; 9312 4C F9 93
        end_if
        cmp     #$50                            ; 9315 C9 50
        if_eq                                   ; 9317 D0 1F
            lda $47                             ; 9319 A5 47
            sec                                 ; 931B 38
            sbc #$08                            ; 931C E9 08
            tay                                 ; 931E A8
            lda ($57),y                         ; 931F B1 57
            and #$F0                            ; 9321 29 F0
            cmp #$90                            ; 9323 C9 90
            if_ne                               ; 9325 F0 0E
                cmp #$40                        ; 9327 C9 40
                if_ne                           ; 9329 F0 0A
                    ldy $47                     ; 932B A4 47
                    lda ($57),y                 ; 932D B1 57
                    and #$0F                    ; 932F 29 0F
                    ora #$80                    ; 9331 09 80
                    sta ($57),y                 ; 9333 91 57
                end_if
            end_if
            jmp L93F9                           ; 9335 4C F9 93
        end_if
        cmp     #$60                            ; 9338 C9 60
        if_eq                                   ; 933A D0 1F
            lda $47                             ; 933C A5 47
            clc                                 ; 933E 18
            adc #$01                            ; 933F 69 01
            tay                                 ; 9341 A8
            lda ($57),y                         ; 9342 B1 57
            and #$F0                            ; 9344 29 F0
            cmp #$A0                            ; 9346 C9 A0
            if_ne                               ; 9348 F0 0E
                cmp #$70                        ; 934A C9 70
                if_ne                           ; 934C F0 0A
                    ldy $47                     ; 934E A4 47
                    lda ($57),y                 ; 9350 B1 57
                    and #$0F                    ; 9352 29 0F
                    ora #$80                    ; 9354 09 80
                    sta ($57),y                 ; 9356 91 57
                end_if
            end_if
            jmp L93F9                           ; 9358 4C F9 93
        end_if
        cmp     #$70                            ; 935B C9 70
        if_eq                                   ; 935D D0 1F
            lda $47                             ; 935F A5 47
            sec                                 ; 9361 38
            sbc #$01                            ; 9362 E9 01
            tay                                 ; 9364 A8
            lda ($57),y                         ; 9365 B1 57
            and #$F0                            ; 9367 29 F0
            cmp #$A0                            ; 9369 C9 A0
            if_ne                               ; 936B F0 0E
                cmp #$60                        ; 936D C9 60
                if_ne                           ; 936F F0 0A
                    ldy $47                     ; 9371 A4 47
                    lda ($57),y                 ; 9373 B1 57
                    and #$0F                    ; 9375 29 0F
                    ora #$80                    ; 9377 09 80
                    sta ($57),y                 ; 9379 91 57
                end_if
            end_if
            jmp L93F9                           ; 937B 4C F9 93
        end_if
        cmp     #$90                            ; 937E C9 90
        if_eq                                   ; 9380 D0 3B
            lda $47                             ; 9382 A5 47
            sec                                 ; 9384 38
            sbc #$08                            ; 9385 E9 08
            tay                                 ; 9387 A8
            lda ($57),y                         ; 9388 B1 57
            and #$F0                            ; 938A 29 F0
            cmp #$90                            ; 938C C9 90
            if_ne                               ; 938E F0 0E
                cmp #$40                        ; 9390 C9 40
                if_ne                           ; 9392 F0 0A
                    ldy $47                     ; 9394 A4 47
                    lda ($57),y                 ; 9396 B1 57
                    and #$0F                    ; 9398 29 0F
                    ora #$40                    ; 939A 09 40
                    sta ($57),y                 ; 939C 91 57
                end_if
            end_if
            lda $47                             ; 939E A5 47
            clc                                 ; 93A0 18
            adc #$08                            ; 93A1 69 08
            tay                                 ; 93A3 A8
            lda ($57),y                         ; 93A4 B1 57
            and #$F0                            ; 93A6 29 F0
            cmp #$90                            ; 93A8 C9 90
            if_ne                               ; 93AA F0 0E
                cmp #$50                        ; 93AC C9 50
                if_ne                           ; 93AE F0 0A
                    ldy $47                     ; 93B0 A4 47
                    lda ($57),y                 ; 93B2 B1 57
                    and #$0F                    ; 93B4 29 0F
                    ora #$50                    ; 93B6 09 50
                    sta ($57),y                 ; 93B8 91 57
                end_if
            end_if
            jmp L93F9                           ; 93BA 4C F9 93
        end_if
        cmp     #$A0                            ; 93BD C9 A0
        if_eq                                   ; 93BF D0 38
            lda $47                             ; 93C1 A5 47
            sec                                 ; 93C3 38
            sbc #$01                            ; 93C4 E9 01
            tay                                 ; 93C6 A8
            lda ($57),y                         ; 93C7 B1 57
            and #$F0                            ; 93C9 29 F0
            cmp #$A0                            ; 93CB C9 A0
            if_ne                               ; 93CD F0 0E
                cmp #$60                        ; 93CF C9 60
                if_ne                           ; 93D1 F0 0A
                    ldy $47                     ; 93D3 A4 47
                    lda ($57),y                 ; 93D5 B1 57
                    and #$0F                    ; 93D7 29 0F
                    ora #$60                    ; 93D9 09 60
                    sta ($57),y                 ; 93DB 91 57
                end_if
            end_if
            lda $47                             ; 93DD A5 47
            clc                                 ; 93DF 18
            adc #$01                            ; 93E0 69 01
            tay                                 ; 93E2 A8
            lda ($57),y                         ; 93E3 B1 57
            and #$F0                            ; 93E5 29 F0
            cmp #$A0                            ; 93E7 C9 A0
            if_ne                               ; 93E9 F0 0E
                cmp #$70                        ; 93EB C9 70
                if_ne                           ; 93ED F0 0A
                    ldy $47                     ; 93EF A4 47
                    lda ($57),y                 ; 93F1 B1 57
                    and #$0F                    ; 93F3 29 0F
                    ora #$70                    ; 93F5 09 70
                    sta ($57),y                 ; 93F7 91 57
                end_if
            end_if
        end_if
L93F9:  dec     $47                             ; 93F9 C6 47
        lda     $47                             ; 93FB A5 47
        cmp     #$FF                            ; 93FD C9 FF
        if_ne                                   ; 93FF F0 03
            jmp L92DF                           ; 9401 4C DF 92
        end_if
        inc     $87                             ; 9404 E6 87
        lda     #$0F                            ; 9406 A9 0F
        sta     $80                             ; 9408 85 80
        lda     $94                             ; 940A A5 94
        if_ne                                   ; 940C F0 04
            lda #$01                            ; 940E A9 01
            sta $87                             ; 9410 85 87
        end_if
        rts                                     ; 9412 60
.endscope ;L92DB

; ----------------------------------------------------------------------------
; R8C73 routine 4.
L9413:
        lda     #$00                            ; 9413 A9 00
        sta     $94                             ; 9415 85 94
        inc     $87                             ; 9417 E6 87
        rts                                     ; 9419 60

; ----------------------------------------------------------------------------
; Input: ($57),Y
; ($57),Y should point at byte with virus color in low nybble
R941A:
    lda ($57),y                                 ; 941A B1 57
    and #$0F                                    ; 941C 29 0F
    tax                                         ; 941E AA
    lda #$01                                    ; 941F A9 01
    sta L75_V1_STATE,x                          ; 9421 95 75
    lda #$00                                    ; 9423 A9 00
    sta L78_V1_TIMER,x                          ; 9425 95 78
    lda L72_V1_COUNT,x                          ; 9427 B5 72
    sec                                         ; 9429 38
    sbc #$01                                    ; 942A E9 01
    sta L72_V1_COUNT,x                          ; 942C 95 72
    jsr R8FF4 ; Increment score                 ; 942E 20 F4 8F
    ; decrement virus count
    lda LA4_VIRUS_BCD                           ; 9431 A5 A4
    if_ne                                       ; 9433 F0 11
        dec LA4_VIRUS_BCD                       ; 9435 C6 A4
        lda LA4_VIRUS_BCD                       ; 9437 A5 A4
        and #$0F                                ; 9439 29 0F
        cmp #$0F                                ; 943B C9 0F
        if_eq                                   ; 943D D0 07
            lda LA4_VIRUS_BCD                   ; 943F A5 A4
            sec                                 ; 9441 38
            sbc #$06                            ; 9442 E9 06
            sta LA4_VIRUS_BCD                   ; 9444 85 A4
        end_if
    end_if
    lda #$0F                                    ; 9446 A9 0F
    sta $80                                     ; 9448 85 80
    rts                                         ; 944A 60

; ----------------------------------------------------------------------------
R944B:
    lda $8F                                     ; 944B A5 8F
    if_ne                                       ; 944D F0 0A
        cmp #$05                                ; 944F C9 05
        if_cc                                   ; 9451 B0 06
            tax                                 ; 9453 AA
            dex                                 ; 9454 CA
            lda $48                             ; 9455 A5 48
            sta $A9,x                           ; 9457 95 A9
        end_if
    end_if
    rts                                         ; 9459 60

; ----------------------------------------------------------------------------
; unreachable?
        lda     $8F                             ; 945A A5 8F
        cmp     #$02                            ; 945C C9 02
        if_eq                                   ; 945E D0 08
            lda $58                             ; 9460 A5 58
            sec                                 ; 9462 38
            sbc #$03                            ; 9463 E9 03
            sta $06F4                           ; 9465 8D F4 06
        end_if
        rts                                     ; 9468 60

; ----------------------------------------------------------------------------
; R8C73 routine 6.
L9469:
.scope
    lda #$00                                    ; 9469 A9 00
    sta $59                                     ; 946B 85 59
L946D:
    lda $59                                     ; 946D A5 59
    sta $5A                                     ; 946F 85 5A
    lda #$00                                    ; 9471 A9 00
    sta $47                                     ; 9473 85 47
    ldy $59                                     ; 9475 A4 59
    lda ($57),y                                 ; 9477 B1 57
    sta $48                                     ; 9479 85 48
    cmp #$F0                                    ; 947B C9 F0
    if_cs                                       ; 947D 90 03
        jmp L9510                               ; 947F 4C 10 95
    end_if
    lda $48                                     ; 9482 A5 48
    and #$0F                                    ; 9484 29 0F
    sta $48                                     ; 9486 85 48
    loop
        lda $5A                                 ; 9488 A5 5A
        clc                                     ; 948A 18
        adc #$08                                ; 948B 69 08
        sta $5A                                 ; 948D 85 5A
        lda $5A                                 ; 948F A5 5A
        and #$F8                                ; 9491 29 F8
        beq break                               ; 9493 F0 0F
        ldy $5A                                 ; 9495 A4 5A
        lda ($57),y                             ; 9497 B1 57
        and #$0F                                ; 9499 29 0F
        cmp $48                                 ; 949B C5 48
        bne break                               ; 949D D0 05
        inc $47                                 ; 949F E6 47
    forever

    lda $47                                     ; 94A4 A5 47
    cmp #$03                                    ; 94A6 C9 03
    if_pl                                       ; 94A8 30 5F
        inc $8F                                 ; 94AA E6 8F
        sta $8E                                 ; 94AC 85 8E
        jsr R944B                               ; 94AE 20 4B 94
        lda $A1                                 ; 94B1 A5 A1
        clc                                     ; 94B3 18
        adc $47                                 ; 94B4 65 47
        sta $A1                                 ; 94B6 85 A1
        inc $A1                                 ; 94B8 E6 A1
        lda $59                                 ; 94BA A5 59
        and #$78                                ; 94BC 29 78
        lsr a                                   ; 94BE 4A
        lsr a                                   ; 94BF 4A
        lsr a                                   ; 94C0 4A
        sta $95                                 ; 94C1 85 95
        lda $5A                                 ; 94C3 A5 5A
        sta $49                                 ; 94C5 85 49
        lda $59                                 ; 94C7 A5 59
        sta $5A                                 ; 94C9 85 5A
        loop
            lda #$02                            ; 94CB A9 02
            sta $06F1                           ; 94CD 8D F1 06
            ldy $5A                             ; 94D0 A4 5A
            lda ($57),y                         ; 94D2 B1 57
            and #$F0                            ; 94D4 29 F0
            cmp #$D0                            ; 94D6 C9 D0
            if_eq                               ; 94D8 D0 14
                lda #$04                        ; 94DA A9 04
                sta $06F1                       ; 94DC 8D F1 06
                jsr R941A                       ; 94DF 20 1A 94
                lda #$10                        ; 94E2 A9 10
                ora $52                         ; 94E4 05 52
                sta $52                         ; 94E6 85 52
                lda LA4_VIRUS_BCD               ; 94E8 A5 A4
                if_eq                           ; 94EA D0 02
                    inc $9E                     ; 94EC E6 9E
                end_if
            end_if
            lda ($57),y                         ; 94EE B1 57
            and #$0F                            ; 94F0 29 0F
            ora #$B0                            ; 94F2 09 B0
            sta ($57),y                         ; 94F4 91 57
            lda $5A                             ; 94F6 A5 5A
            clc                                 ; 94F8 18
            adc #$08                            ; 94F9 69 08
            sta $5A                             ; 94FB 85 5A
            ldy $5A                             ; 94FD A4 5A
            cpy $49                             ; 94FF C4 49
        while_ne                                ; 9501 D0 C8
        inc $94                                 ; 9503 E6 94
        lda $49                                 ; 9505 A5 49
        sta $5A                                 ; 9507 85 5A
    end_if
    lda $5A                                     ; 9509 A5 5A
    sta $59                                     ; 950B 85 59
    jmp L9517                                   ; 950D 4C 17 95
L9510:
    lda $59                                     ; 9510 A5 59
    clc                                         ; 9512 18
    adc #$08                                    ; 9513 69 08
    sta $59                                     ; 9515 85 59
L9517:
    lda $59                                     ; 9517 A5 59
    cmp #$68                                    ; 9519 C9 68
    if_cc                                       ; 951B B0 03
        jmp L946D                               ; 951D 4C 6D 94
    end_if
    inc $59                                     ; 9520 E6 59
    lda $59                                     ; 9522 A5 59
    and #$07                                    ; 9524 29 07
    sta $59                                     ; 9526 85 59
    lda $59                                     ; 9528 A5 59
    if_ne                                       ; 952A F0 03
        jmp L946D                               ; 952C 4C 6D 94
    end_if
    inc $87                                     ; 952F E6 87
    rts                                         ; 9531 60
.endscope ;L9469

; ----------------------------------------------------------------------------
; jump table vector 5
L9532:
.scope
    lda #$00                                    ; 9532 A9 00
    sta $54                                     ; 9534 85 54
    sta $0732                                   ; 9536 8D 32 07
    lda #$04                                    ; 9539 A9 04
    sta $58                                     ; 953B 85 58
    lda $0309                                   ; 953D AD 09 03
    if_eq                                       ; 9540 D0 06
        inc $031E                               ; 9542 EE 1E 03
    else                                        ; 9545 4C 56 95
        lda L0727_NUM_PLAYERS                   ; 9548 AD 27 07
        cmp #$01                                ; 954B C9 01
        beq L9585                               ; 954D F0 36
        jsr R96C0                               ; 954F 20 C0 96
        lda #$01                                ; 9552 A9 01
        sta $61                                 ; 9554 85 61
    end_if
    lda $80                                     ; 9556 A5 80
    sta $0300                                   ; 9558 8D 00 03
    lda #$05                                    ; 955B A9 05
    sta $58                                     ; 955D 85 58
    lda $0389                                   ; 955F AD 89 03
    if_eq                                       ; 9562 D0 06
        inc $039E                               ; 9564 EE 9E 03
    else                                        ; 9567 4C 80 95
        lda $0309                               ; 956A AD 09 03
        if_ne                                   ; 956D F0 0A
            jsr R9682                           ; 956F 20 82 96
            lda #$00                            ; 9572 A9 00
            sta $61                             ; 9574 85 61
        else                                    ; 9576 4C 80 95
            jsr R96C0                           ; 9579 20 C0 96
            lda #$02                            ; 957C A9 02
            sta $61                             ; 957E 85 61
        end_if
    end_if
    lda $80                                     ; 9580 A5 80
    sta $0380                                   ; 9582 8D 80 03
L9585:
    ; enter top-level state 7.
    lda #$07                                    ; 9585 A9 07
    sta L46_TOP_STATE                           ; 9587 85 46
    rts                                         ; 9589 60
.endscope

; ----------------------------------------------------------------------------
; jump table vector 7
L958A:
.scope
    lda #$40                                    ; 958A A9 40
    jsr R9701                                   ; 958C 20 01 97
    lda #$80                                    ; 958F A9 80
    ora $52                                     ; 9591 05 52
    sta $52                                     ; 9593 85 52
    lda L0727_NUM_PLAYERS                       ; 9595 AD 27 07
    cmp #$02                                    ; 9598 C9 02
    if_eq                                       ; 959A D0 2D
        lda $031E                               ; 959C AD 1E 03
        cmp $0725                               ; 959F CD 25 07
        if_ne                                   ; 95A2 F0 14
            lda $039E                           ; 95A4 AD 9E 03
            cmp $0725                           ; 95A7 CD 25 07
            if_ne                               ; 95AA F0 0C
                ldx $0731                       ; 95AC AE 31 07
                lda LA261,x                     ; 95AF BD 61 A2
                sta $06F5                       ; 95B2 8D F5 06
                jmp L9646                       ; 95B5 4C 46 96
            end_if
        end_if
        lda #$05                                ; 95B8 A9 05
        sta $06F5                               ; 95BA 8D F5 06
        lda L0727_NUM_PLAYERS                   ; 95BD AD 27 07
        cmp #$02                                ; 95C0 C9 02
        if_eq                                   ; 95C2 D0 05
            lda #$0B                            ; 95C4 A9 0B
            sta $06F5                           ; 95C6 8D F5 06
        end_if
    end_if
    lda #$80                                    ; 95C9 A9 80
    jsr R9701                                   ; 95CB 20 01 97
    lda #$FF                                    ; 95CE A9 FF
    ldx #$04                                    ; 95D0 A2 04
    ldy #$05                                    ; 95D2 A0 05
    jsr RB894 ; fill pages 4-5 with FF          ; 95D4 20 94 B8
    lda #$04                                    ; 95D7 A9 04
    sta $58                                     ; 95D9 85 58
    jsr R96D4                                   ; 95DB 20 D4 96
    lda #$0F                                    ; 95DE A9 0F
    sta $0300                                   ; 95E0 8D 00 03
    lda #$05                                    ; 95E3 A9 05
    sta $58                                     ; 95E5 85 58
    jsr R96D4                                   ; 95E7 20 D4 96
    lda #$0F                                    ; 95EA A9 0F
    sta $0380                                   ; 95EC 8D 80 03
    lda #$0F                                    ; 95EF A9 0F
    sta $80                                     ; 95F1 85 80
    lda #$00                                    ; 95F3 A9 00
    sta $61                                     ; 95F5 85 61
    lda #$01                                    ; 95F7 A9 01
    sta $55                                     ; 95F9 85 55
    lda $031E                                   ; 95FB AD 1E 03
    cmp $0725                                   ; 95FE CD 25 07
    if_ne                                       ; 9601 F0 04
        lda #$02                                ; 9603 A9 02
        sta $55                                 ; 9605 85 55
    end_if
    loop
        lda $43                                 ; 9607 A5 43
        and #$08                                ; 9609 29 08
        if_ne                                   ; 960B F0 13
            lda #$6D                            ; 960D A9 6D
            sta L44_SPRITE_X                    ; 960F 85 44
            ldx L0727_NUM_PLAYERS               ; 9611 AE 27 07
            lda LA105,x                         ; 9614 BD 05 A1
            sta L45_SPRITE_Y                    ; 9617 85 45
            lda #$10                            ; 9619 A9 10
            sta L53_SPRITE_NUM                  ; 961B 85 53
            jsr R88F6_SPRITE                    ; 961D 20 F6 88
        end_if
        jsr RB654                               ; 9620 20 54 B6
        lda $F5                                 ; 9623 A5 F5
        and #$10                                ; 9625 29 10
    while_eq                                    ; 9627 F0 DE
    lda #$FE                                    ; 9629 A9 FE
    ldx #$04                                    ; 962B A2 04
    ldy #$05                                    ; 962D A0 05
    jsr RB894 ; fill pages 4-5 with FF          ; 962F 20 94 B8
    ; enter top-level state 1.
    lda #$01                                    ; 9632 A9 01
    sta L46_TOP_STATE                           ; 9634 85 46
    lda #$00                                    ; 9636 A9 00
    sta $89                                     ; 9638 85 89
    jsr R9721                                   ; 963A 20 21 97
    lda #$00                                    ; 963D A9 00
    sta $F5                                     ; 963F 85 F5
    lda #$FF                                    ; 9641 A9 FF
    sta $54                                     ; 9643 85 54
    rts                                         ; 9645 60

L9646:
    jsr R96ED                                   ; 9646 20 ED 96
    loop
        lda $43                                 ; 9649 A5 43
        and #$08                                ; 964B 29 08
        if_ne                                   ; 964D F0 13
            lda #$6D                            ; 964F A9 6D
            sta L44_SPRITE_X                    ; 9651 85 44
            ldx L0727_NUM_PLAYERS               ; 9653 AE 27 07
            lda LA105,x                         ; 9656 BD 05 A1
            sta L45_SPRITE_Y                    ; 9659 85 45
            lda #$10                            ; 965B A9 10
            sta L53_SPRITE_NUM                  ; 965D 85 53
            jsr R88F6_SPRITE                    ; 965F 20 F6 88
        end_if
        jsr RB654                               ; 9662 20 54 B6
        lda $F5                                 ; 9665 A5 F5
        cmp #$10                                ; 9667 C9 10
    while_ne                                    ; 9669 D0 DE
    jsr R90C9                                   ; 966B 20 C9 90
    jsr R96ED                                   ; 966E 20 ED 96
    ; enter top-level state 3.
    lda #$03                                    ; 9671 A9 03
    sta L46_TOP_STATE                           ; 9673 85 46
    lda #$00                                    ; 9675 A9 00
    sta $89                                     ; 9677 85 89
    lda #$00                                    ; 9679 A9 00
    sta $F5                                     ; 967B 85 F5
    lda #$FF                                    ; 967D A9 FF
    sta $54                                     ; 967F 85 54
    rts                                         ; 9681 60
.endscope

; ----------------------------------------------------------------------------
; Copy null-terminated string from LA80F to offsets $0428 and $0528.
; Also set $80 to #$0F.
R9682:
    lda #$04                                    ; 9682 A9 04
    sta $58                                     ; 9684 85 58
    jsr R9691                                   ; 9686 20 91 96
    lda #$05                                    ; 9689 A9 05
    sta $58                                     ; 968B 85 58
    jsr R9691                                   ; 968D 20 91 96
    rts                                         ; 9690 60

; ----------------------------------------------------------------------------
; In page pointed to by $58 (#$04 or #$05),
; Copy null-terminated 36-byte string from LA80F to offsets $28-$4B
; Also set $80 to #$0F.
R9691:
    lda #$00                                    ; 9691 A9 00
    sta $57                                     ; 9693 85 57
    ldy #$28                                    ; 9695 A0 28
    loop
        tya                                     ; 9697 98
        sec                                     ; 9698 38
        sbc #$28                                ; 9699 E9 28
        tax                                     ; 969B AA
        lda LA80F,x                             ; 969C BD 0F A8
        beq break                               ; 969F F0 06
        sta ($57),y                             ; 96A1 91 57
        iny                                     ; 96A3 C8
    forever                                     ; 96A4 4C 97 96
    lda #$0F                                    ; 96A7 A9 0F
    sta $80                                     ; 96A9 85 80
    rts                                         ; 96AB 60

; ----------------------------------------------------------------------------
; unreachable?
.scope
        lda     #$00                            ; 96AC A9 00
        sta     $57                             ; 96AE 85 57
        ldy     #$7F                            ; 96B0 A0 7F
        loop
            lda #$FF                            ; 96B2 A9 FF
            sta ($57),y                         ; 96B4 91 57
            dey                                 ; 96B6 88
            cpy #$FF                            ; 96B7 C0 FF
        while_ne                                ; 96B9 D0 F7
        lda     #$0F                            ; 96BB A9 0F
        sta     $80                             ; 96BD 85 80
        rts                                     ; 96BF 60
.endscope

; ----------------------------------------------------------------------------
; In page pointed to by $58 (#$04 or #$05)
; Fill offsets #$40 to #$7f with value #$ff.
; Also set $80 to #$0F.
R96C0:
    lda #$00                                    ; 96C0 A9 00
    sta $57                                     ; 96C2 85 57
    ldy #$40                                    ; 96C4 A0 40
    loop
        lda #$FF                                ; 96C6 A9 FF
        sta ($57),y                             ; 96C8 91 57
        iny                                     ; 96CA C8
        cpy #$80                                ; 96CB C0 80
    while_ne                                    ; 96CD D0 F7
    lda #$0F                                    ; 96CF A9 0F
    sta $80                                     ; 96D1 85 80
    rts                                         ; 96D3 60

; ----------------------------------------------------------------------------
; In page pointed to by $58 (#$04 or #$05)
; Copy null-terminated 50-byte string from LA838 to offsets $10-$41.
; Also set $80 to #$0F.
R96D4:
    lda #$00                                    ; 96D4 A9 00
    sta $57                                     ; 96D6 85 57
    ldx #$00                                    ; 96D8 A2 00
    ldy #$10                                    ; 96DA A0 10
    loop
        lda LA838,x                             ; 96DC BD 38 A8
        beq break                               ; 96DF F0 07
        sta ($57),y                             ; 96E1 91 57
        inx                                     ; 96E3 E8
        iny                                     ; 96E4 C8
    forever                                     ; 96E5 4C DC 96
    lda #$0F                                    ; 96E8 A9 0F
    sta $80                                     ; 96EA 85 80
    rts                                         ; 96EC 60

; ----------------------------------------------------------------------------
R96ED:
    lda #$0F                                    ; 96ED A9 0F
    sta $0300                                   ; 96EF 8D 00 03
    sta $0380                                   ; 96F2 8D 80 03
    loop
       jsr RB654                                ; 96F5 20 54 B6
       lda $0300                                ; 96F8 AD 00 03
       cmp #$FF                                 ; 96FB C9 FF
    while_ne                                    ; 96FD D0 F6
    rts                                         ; 96FF 60

; ----------------------------------------------------------------------------
; R9BB9 routine 4.
L9700:  rts                                     ; 9700 60

; ----------------------------------------------------------------------------
R9701:
    sta $51                                     ; 9701 85 51
    lda #$01                                    ; 9703 A9 01
    sta $5D                                     ; 9705 85 5D
    loop
        jsr RB654                               ; 9707 20 54 B6
        dec $51                                 ; 970A C6 51
        lda $51                                 ; 970C A5 51
    while_ne                                    ; 970E D0 F7
    rts                                         ; 9710 60

; ----------------------------------------------------------------------------
; unused?
        sta     $51                             ; 9711 85 51
        lda     #$00                            ; 9713 A9 00
        sta     $5D                             ; 9715 85 5D
        loop
            jsr RB654                           ; 9717 20 54 B6
            dec $51                             ; 971A C6 51
            lda $51                             ; 971C A5 51
        while_ne                                ; 971E D0 F7
        rts                                     ; 9720 60

; ----------------------------------------------------------------------------
R9721:
.scope
        lda L0705_TOP_SCORE_5                   ; 9721 AD 05 07
        cmp L072E_SCORE_5                       ; 9724 CD 2E 07
        beq L972D                               ; 9727 F0 04
        bcs L978D ;exit                         ; 9729 B0 62
        bcc L9769 ;always taken                 ; 972B 90 3C
L972D:  iny                                     ; 972D C8
        lda L0704_TOP_SCORE_4                   ; 972E AD 04 07
        cmp L072D_SCORE_4                       ; 9731 CD 2D 07
        beq L973A                               ; 9734 F0 04
        bcs L978D                               ; 9736 B0 55
        bcc L9769 ;always taken                 ; 9738 90 2F
L973A:  iny                                     ; 973A C8
        lda L0703_TOP_SCORE_3                   ; 973B AD 03 07
        cmp L072C_SCORE_3                       ; 973E CD 2C 07
        beq L9747                               ; 9741 F0 04
        bcs L978D                               ; 9743 B0 48
        bcc L9769 ;always taken                 ; 9745 90 22
L9747:  lda L0702_TOP_SCORE_2                   ; 9747 AD 02 07
        cmp L072B_SCORE_2                       ; 974A CD 2B 07
        beq L9753                               ; 974D F0 04
        bcs L978D                               ; 974F B0 3C
        bcc L9769 ;always taken                 ; 9751 90 16
L9753:  iny                                     ; 9753 C8
        lda L0701_TOP_SCORE_1                   ; 9754 AD 01 07
        cmp L072A_SCORE_1                       ; 9757 CD 2A 07
        beq L9760                               ; 975A F0 04
        bcs L978D                               ; 975C B0 2F
        bcc L9769 ;always taken                 ; 975E 90 09
L9760:  iny                                     ; 9760 C8
        lda L0700_TOP_SCORE_0                   ; 9761 AD 00 07
        cmp L0729_SCORE_0                       ; 9764 CD 29 07
        bcs L978D                               ; 9767 B0 24
L9769:  lda L072E_SCORE_5                       ; 9769 AD 2E 07
        sta L0705_TOP_SCORE_5                   ; 976C 8D 05 07
        lda L072D_SCORE_4                       ; 976F AD 2D 07
        sta L0704_TOP_SCORE_4                   ; 9772 8D 04 07
        lda L072C_SCORE_3                       ; 9775 AD 2C 07
        sta L0703_TOP_SCORE_3                   ; 9778 8D 03 07
        lda L072B_SCORE_2                       ; 977B AD 2B 07
        sta L0702_TOP_SCORE_2                   ; 977E 8D 02 07
        lda L072A_SCORE_1                       ; 9781 AD 2A 07
        sta L0701_TOP_SCORE_1                   ; 9784 8D 01 07
        lda L0729_SCORE_0                       ; 9787 AD 29 07
        sta L0700_TOP_SCORE_0                   ; 978A 8D 00 07
L978D:  rts                                     ; 978D 60
.endscope

; ----------------------------------------------------------------------------
R978E:
.scope
        lda     $0741                           ; 978E AD 41 07
        bne     L97F7                           ; 9791 D0 64
        lda     $F7                             ; 9793 A5 F7
        cmp     #$F0                            ; 9795 C9 F0
        bne     L97A3                           ; 9797 D0 0A
L9799:
        ; enter top-level state 0.
        lda #$00                                ; 9799 A9 00
        sta L46_TOP_STATE                       ; 979B 85 46
        sta L068D                               ; 979D 8D 8D 06
        jmp L97F6                               ; 97A0 4C F6 97

L97A3:  lda $54                                 ; 97A3 A5 54
        beq L97F6                               ; 97A5 F0 4F
        lda $F5                                 ; 97A7 A5 F5
        and #$10                                ; 97A9 29 10
        beq L97F6                               ; 97AB F0 49
        lda #$05                                ; 97AD A9 05
        sta L068D                               ; 97AF 8D 8D 06
        lda #$00                                ; 97B2 A9 00
        sta $5D                                 ; 97B4 85 5D
        jsr RB654                               ; 97B6 20 54 B6
        lda #$16                                ; 97B9 A9 16
        sta L2001                               ; 97BB 8D 01 20
        lda #$FF                                ; 97BE A9 FF
        ldx #$02                                ; 97C0 A2 02
        ldy #$02                                ; 97C2 A0 02
        jsr RB894 ; fill page 2 with FF         ; 97C4 20 94 B8
L97C7:  lda #$70                                ; 97C7 A9 70
        sta L44_SPRITE_X                        ; 97C9 85 44
        lda #$77                                ; 97CB A9 77
        sta L45_SPRITE_Y                        ; 97CD 85 45
        lda #$00                                ; 97CF A9 00
        sta L53_SPRITE_NUM                      ; 97D1 85 53
        jsr R88F6_SPRITE                        ; 97D3 20 F6 88
        lda $F5                                 ; 97D6 A5 F5
        cmp #$10                                ; 97D8 C9 10
        beq L97E8                               ; 97DA F0 0C
        lda $F7                                 ; 97DC A5 F7
        cmp #$F0                                ; 97DE C9 F0
        beq L9799                               ; 97E0 F0 B7
        jsr RB654                               ; 97E2 20 54 B6
        jmp L97C7                               ; 97E5 4C C7 97

L97E8:  lda #$FF                                ; 97E8 A9 FF
        sta $5D                                 ; 97EA 85 5D
        lda #$1E                                ; 97EC A9 1E
        sta L2001                               ; 97EE 8D 01 20
        lda #$00                                ; 97F1 A9 00
        sta L068D                               ; 97F3 8D 8D 06
L97F6:  rts                                     ; 97F6 60

L97F7:  lda $F5                                 ; 97F7 A5 F5
        cmp #$10                                ; 97F9 C9 10
        if_eq                                   ; 97FB D0 1E
            lda #$00                            ; 97FD A9 00
            sta $36                             ; 97FF 85 36
            ; enter top-level state 0.
            sta L46_TOP_STATE                   ; 9801 85 46
            lda $073C                           ; 9803 AD 3C 07
            sta $0316                           ; 9806 8D 16 03
            lda $073D                           ; 9809 AD 3D 07
            sta L030B_P1_SPEED                  ; 980C 8D 0B 03
            lda $073E                           ; 980F AD 3E 07
            sta L0727_NUM_PLAYERS               ; 9812 8D 27 07
            lda $073F                           ; 9815 AD 3F 07
            sta $0731                           ; 9818 8D 31 07
        end_if
        rts                                     ; 981B 60
.endscope

; ----------------------------------------------------------------------------
; jump table vector 0
L981C:
.scope
        lda $0741                               ; 981C AD 41 07
        cmp #$FE                                ; 981F C9 FE
        if_eq                                   ; 9821 D0 1E
            lda #$00                            ; 9823 A9 00
            sta $36                             ; 9825 85 36
            ; enter top-level state 0.
            sta L46_TOP_STATE                   ; 9827 85 46
            lda $073C                           ; 9829 AD 3C 07
            sta $0316                           ; 982C 8D 16 03
            lda $073D                           ; 982F AD 3D 07
            sta L030B_P1_SPEED                  ; 9832 8D 0B 03
            lda $073E                           ; 9835 AD 3E 07
            sta L0727_NUM_PLAYERS               ; 9838 8D 27 07
            lda $073F                           ; 983B AD 3F 07
            sta $0731                           ; 983E 8D 31 07
        end_if
        lda #$06                                ; 9841 A9 06
        sta $06F5                               ; 9843 8D F5 06
        lda #$02                                ; 9846 A9 02
        jsr RB8E0 ; Set mapper CHR bank 0.      ; 9848 20 E0 B8
        lda #$00                                ; 984B A9 00
        sta $5D                                 ; 984D 85 5D
        sta $52                                 ; 984F 85 52
        sta $0741                               ; 9851 8D 41 07
        sta $51                                 ; 9854 85 51
        lda #$FF                                ; 9856 A9 FF
        sta $80                                 ; 9858 85 80
        sta $0300                               ; 985A 8D 00 03
        sta $0380                               ; 985D 8D 80 03
        lda #$00                                ; 9860 A9 00
        sta $36                                 ; 9862 85 36
        lda #$D0                                ; 9864 A9 D0
        sta $37                                 ; 9866 85 37
        jsr RB67C                               ; 9868 20 7C B6
        jsr RB6A2                               ; 986B 20 A2 B6
        jsr RB6C2                               ; 986E 20 C2 B6
        .word   LB91C                           ; 9871 1C B9
        lda #$81                                ; 9873 A9 81
        sta L66_PALETTE                         ; 9875 85 66
        jsr R91D0                               ; 9877 20 D0 91
        jsr RB695                               ; 987A 20 95 B6
        jsr RB689                               ; 987D 20 89 B6
        lda #$00                                ; 9880 A9 00
        sta $54                                 ; 9882 85 54
        lda #$FF                                ; 9884 A9 FF
        sta $80                                 ; 9886 85 80
L9888:  lda $43                                 ; 9888 A5 43
        and #$10                                ; 988A 29 10
        lsr a                                   ; 988C 4A
        lsr a                                   ; 988D 4A
        lsr a                                   ; 988E 4A
        lsr a                                   ; 988F 4A
        clc                                     ; 9890 18
        adc #$03                                ; 9891 69 03
        jsr RB8F4 ; Set mapper CHR bank 1.      ; 9893 20 F4 B8
        lda $F5                                 ; 9896 A5 F5
        cmp #$08                                ; 9898 C9 08
        if_eq                                   ; 989A D0 15
            lda L0727_NUM_PLAYERS               ; 989C AD 27 07
            cmp #$01                            ; 989F C9 01
            if_ne                               ; 98A1 F0 0E
                lda #$01                        ; 98A3 A9 01
                sta $06F1                       ; 98A5 8D F1 06
                lda #$01                        ; 98A8 A9 01
                sta L0727_NUM_PLAYERS           ; 98AA 8D 27 07
                lda #$00                        ; 98AD A9 00
                sta $51                         ; 98AF 85 51
            end_if
        end_if
        lda     $F5                             ; 98B1 A5 F5
        cmp     #$04                            ; 98B3 C9 04
        if_eq                                   ; 98B5 D0 15
            lda L0727_NUM_PLAYERS               ; 98B7 AD 27 07
            cmp #$02                            ; 98BA C9 02
            if_ne                               ; 98BC F0 0E
                lda #$01                        ; 98BE A9 01
                sta $06F1                       ; 98C0 8D F1 06
                lda #$02                        ; 98C3 A9 02
                sta L0727_NUM_PLAYERS           ; 98C5 8D 27 07
                lda #$00                        ; 98C8 A9 00
                sta $51                         ; 98CA 85 51
            end_if
        end_if
        cmp     #$20                            ; 98CC C9 20
        if_eq                                   ; 98CE D0 11
            lda #$01                            ; 98D0 A9 01
            sta $06F1                           ; 98D2 8D F1 06
            lda L0727_NUM_PLAYERS               ; 98D5 AD 27 07
            eor #$03                            ; 98D8 49 03
            sta L0727_NUM_PLAYERS               ; 98DA 8D 27 07
            lda #$00                            ; 98DD A9 00
            sta $51                             ; 98DF 85 51
        end_if
        lda #$45                                ; 98E1 A9 45
        sta L44_SPRITE_X                        ; 98E3 85 44
        ldx L0727_NUM_PLAYERS                   ; 98E5 AE 27 07
        lda LA267,x                             ; 98E8 BD 67 A2
        sta L45_SPRITE_Y                        ; 98EB 85 45
        lda #$21                                ; 98ED A9 21
        sta L53_SPRITE_NUM                      ; 98EF 85 53
        jsr R88F6_SPRITE                        ; 98F1 20 F6 88
        jsr R8BE5                               ; 98F4 20 E5 8B
        jsr RB654                               ; 98F7 20 54 B6
        lda $43                                 ; 98FA A5 43
        bne L9906                               ; 98FC D0 08
        inc $51                                 ; 98FE E6 51
        lda $51                                 ; 9900 A5 51
        cmp #$08                                ; 9902 C9 08
        beq L9912                               ; 9904 F0 0C
L9906:  lda $F5                                 ; 9906 A5 F5
        cmp #$10                                ; 9908 C9 10
        beq L990F                               ; 990A F0 03
        jmp L9888                               ; 990C 4C 88 98

L990F:
        ; enter top-level state 1
        inc L46_TOP_STATE                       ; 990F E6 46
        rts                                     ; 9911 60

L9912:  lda #$FE                                ; 9912 A9 FE
        sta $0741                               ; 9914 8D 41 07
        lda $0316                               ; 9917 AD 16 03
        sta $073C                               ; 991A 8D 3C 07
        lda L030B_P1_SPEED                      ; 991D AD 0B 03
        sta $073D                               ; 9920 8D 3D 07
        lda L0727_NUM_PLAYERS                   ; 9923 AD 27 07
        sta $073E                               ; 9926 8D 3E 07
        lda $0731                               ; 9929 AD 31 07
        sta $073F                               ; 992C 8D 3F 07
        lda #$00                                ; 992F A9 00
        sta $70                                 ; 9931 85 70
        sta $69                                 ; 9933 85 69
        lda #$01                                ; 9935 A9 01
        sta L8B_SPEED                           ; 9937 85 8B
        sta L030B_P1_SPEED                      ; 9939 8D 0B 03
        sta L0727_NUM_PLAYERS                   ; 993C 8D 27 07
        lda #$03                                ; 993F A9 03
        sta $0731                               ; 9941 8D 31 07
        lda #$44                                ; 9944 A9 44
        sta LA4_VIRUS_BCD                       ; 9946 85 A4
        sta L0324_P1_VIRUS                      ; 9948 8D 24 03
        lda #$0A                                ; 994B A9 0A
        sta $0316                               ; 994D 8D 16 03
        jmp L990F                               ; 9950 4C 0F 99
.endscope ;L981C

; ----------------------------------------------------------------------------
; jump table vector 1
L9953:
.scope
    lda     $0741                               ; 9953 AD 41 07
    if_ne                                       ; 9956 F0 03
        jmp L9AC2                               ; 9958 4C C2 9A
    end_if
    jsr RFFD3                                   ; 995B 20 D3 FF
    lda #$05                                    ; 995E A9 05
    jsr RB8E0 ; Set mapper CHR bank 0.          ; 9960 20 E0 B8
    lda #$05                                    ; 9963 A9 05
    jsr RB8F4 ; Set mapper CHR bank 1.          ; 9965 20 F4 B8
    lda #$00                                    ; 9968 A9 00
    sta $5D                                     ; 996A 85 5D
    sta $52                                     ; 996C 85 52
    sta $65                                     ; 996E 85 65
    sta $0728                                   ; 9970 8D 28 07
    lda #$03                                    ; 9973 A9 03
    sta $0725                                   ; 9975 8D 25 07
    lda #$FF                                    ; 9978 A9 FF
    sta $80                                     ; 997A 85 80
    sta $0300                                   ; 997C 8D 00 03
    sta $0380                                   ; 997F 8D 80 03
    lda $0316                                   ; 9982 AD 16 03
    cmp #$15                                    ; 9985 C9 15
    if_pl                                       ; 9987 30 05
        lda #$14                                ; 9989 A9 14
        sta $0316                               ; 998B 8D 16 03
    end_if
    jsr RB67C                                   ; 998E 20 7C B6
    jsr RB6A2                                   ; 9991 20 A2 B6
    jsr RB6C2                                   ; 9994 20 C2 B6
    .word LBD7D ; settings screen               ; 9997 7D BD
    lda #$01                                    ; 9999 A9 01
    sta $68                                     ; 999B 85 68
    jsr R8508                                   ; 999D 20 08 85
    lda #$82                                    ; 99A0 A9 82
    sta L66_PALETTE                             ; 99A2 85 66
    ; PPU address $20AA (row 5, col 10)
    ; "_ PLAYER GAME"
    lda #$20                                    ; 99A4 A9 20
    sta $2006                                   ; 99A6 8D 06 20
    lda #$AA                                    ; 99A9 A9 AA
    sta $2006                                   ; 99AB 8D 06 20
    lda L0727_NUM_PLAYERS                       ; 99AE AD 27 07
    sta $2007                                   ; 99B1 8D 07 20
    lda L0727_NUM_PLAYERS                       ; 99B4 AD 27 07
    cmp #$01                                    ; 99B7 C9 01
    if_eq                                       ; 99B9 D0 05
        jsr RB6C2                               ; 99BB 20 C2 B6
        .word LA26A                             ; 99BE 6A A2
    end_if
    lda #$04                                    ; 99C0 A9 04
    sta $68                                     ; 99C2 85 68
    jsr RB695                                   ; 99C4 20 95 B6
    jsr RB689                                   ; 99C7 20 89 B6
    lda #$00                                    ; 99CA A9 00
    sta $54                                     ; 99CC 85 54
    lda #$FF                                    ; 99CE A9 FF
    sta $0300                                   ; 99D0 8D 00 03
    lda #$07                                    ; 99D3 A9 07
    sta $06F5                                   ; 99D5 8D F5 06
    loop
        ldx #$17                                ; 99D8 A2 17
        ldy #$02                                ; 99DA A0 02
        jsr RB771 ; advance LFSR                ; 99DC 20 71 B7
        lda $F5                                 ; 99DF A5 F5
        cmp #$40                                ; 99E1 C9 40
        if_eq                                   ; 99E3 D0 07
            ; enter top-level state 0.
            lda #$00                            ; 99E5 A9 00
            sta L46_TOP_STATE                   ; 99E7 85 46
            jmp L9AC4 ; rts                     ; 99E9 4C C4 9A
        end_if
        cmp #$10                                ; 99EC C9 10
        if_eq                                   ; 99EE D0 03
            jmp break                           ; 99F0 4C C2 9A
        end_if
        lda $65                                 ; 99F3 A5 65
        cmp #$00                                ; 99F5 C9 00
        if_eq                                   ; 99F7 D0 19
            jsr R9075 ; Load P1 state           ; 99F9 20 75 90
            jsr R9AC5                           ; 99FC 20 C5 9A
            jsr R90AF ; Save P1 state           ; 99FF 20 AF 90
            lda L0727_NUM_PLAYERS               ; 9A02 AD 27 07
            cmp #$02                            ; 9A05 C9 02
            if_eq                               ; 9A07 D0 09
                jsr R9092 ; Load P2 state       ; 9A09 20 92 90
                jsr R9AC5                       ; 9A0C 20 C5 9A
                jsr R90BC ; Save P2 state       ; 9A0F 20 BC 90
            end_if
        end_if
        lda $65                                 ; 9A12 A5 65
        cmp #$01                                ; 9A14 C9 01
        if_eq                                   ; 9A16 D0 19
            jsr R9075 ; Load P1 state           ; 9A18 20 75 90
            jsr R9B1D                           ; 9A1B 20 1D 9B
            jsr R90AF ; Save P1 state           ; 9A1E 20 AF 90
            lda L0727_NUM_PLAYERS               ; 9A21 AD 27 07
            cmp #$02                            ; 9A24 C9 02
            if_eq                               ; 9A26 D0 09
                jsr R9092 ; Load P2 state       ; 9A28 20 92 90
                jsr R9B1D                       ; 9A2B 20 1D 9B
                jsr R90BC ; Save P2 state       ; 9A2E 20 BC 90
            end_if
        end_if
        lda $65                                 ; 9A31 A5 65
        cmp #$02                                ; 9A33 C9 02
        if_eq                                   ; 9A35 D0 28
            lda $F5                             ; 9A37 A5 F5
            and #$01                            ; 9A39 29 01
            if_ne                               ; 9A3B F0 0F
                lda $0731                       ; 9A3D AD 31 07
                cmp #$02                        ; 9A40 C9 02
                if_ne                           ; 9A42 F0 08
                    lda #$03                    ; 9A44 A9 03
                    sta $06F1                   ; 9A46 8D F1 06
                    inc $0731                   ; 9A49 EE 31 07
                end_if
            end_if
            lda $F5                             ; 9A4C A5 F5
            and #$02                            ; 9A4E 29 02
            if_ne                               ; 9A50 F0 0D
                lda $0731                       ; 9A52 AD 31 07
                if_ne                           ; 9A55 F0 08
                    lda #$03                    ; 9A57 A9 03
                    sta $06F1                   ; 9A59 8D F1 06
                    dec $0731                   ; 9A5C CE 31 07
                end_if
            end_if
        end_if
        lda $F5                                 ; 9A5F A5 F5
        cmp #$08                                ; 9A61 C9 08
        if_eq                                   ; 9A63 D0 11
            lda $65                             ; 9A65 A5 65
            if_ne                               ; 9A67 F0 0D
                lda #$01                        ; 9A69 A9 01
                sta $06F1                       ; 9A6B 8D F1 06
                dec $65                         ; 9A6E C6 65
                lda $65                         ; 9A70 A5 65
                sta $68                         ; 9A72 85 68
                inc $68                         ; 9A74 E6 68
            end_if
        end_if
        lda $F5                                 ; 9A76 A5 F5
        cmp #$04                                ; 9A78 C9 04
        if_eq                                   ; 9A7A D0 13
            lda $65                             ; 9A7C A5 65
            cmp #$02                            ; 9A7E C9 02
            if_ne                               ; 9A80 F0 0D
                lda #$01                        ; 9A82 A9 01
                sta $06F1                       ; 9A84 8D F1 06
                inc $65                         ; 9A87 E6 65
                lda $65                         ; 9A89 A5 65
                sta $68                         ; 9A8B 85 68
                inc $68                         ; 9A8D E6 68
            end_if
        end_if
        jsr R9075 ; Load P1 state               ; 9A8F 20 75 90
        jsr R9B42 ; Setting slider sprites      ; 9A92 20 42 9B
        jsr R90AF ; Save P1 state               ; 9A95 20 AF 90
        lda L0727_NUM_PLAYERS                   ; 9A98 AD 27 07
        cmp #$02                                ; 9A9B C9 02
        if_eq                                   ; 9A9D D0 09
            jsr R9092 ; Load P2 state           ; 9A9F 20 92 90
            jsr R9B42 ; Slider sprites          ; 9AA2 20 42 9B
            jsr R90BC ; Save P2 state           ; 9AA5 20 BC 90
        end_if
        ldx $0731                               ; 9AA8 AE 31 07
        lda LA117,x                             ; 9AAB BD 17 A1
        sta L44_SPRITE_X                        ; 9AAE 85 44
        lda #$B7                                ; 9AB0 A9 B7
        sta L45_SPRITE_Y                        ; 9AB2 85 45
        lda LA113,x ; $04,$04,$05               ; 9AB4 BD 13 A1
        sta L53_SPRITE_NUM                      ; 9AB7 85 53
        jsr R88F6_SPRITE                        ; 9AB9 20 F6 88
        ; 7x3 or 5x3 box sprite
        jsr RB654                               ; 9ABC 20 54 B6
    forever                                     ; 9ABF 4C D8 99
L9AC2:
    ; enter top-level state 2
    inc L46_TOP_STATE                           ; 9AC2 E6 46
L9AC4:
    rts                                         ; 9AC4 60
.endscope ;L9953

; ----------------------------------------------------------------------------
; Called by L9953, if $65 == 0.
R9AC5:
    begin
        lda $93                                 ; 9AC5 A5 93
        if_eq                                   ; 9AC7 D0 0A
            lda $5B                             ; 9AC9 A5 5B
            and #$03                            ; 9ACB 29 03
            beq break                           ; 9ACD F0 4D
            lda #$07                            ; 9ACF A9 07
            sta $93                             ; 9AD1 85 93
        end_if
        lda $5C                                 ; 9AD3 A5 5C
        and #$03                                ; 9AD5 29 03
        if_eq                                   ; 9AD7 D0 07
            lda #$00                            ; 9AD9 A9 00
            sta $93                             ; 9ADB 85 93
        else                                    ; 9ADD 4C 1C 9B
            inc $93                             ; 9AE0 E6 93
            lda $93                             ; 9AE2 A5 93
            cmp #$08                            ; 9AE4 C9 08
            if_cs                               ; 9AE6 90 34
                lda #$01                        ; 9AE8 A9 01
                sta $93                         ; 9AEA 85 93
                lda $5C                         ; 9AEC A5 5C
                and #$01                        ; 9AEE 29 01
                if_ne                           ; 9AF0 F0 13
                    lda L96_LEVEL               ; 9AF2 A5 96
                    cmp #$14                    ; 9AF4 C9 14
                    if_ne                       ; 9AF6 F0 0D
                        lda #$03                ; 9AF8 A9 03
                        sta $06F1               ; 9AFA 8D F1 06
                        lda $68                 ; 9AFD A5 68
                        ora #$04                ; 9AFF 09 04
                        sta $68                 ; 9B01 85 68
                        inc L96_LEVEL           ; 9B03 E6 96
                    end_if
                end_if
                lda $5C                         ; 9B05 A5 5C
                and #$02                        ; 9B07 29 02
                if_ne                           ; 9B09 F0 11
                    lda L96_LEVEL               ; 9B0B A5 96
                    if_ne                       ; 9B0D F0 0D
                        lda #$03                ; 9B0F A9 03
                        sta $06F1               ; 9B11 8D F1 06
                        lda $68                 ; 9B14 A5 68
                        ora #$04                ; 9B16 09 04
                        sta $68                 ; 9B18 85 68
                        dec L96_LEVEL           ; 9B1A C6 96
                    end_if
                end_if
            end_if
        end_if
    end
    rts                                         ; 9B1C 60

; ----------------------------------------------------------------------------
; Called by L9953, if $65 == 1.
R9B1D:
    lda $5B                                     ; 9B1D A5 5B
    cmp #$01                                    ; 9B1F C9 01
    if_eq                                       ; 9B21 D0 0D
        lda L8B_SPEED                           ; 9B23 A5 8B
        cmp #$02                                ; 9B25 C9 02
        if_ne                                   ; 9B27 F0 07
            lda #$03                            ; 9B29 A9 03
            sta $06F1                           ; 9B2B 8D F1 06
            inc L8B_SPEED                       ; 9B2E E6 8B
        end_if
    end_if
    lda $5B                                     ; 9B30 A5 5B
    cmp #$02                                    ; 9B32 C9 02
    if_eq                                       ; 9B34 D0 0B
        lda L8B_SPEED                           ; 9B36 A5 8B
        if_ne                                   ; 9B38 F0 07
            lda #$03                            ; 9B3A A9 03
            sta $06F1                           ; 9B3C 8D F1 06
            dec L8B_SPEED                       ; 9B3F C6 8B
        end_if
    end_if
    rts                                         ; 9B41 60

; ----------------------------------------------------------------------------
; Load sprites for settings screen pointers.
R9B42:
    ldx L96_LEVEL                               ; 9B42 A6 96
    lda LA294,x                                 ; 9B44 BD 94 A2
    sta L44_SPRITE_X                            ; 9B47 85 44
    ldx $58                                     ; 9B49 A6 58
    lda LA2A9,x ; 4:$53,5:$62                   ; 9B4B BD A9 A2
    sta L45_SPRITE_Y                            ; 9B4E 85 45
    lda $58                                     ; 9B50 A5 58
    clc                                         ; 9B52 18
    adc #$19                                    ; 9B53 69 19
    sta L53_SPRITE_NUM                          ; 9B55 85 53
    jsr R88F6_SPRITE                            ; 9B57 20 F6 88
    ; Sprite $1d or $1e
    ; Small pointer (possibly flipped)
    ldx L8B_SPEED                               ; 9B5A A6 8B
    lda LA2AF,x ; $58,$80,$A4                   ; 9B5C BD AF A2
    sta L44_SPRITE_X                            ; 9B5F 85 44
    ldx $58                                     ; 9B61 A6 58
    lda LA2B2,x ; 4:$87,5:$96                   ; 9B63 BD B2 A2
    sta L45_SPRITE_Y                            ; 9B66 85 45
    lda $58                                     ; 9B68 A5 58
    clc                                         ; 9B6A 18
    adc #$FE                                    ; 9B6B 69 FE
    sta L53_SPRITE_NUM                          ; 9B6D 85 53
    jsr R88F6_SPRITE                            ; 9B6F 20 F6 88
    ; Sprite $02 or $03
    ; Slider pointer (possibly flipped)
    rts                                         ; 9B72 60

; ----------------------------------------------------------------------------
; jump table vector 4
L9B73:
.scope
        jsr R9075 ; Load P1 state               ; 9B73 20 75 90
        jsr R9BB9                               ; 9B76 20 B9 9B
        jsr R90AF ; Save P1 state               ; 9B79 20 AF 90
        lda L0727_NUM_PLAYERS                   ; 9B7C AD 27 07
        cmp #$02                                ; 9B7F C9 02
        bne L9B9A                               ; 9B81 D0 17

        lda $9E                                 ; 9B83 A5 9E
        cmp $0725                               ; 9B85 CD 25 07
        beq L9BB4                               ; 9B88 F0 2A

        jsr R9092 ; Load P2 state               ; 9B8A 20 92 90
        jsr R9BB9                               ; 9B8D 20 B9 9B
        jsr R90BC ; Save P2 state               ; 9B90 20 BC 90
        lda $9E                                 ; 9B93 A5 9E
        cmp $0725                               ; 9B95 CD 25 07
        beq L9BB4                               ; 9B98 F0 1A

L9B9A:  jsr RB24F                               ; 9B9A 20 4F B2
        lda $0389                               ; 9B9D AD 89 03
        bne L9BA7                               ; 9BA0 D0 05

        lda $0309                               ; 9BA2 AD 09 03
        beq L9BB3                               ; 9BA5 F0 0C

L9BA7:
        ; enter top-level state 5
        lda #$05                                ; 9BA7 A9 05
        sta L46_TOP_STATE                       ; 9BA9 85 46
        lda #$04                                ; 9BAB A9 04
        sta $0317                               ; 9BAD 8D 17 03
        sta $0397                               ; 9BB0 8D 97 03
L9BB3:  rts                                     ; 9BB3 60

L9BB4:
        ; enter top-level state 7
        lda #$07                                ; 9BB4 A9 07
        sta L46_TOP_STATE                       ; 9BB6 85 46
        rts                                     ; 9BB8 60
.endscope

; ----------------------------------------------------------------------------
; Jump to one of 7 subroutines based on $97.
R9BB9:
.scope
    lda $97                                     ; 9BB9 A5 97
    jsr RB8AC                                   ; 9BBB 20 AC B8
    .word L8D56                                 ; 9BBE 56 8D
    .word L8C6F
    .word L9BD4
    .word L9BCF
    .word L9700
    .word L9BCC
    .word L9F87
.endscope

; ----------------------------------------------------------------------------
; R9BB9 routine 5.
L9BCC:
    inc $97                                     ; 9BCC E6 97
    rts                                         ; 9BCE 60

; ----------------------------------------------------------------------------
; R9BB9 routine 3.
L9BCF:
    lda #$00                                    ; 9BCF A9 00
    sta $97                                     ; 9BD1 85 97
    rts                                         ; 9BD3 60

; ----------------------------------------------------------------------------
; R9BB9 routine 2.
; May go to state 5.
L9BD4:
.scope
    lda L0727_NUM_PLAYERS                       ; 9BD4 AD 27 07
    cmp #$02                                    ; 9BD7 C9 02
    if_eq                                       ; 9BD9 D0 09
        jsr R9BE9                               ; 9BDB 20 E9 9B
        jsr R9C01                               ; 9BDE 20 01 9C
    else                                        ; 9BE1 4C E8 9B
        lda #$05                                ; 9BE4 A9 05
        sta $97                                 ; 9BE6 85 97
    end_if
    rts                                         ; 9BE8 60
.endscope

; ----------------------------------------------------------------------------
R9BE9:
.scope
        lda     $8F                             ; 9BE9 A5 8F
        cmp     #$02                            ; 9BEB C9 02
        if_cs                                   ; 9BED 90 0D
            clc                                 ; 9BEF 18
            adc $98                             ; 9BF0 65 98
            sta $98                             ; 9BF2 85 98
            lda $58                             ; 9BF4 A5 58
            sec                                 ; 9BF6 38
            sbc #$03                            ; 9BF7 E9 03
            sta $06F4                           ; 9BF9 8D F4 06
        end_if
        lda     #$00                            ; 9BFC A9 00
        sta     $8F                             ; 9BFE 85 8F
        rts                                     ; 9C00 60
.endscope

; ----------------------------------------------------------------------------
R9C01:
.scope
        lda     #$00                            ; 9C01 A9 00
        sta     $57                             ; 9C03 85 57
        ldx     $58                             ; 9C05 A6 58
        lda     LA545,x                         ; 9C07 BD 45 A5
        tax                                     ; 9C0A AA
        lda     $0318,x                         ; 9C0B BD 18 03
        cmp     #$02                            ; 9C0E C9 02
        if_cs                                   ; 9C10 90 7A
            if_eq                               ; 9C12 D0 1A
                lda $43                         ; 9C14 A5 43
                and #$03                        ; 9C16 29 03
                tay                             ; 9C18 A8
                lda $0329,x                     ; 9C19 BD 29 03
                ora #$80                        ; 9C1C 09 80
                sta ($57),y                     ; 9C1E 91 57
                iny                             ; 9C20 C8
                iny                             ; 9C21 C8
                iny                             ; 9C22 C8
                iny                             ; 9C23 C8
                lda $032A,x                     ; 9C24 BD 2A 03
                ora #$80                        ; 9C27 09 80
                sta ($57),y                     ; 9C29 91 57
            else                                ; 9C2B 4C 7A 9C
                cmp     #$03                    ; 9C2E C9 03
                if_eq                           ; 9C30 D0 21
                    lda $43                     ; 9C32 A5 43
                    and #$03                    ; 9C34 29 03
                    tay                         ; 9C36 A8
                    lda $0329,x                 ; 9C37 BD 29 03
                    ora #$80                    ; 9C3A 09 80
                    sta ($57),y                 ; 9C3C 91 57
                    iny                         ; 9C3E C8
                    iny                         ; 9C3F C8
                    lda $032A,x                 ; 9C40 BD 2A 03
                    ora #$80                    ; 9C43 09 80
                    sta ($57),y                 ; 9C45 91 57
                    iny                         ; 9C47 C8
                    iny                         ; 9C48 C8
                    lda $032B,x                 ; 9C49 BD 2B 03
                    ora #$80                    ; 9C4C 09 80
                    sta ($57),y                 ; 9C4E 91 57
                else                            ; 9C50 4C 7A 9C
                    lda $43                     ; 9C53 A5 43
                    and #$01                    ; 9C55 29 01
                    tay                         ; 9C57 A8
                    lda $0329,x                 ; 9C58 BD 29 03
                    ora #$80                    ; 9C5B 09 80
                    sta ($57),y                 ; 9C5D 91 57
                    iny                         ; 9C5F C8
                    iny                         ; 9C60 C8
                    lda $032A,x                 ; 9C61 BD 2A 03
                    ora #$80                    ; 9C64 09 80
                    sta ($57),y                 ; 9C66 91 57
                    iny                         ; 9C68 C8
                    iny                         ; 9C69 C8
                    lda $032B,x                 ; 9C6A BD 2B 03
                    ora #$80                    ; 9C6D 09 80
                    sta ($57),y                 ; 9C6F 91 57
                    iny                         ; 9C71 C8
                    iny                         ; 9C72 C8
                    lda $032C,x                 ; 9C73 BD 2C 03
                    ora #$80                    ; 9C76 09 80
                    sta ($57),y                 ; 9C78 91 57
                end_if
            end_if
            ldx $58                             ; 9C7A A6 58
            lda LA545,x                         ; 9C7C BD 45 A5
            tax                                 ; 9C7F AA
            lda #$00                            ; 9C80 A9 00
            sta $0318,x                         ; 9C82 9D 18 03
            lda #$01                            ; 9C85 A9 01
            sta $97                             ; 9C87 85 97
        else                                    ; 9C89 4C 90 9C
            lda #$05                            ; 9C8C A9 05
            sta $97                             ; 9C8E 85 97
        end_if
        rts                                     ; 9C90 60
.endscope

; ----------------------------------------------------------------------------
; R8157 jump table vector 8
L9C91:
.scope
        lda $0741                               ; 9C91 AD 41 07
        bne L9CEA                               ; 9C94 D0 54
        lda #$00                                ; 9C96 A9 00
        sta L0324_P1_VIRUS                      ; 9C98 8D 24 03
        sta L03A4_P2_VIRUS                      ; 9C9B 8D A4 03
        loop
            loop
                jsr R8FA5                       ; 9C9E 20 A5 8F
                jsr R9075 ; Load P1 state       ; 9CA1 20 75 90
                jsr R9CFF                       ; 9CA4 20 FF 9C
                jsr R90AF ; Save P1 state       ; 9CA7 20 AF 90
                lda L0727_NUM_PLAYERS           ; 9CAA AD 27 07
                cmp #$02                        ; 9CAD C9 02
                if_eq                           ; 9CAF D0 0E
                    lda $0316                   ; 9CB1 AD 16 03
                    cmp $0396                   ; 9CB4 CD 96 03
                    if_ne                       ; 9CB7 F0 06
                        jsr R9092 ; Load P2     ; 9CB9 20 92 90
                        jsr R9CFF               ; 9CBC 20 FF 9C
                    end_if
                end_if
                jsr R90BC ; Save P2 state       ; 9CBF 20 BC 90
                jsr R8FCA                       ; 9CC2 20 CA 8F
                jsr RB654                       ; 9CC5 20 54 B6
                lda $0328                       ; 9CC8 AD 28 03
            while_ne                            ; 9CCB D0 D1
            lda $03A8                           ; 9CCD AD A8 03
        while_ne                                ; 9CD0 D0 CC
L9CD2:  lda #$04                                ; 9CD2 A9 04
        sta $58                                 ; 9CD4 85 58
        lda #$0F                                ; 9CD6 A9 0F
        sta $80                                 ; 9CD8 85 80
        sta $0300                               ; 9CDA 8D 00 03
        sta $0380                               ; 9CDD 8D 80 03
        lda #$80                                ; 9CE0 A9 80
        jsr R9701                               ; 9CE2 20 01 97
        ; enter top-level state 4
        lda #$04                                ; 9CE5 A9 04
        sta L46_TOP_STATE                       ; 9CE7 85 46
        rts                                     ; 9CE9 60

L9CEA:
        ; copy $CF00-$CF7F to $0400-$047F
        ldx #$7F                                ; 9CEA A2 7F
        loop
            lda LCF00,x                         ; 9CEC BD 00 CF
            sta $0400,x                         ; 9CEF 9D 00 04
            dex                                 ; 9CF2 CA
            cpx #$FF                            ; 9CF3 E0 FF
        while_ne                                ; 9CF5 D0 F5
        lda #$00                                ; 9CF7 A9 00
        sta $0328                               ; 9CF9 8D 28 03
        jmp L9CD2                               ; 9CFC 4C D2 9C
.endscope

; ----------------------------------------------------------------------------
R9CFF:
.scope
        lda $A8                                 ; 9CFF A5 A8
        if_eq                                   ; 9D01 D0 03
            jmp L9E4B ; rts                     ; 9D03 4C 4B 9E
        end_if
        loop
            ldx #$17                            ; 9D06 A2 17
            ldy #$02                            ; 9D08 A0 02
            jsr RB771 ; advance LFSR            ; 9D0A 20 71 B7
            lda $17                             ; 9D0D A5 17
            and #$0F                            ; 9D0F 29 0F
            sta $47                             ; 9D11 85 47
            ldx L96_LEVEL                       ; 9D13 A6 96
            lda LA3DE,x                         ; 9D15 BD DE A3
            cmp $47                             ; 9D18 C5 47
        while_cc                                ; 9D1A 90 EA
        lda $47                                 ; 9D1C A5 47
        tax                                     ; 9D1E AA
        lda LA474,x                             ; 9D1F BD 74 A4
        sta $47                                 ; 9D22 85 47
        lda $18                                 ; 9D24 A5 18
        and #$07                                ; 9D26 29 07
        clc                                     ; 9D28 18
        adc $47                                 ; 9D29 65 47
        sta $57                                 ; 9D2B 85 57
        sta $49                                 ; 9D2D 85 49
        lda $A8                                 ; 9D2F A5 A8
        and #$03                                ; 9D31 29 03
        sta $48                                 ; 9D33 85 48
        cmp #$03                                ; 9D35 C9 03
        if_eq                                   ; 9D37 D0 13
            ldx #$17                            ; 9D39 A2 17
            ldy #$02                            ; 9D3B A0 02
            jsr RB771 ; advance LFSR            ; 9D3D 20 71 B7
            lda $18                             ; 9D40 A5 18
            and #$0F                            ; 9D42 29 0F
            tax                                 ; 9D44 AA
            lda LA7ED,x                         ; 9D45 BD ED A7
            and #$03                            ; 9D48 29 03
            sta $48                             ; 9D4A 85 48
        end_if
L9D4C:  ldy #$00                                ; 9D4C A0 00
        lda ($57),y                             ; 9D4E B1 57
        cmp #$FF                                ; 9D50 C9 FF
        beq L9D61                               ; 9D52 F0 0D
L9D54:  inc $49                                 ; 9D54 E6 49
        lda $49                                 ; 9D56 A5 49
        sta $57                                 ; 9D58 85 57
        cmp #$80                                ; 9D5A C9 80
        bcc L9D4C                               ; 9D5C 90 EE
        jmp L9E4B ; rts                         ; 9D5E 4C 4B 9E

L9D61:  lda $48                                 ; 9D61 A5 48
        sta $47                                 ; 9D63 85 47
        ldx L8B_SPEED                           ; 9D65 A6 8B
        lda LA390,x                             ; 9D67 BD 90 A3
        sta $4A                                 ; 9D6A 85 4A
        ldx L8B_SPEED                           ; 9D6C A6 8B
        lda LA393,x                             ; 9D6E BD 93 A3
        sta $4B                                 ; 9D71 85 4B
        lda #$00                                ; 9D73 A9 00
        sta $4C                                 ; 9D75 85 4C
        lda #$00                                ; 9D77 A9 00
        sta $57                                 ; 9D79 85 57
        lda $49                                 ; 9D7B A5 49
        sec                                     ; 9D7D 38
        sbc $4A                                 ; 9D7E E5 4A
        tay                                     ; 9D80 A8
        lda ($57),y                             ; 9D81 B1 57
        and #$03                                ; 9D83 29 03
        tax                                     ; 9D85 AA
        lda LA22D,x                             ; 9D86 BD 2D A2
        ora $4C                                 ; 9D89 05 4C
        sta $4C                                 ; 9D8B 85 4C
        lda #$00                                ; 9D8D A9 00
        sta $57                                 ; 9D8F 85 57
        lda $49                                 ; 9D91 A5 49
        clc                                     ; 9D93 18
        adc $4A                                 ; 9D94 65 4A
        tay                                     ; 9D96 A8
        lda ($57),y                             ; 9D97 B1 57
        and #$03                                ; 9D99 29 03
        tax                                     ; 9D9B AA
        lda LA22D,x                             ; 9D9C BD 2D A2
        ora $4C                                 ; 9D9F 05 4C
        sta $4C                                 ; 9DA1 85 4C
        lda #$00                                ; 9DA3 A9 00
        sta $57                                 ; 9DA5 85 57
        lda $49                                 ; 9DA7 A5 49
        and #$07                                ; 9DA9 29 07
        cmp #$02                                ; 9DAB C9 02
        if_cs                                   ; 9DAD 90 12
            lda $49                             ; 9DAF A5 49
            sec                                 ; 9DB1 38
            sbc $4B                             ; 9DB2 E5 4B
            tay                                 ; 9DB4 A8
            lda ($57),y                         ; 9DB5 B1 57
            and #$03                            ; 9DB7 29 03
            tax                                 ; 9DB9 AA
            lda LA22D,x                         ; 9DBA BD 2D A2
            ora $4C                             ; 9DBD 05 4C
            sta $4C                             ; 9DBF 85 4C
        end_if
        lda #$00                                ; 9DC1 A9 00
        sta $57                                 ; 9DC3 85 57
        lda $49                                 ; 9DC5 A5 49
        and #$07                                ; 9DC7 29 07
        cmp #$06                                ; 9DC9 C9 06
        if_cc                                   ; 9DCB B0 12
            lda $49                             ; 9DCD A5 49
            clc                                 ; 9DCF 18
            adc $4B                             ; 9DD0 65 4B
            tay                                 ; 9DD2 A8
            lda ($57),y                         ; 9DD3 B1 57
            and #$03                            ; 9DD5 29 03
            tax                                 ; 9DD7 AA
            lda LA22D,x                         ; 9DD8 BD 2D A2
            ora $4C                             ; 9DDB 05 4C
            sta $4C                             ; 9DDD 85 4C
        end_if
        loop
            lda $4C                             ; 9DDF A5 4C
            cmp #$07                            ; 9DE1 C9 07
            if_eq                               ; 9DE3 D0 03
                jmp L9D54                       ; 9DE5 4C 54 9D
            end_if
            lda #$00                            ; 9DE8 A9 00
            sta $51                             ; 9DEA 85 51
            ldx $48                             ; 9DEC A6 48
            lda LA22D,x                         ; 9DEE BD 2D A2
            and $4C                             ; 9DF1 25 4C
            beq break                           ; 9DF3 F0 0D
            dec $48                             ; 9DF5 C6 48
            lda $48                             ; 9DF7 A5 48
            bpl continue                        ; 9DF9 10 E4
            lda #$02                            ; 9DFB A9 02
            sta $48                             ; 9DFD 85 48
        forever                                 ; 9DFF 4C DF 9D
        lda $49                                 ; 9E02 A5 49
        sta $57                                 ; 9E04 85 57
        ldy #$00                                ; 9E06 A0 00
        lda $48                                 ; 9E08 A5 48
        ora #$D0                                ; 9E0A 09 D0
        sta ($57),y                             ; 9E0C 91 57
        and #$07                                ; 9E0E 29 07
        tax                                     ; 9E10 AA
        lda L72_V1_COUNT,x                      ; 9E11 B5 72
        clc                                     ; 9E13 18
        adc #$01                                ; 9E14 69 01
        sta L72_V1_COUNT,x                      ; 9E16 95 72
        lda $0316                               ; 9E18 AD 16 03
        cmp $0396                               ; 9E1B CD 96 03
        if_eq                                   ; 9E1E D0 09
            lda $48                             ; 9E20 A5 48
            ora #$D0                            ; 9E22 09 D0
            ldy $49                             ; 9E24 A4 49
            sta $0500,y                         ; 9E26 99 00 05
        end_if
        ; increment virus count
        inc LA4_VIRUS_BCD                       ; 9E29 E6 A4
        lda LA4_VIRUS_BCD                       ; 9E2B A5 A4
        and #$0F                                ; 9E2D 29 0F
        cmp #$0A                                ; 9E2F C9 0A
        if_eq                                   ; 9E31 D0 07
            lda LA4_VIRUS_BCD                   ; 9E33 A5 A4
            clc                                 ; 9E35 18
            adc #$06                            ; 9E36 69 06
            sta LA4_VIRUS_BCD                   ; 9E38 85 A4
        end_if
        lda $57                                 ; 9E3A A5 57
        lsr a                                   ; 9E3C 4A
        lsr a                                   ; 9E3D 4A
        lsr a                                   ; 9E3E 4A
        sta $80                                 ; 9E3F 85 80
        lda LA4_VIRUS_BCD                       ; 9E41 A5 A4
        lda #$10                                ; 9E43 A9 10
        ora $52                                 ; 9E45 05 52
        sta $52                                 ; 9E47 85 52
        dec $A8                                 ; 9E49 C6 A8
L9E4B:  rts                                     ; 9E4B 60
.endscope

; ----------------------------------------------------------------------------
R9E4C:
.scope
    lda L96_LEVEL                               ; 9E4C A5 96
    cmp #$15                                    ; 9E4E C9 15
    beq L9E67                                   ; 9E50 F0 15
    if_cs                                       ; 9E52 90 03
        jmp L9EDA                               ; 9E54 4C DA 9E
    end_if
    lda L8B_SPEED                               ; 9E57 A5 8B
    asl a                                       ; 9E59 0A
    asl a                                       ; 9E5A 0A
    asl a                                       ; 9E5B 0A
    asl a                                       ; 9E5C 0A
    asl a                                       ; 9E5D 0A
    clc                                         ; 9E5E 18
    adc L96_LEVEL                               ; 9E5F 65 96
    tax                                         ; 9E61 AA
    lda L9FF8,x                                 ; 9E62 BD F8 9F
    beq L9EDA                                   ; 9E65 F0 73
L9E67:
    lda #$07                                    ; 9E67 A9 07
    jsr RB8E0 ; Set mapper CHR bank 0.          ; 9E69 20 E0 B8
    lda #$06                                    ; 9E6C A9 06
    jsr RB8F4 ; Set mapper CHR bank 1.          ; 9E6E 20 F4 B8
    jsr RB67C                                   ; 9E71 20 7C B6
    jsr RB6A2                                   ; 9E74 20 A2 B6
    ldx L8B_SPEED                               ; 9E77 A6 8B
    lda LA0DE,x                                 ; 9E79 BD DE A0
    sta L66_PALETTE                             ; 9E7C 85 66
    jsr RB6C2                                   ; 9E7E 20 C2 B6
    .word LCA5A ; Congratulations screen        ; 9E81 5A CA
    lda #$00                                    ; 9E83 A9 00
    sta $5D                                     ; 9E85 85 5D
    sta $5E                                     ; 9E87 85 5E
    lda #$FF                                    ; 9E89 A9 FF
    sta $0300                                   ; 9E8B 8D 00 03
    sta $0380                                   ; 9E8E 8D 80 03
    jsr RB695                                   ; 9E91 20 95 B6
    jsr RB689                                   ; 9E94 20 89 B6
    ldx L8B_SPEED                               ; 9E97 A6 8B
    lda LA095,x ; $08,$01,$01                   ; 9E99 BD 95 A0
    sta $06F5                                   ; 9E9C 8D F5 06
    lda #$01                                    ; 9E9F A9 01
    sta $7F                                     ; 9EA1 85 7F
    lda #$FF                                    ; 9EA3 A9 FF
    sta $51                                     ; 9EA5 85 51
    jsr R9F09                                   ; 9EA7 20 09 9F
    jsr RB352 ; Initialize $0580                ; 9EAA 20 52 B3
    lda #$70                                    ; 9EAD A9 70
    sta L38_V1_X                                ; 9EAF 85 38
    lda #$82                                    ; 9EB1 A9 82
    sta L39_V1_Y                                ; 9EB3 85 39
    lda #$5E                                    ; 9EB5 A9 5E
    sta $4F                                     ; 9EB7 85 4F
    lda #$F8                                    ; 9EB9 A9 F8
    sta $50                                     ; 9EBB 85 50
    lda #$00                                    ; 9EBD A9 00
    sta L3A_V2_X                                ; 9EBF 85 3A
    sta L3D_V3_Y                                ; 9EC1 85 3D
    loop
        jsr R9F18                               ; 9EC3 20 18 9F
        jsr RB42F                               ; 9EC6 20 2F B4
        jsr R9F70 ; tiny aliens sprite          ; 9EC9 20 70 9F
        jsr RB5B8                               ; 9ECC 20 B8 B5
        jsr RB654                               ; 9ECF 20 54 B6
        dec $51                                 ; 9ED2 C6 51
        lda $F5                                 ; 9ED4 A5 F5
        cmp #$10                                ; 9ED6 C9 10
    while_ne                                    ; 9ED8 D0 E9
L9EDA:
    lda #$00                                    ; 9EDA A9 00
    sta $7F                                     ; 9EDC 85 7F
    lda #$FF                                    ; 9EDE A9 FF
    ldx #$04                                    ; 9EE0 A2 04
    ldy #$05                                    ; 9EE2 A0 05
    jsr RB894 ; fill pages 4-5 with FF          ; 9EE4 20 94 B8
    lda #$01                                    ; 9EE7 A9 01
    sta $5D                                     ; 9EE9 85 5D
    lda #$02                                    ; 9EEB A9 02
    jsr RB8E0 ; Set mapper CHR bank 0.          ; 9EED 20 E0 B8
    lda #$03                                    ; 9EF0 A9 03
    jsr RB8F4 ; Set mapper CHR bank 1.          ; 9EF2 20 F4 B8
    jsr RB67C                                   ; 9EF5 20 7C B6
    jsr RB6A2                                   ; 9EF8 20 A2 B6
    jsr R82D1                                   ; 9EFB 20 D1 82
    lda #$9E                                    ; 9EFE A9 9E
    sta $52                                     ; 9F00 85 52
    jsr RB695                                   ; 9F02 20 95 B6
    jsr RB689                                   ; 9F05 20 89 B6
    rts                                         ; 9F08 60
.endscope

; ----------------------------------------------------------------------------
R9F09:
    ldx #$00                                    ; 9F09 A2 00
    loop
        lda LA0E5,x                             ; 9F0B BD E5 A0
        sta $0760,x                             ; 9F0E 9D 60 07
        beq break                               ; 9F11 F0 04
        inx                                     ; 9F13 E8
    forever                                     ; 9F14 4C 0B 9F
    rts                                         ; 9F17 60

; ----------------------------------------------------------------------------
; 9F18 and 9F28 are both entry points
R9F18:
    lda L8B_SPEED                               ; 9F18 A5 8B
    asl a                                       ; 9F1A 0A
    asl a                                       ; 9F1B 0A
    asl a                                       ; 9F1C 0A
    asl a                                       ; 9F1D 0A
    asl a                                       ; 9F1E 0A
    clc                                         ; 9F1F 18
    adc L96_LEVEL                               ; 9F20 65 96
    tax                                         ; 9F22 AA
    lda L9FF8,x                                 ; 9F23 BD F8 9F
    beq L9F6F ; rts                             ; 9F26 F0 47
R9F28:
    lda #$00                                    ; 9F28 A9 00
    sta $49                                     ; 9F2A 85 49
    loop
        lda $49                                 ; 9F2C A5 49
        tax                                     ; 9F2E AA
        lda $0760,x                             ; 9F2F BD 60 07
        beq break                               ; 9F32 F0 3B
        sta $4A                                 ; 9F34 85 4A
        tax                                     ; 9F36 AA
        lda LA0EF,x                             ; 9F37 BD EF A0
        sta $4B                                 ; 9F3A 85 4B
        lda $43                                 ; 9F3C A5 43
        and $4B                                 ; 9F3E 25 4B
        if_eq                                   ; 9F40 D0 0C
            lda $49                             ; 9F42 A5 49
            tax                                 ; 9F44 AA
            lda $0761,x                         ; 9F45 BD 61 07
            sec                                 ; 9F48 38
            sbc #$01                            ; 9F49 E9 01
            sta $0761,x                         ; 9F4B 9D 61 07
        end_if
        lda $4A                                 ; 9F4E A5 4A
        tax                                     ; 9F50 AA
        lda LA0E1,x                             ; 9F51 BD E1 A0
        sta L53_SPRITE_NUM                      ; 9F54 85 53
        lda $49                                 ; 9F56 A5 49
        tax                                     ; 9F58 AA
        lda $0761,x                             ; 9F59 BD 61 07
        sta L44_SPRITE_X                        ; 9F5C 85 44
        lda $0762,x                             ; 9F5E BD 62 07
        sta L45_SPRITE_Y                        ; 9F61 85 45
        jsr R88F6_SPRITE                        ; 9F63 20 F6 88
        inc $49                                 ; 9F66 E6 49
        inc $49                                 ; 9F68 E6 49
        inc $49                                 ; 9F6A E6 49
    forever                                     ; 9F6C 4C 2C 9F
L9F6F:
    rts                                         ; 9F6F 60

; ----------------------------------------------------------------------------
; Load tiny alien sprite $20 or $22 depending on $43 bit 3.
; Called once in R9E4C.
R9F70:
    lda L38_V1_X                                ; 9F70 A5 38
    sta L44_SPRITE_X                            ; 9F72 85 44
    lda L39_V1_Y                                ; 9F74 A5 39
    sta L45_SPRITE_Y                            ; 9F76 85 45
    lda $43                                     ; 9F78 A5 43
    and #$08                                    ; 9F7A 29 08
    lsr a                                       ; 9F7C 4A
    lsr a                                       ; 9F7D 4A
    clc                                         ; 9F7E 18
    adc #$20                                    ; 9F7F 69 20
    sta L53_SPRITE_NUM                          ; 9F81 85 53
    jsr R88F6_SPRITE                            ; 9F83 20 F6 88
    rts                                         ; 9F86 60

; ----------------------------------------------------------------------------
; R9BB9 routine 6.
L9F87:
.scope
    lda L0727_NUM_PLAYERS                       ; 9F87 AD 27 07
    cmp #$01                                    ; 9F8A C9 01
    if_ne                                       ; 9F8C F0 03
    else                                        ; 9F8E 4C CD 9F
        lda L8B_SPEED                           ; 9F91 A5 8B
        cmp #$02                                ; 9F93 C9 02
        beq L9FA1                               ; 9F95 F0 0A
        cmp #$01                                ; 9F97 C9 01
        beq L9FA1                               ; 9F99 F0 06
        lda $43                                 ; 9F9B A5 43
        and #$01                                ; 9F9D 29 01
        beq L9FED                               ; 9F9F F0 4C
    L9FA1:
        inc $7D                                 ; 9FA1 E6 7D
        ldx $7D                                 ; 9FA3 A6 7D
        lda LA401,x                             ; 9FA5 BD 01 A4
        cmp #$FF                                ; 9FA8 C9 FF
        if_ne                                   ; 9FAA F0 21
            and #$F0                            ; 9FAC 29 F0
            cmp #$F0                            ; 9FAE C9 F0
            if_eq                               ; 9FB0 D0 0A
                lda LA401,x                     ; 9FB2 BD 01 A4
                and #$03                        ; 9FB5 29 03
                sta $7E                         ; 9FB7 85 7E
                jmp L9FA1                       ; 9FB9 4C A1 9F
            end_if
            lda $7D                             ; 9FBC A5 7D
            and #$01                            ; 9FBE 29 01
            bne L9FED                           ; 9FC0 D0 2B
            dec $A2                             ; 9FC2 C6 A2
            lda $A2                             ; 9FC4 A5 A2
            and #$03                            ; 9FC6 29 03
            sta $A2                             ; 9FC8 85 A2
            jmp L9FED                           ; 9FCA 4C ED 9F
        end_if
    end_if

    jsr R8E8D                                   ; 9FCD 20 8D 8E
    lda #$00                                    ; 9FD0 A9 00
    sta $A2                                     ; 9FD2 85 A2
    lda #$00                                    ; 9FD4 A9 00
    sta $7D                                     ; 9FD6 85 7D
    lda #$03                                    ; 9FD8 A9 03
    sta $97                                     ; 9FDA 85 97
    jsr R90D3                                   ; 9FDC 20 D3 90
    if_ne                                       ; 9FDF F0 0C
        lda #$05                                ; 9FE1 A9 05
        sta $06F5                               ; 9FE3 8D F5 06
        jsr R8F52                               ; 9FE6 20 52 8F
        lda #$01                                ; 9FE9 A9 01
        sta $89                                 ; 9FEB 85 89
    end_if
L9FED:
    rts                                     ; 9FED 60
.endscope

; ----------------------------------------------------------------------------
; 10-byte lookup table, used by L8036
L9FEE:  .byte $21,$44,$52,$2E,$4D,$41,$52,$49   ; 9FEE 21 44 52 2E 4D 41 52 49
        .byte $4F,$21                           ; 9FF6 4F 21
; ----------------------------------------------------------------------------
; 96-byte lookup table, used by RB5B8 and others
; Indexed by L8B_SPEED * 32 + L96_LEVEL.
L9FF8:  .byte $00,$00,$00,$00,$00,$00,$00,$00   ; 9FF8 00 00 00 00 00 00 00 00
        .byte $00,$00,$00,$00,$00,$00,$00,$00   ; A000 00 00 00 00 00 00 00 00
        .byte $00,$00,$00,$00,$00,$00,$00,$00   ; A008 00 00 00 00 00 00 00 00
        .byte $00,$00,$00,$00,$00,$00,$00,$00   ; A010 00 00 00 00 00 00 00 00

        .byte $00,$00,$00,$00,$00,$00,$07,$00   ; A018 00 00 00 00 00 00 07 00
        .byte $00,$00,$00,$05,$00,$00,$00,$00   ; A020 00 00 00 05 00 00 00 00
        .byte $06,$00,$00,$00,$00,$08,$00,$00   ; A028 06 00 00 00 00 08 00 00
        .byte $00,$00,$00,$00,$00,$00,$00,$00   ; A030 00 00 00 00 00 00 00 00

        .byte $00,$00,$00,$00,$00,$00,$02,$00   ; A038 00 00 00 00 00 00 02 00
        .byte $00,$00,$00,$01,$00,$00,$00,$00   ; A040 00 00 00 01 00 00 00 00
        .byte $04,$00,$00,$00,$00,$00,$00,$00   ; A048 04 00 00 00 00 00 00 00
        .byte $00,$00,$00,$00,$00,$00,$00,$00   ; A050 00 00 00 00 00 00 00 00
; ----------------------------------------------------------------------------
; lookup table, used by RB5B8
LA058:  .byte $00,$01,$0F,$03,$07,$07,$03,$07   ; A058 00 01 0F 03 07 07 03 07
        .byte $07                               ; A060 07
; ----------------------------------------------------------------------------
; lookup table, used by RB5B8
LA061:  .byte $00,$38,$3A,$3C,$3E,$40,$42,$44,$46

; ----------------------------------------------------------------------------
; lookup table, used by RB5B8
LA06A:  .byte $00,$F0,$00,$F0,$00,$F0,$F0,$00,$00

; ----------------------------------------------------------------------------
; lookup table, used by RB5B8
LA073:  .byte $00,$00,$0F,$00,$01,$03,$00,$00,$03

; ----------------------------------------------------------------------------
; lookup table, used in RB5B8
LA07C:  .byte $00,$FF,$01,$FF,$01,$FF,$FE,$01,$01

; ----------------------------------------------------------------------------
; lookup table, used in RB43F, copied to L66_PALETTE.
LA085:  .byte $85,$85,$85,$85,$85,$85,$8A,$85
        .byte $85,$85,$8A,$85,$85,$85,$85,$85

; ----------------------------------------------------------------------------
; lookup table, used in R9E4C
LA095:  .byte $08,$01,$01

; ----------------------------------------------------------------------------
; lookup table, used in R8661 and L86CD
; PPU addresses in page $21.
; $2100 = row 8
; $2128-$2137 = row 9, col 8-23
; $2188-$2192 = row 12, col 8-18
; $21C8-$21D4 = row 14, col 8-20
; Indexed by $7F.
LA098:  .byte $00,$28,$29,$2A,$2B,$2C,$2D,$2E
        .byte $2F,$30,$31,$32,$33,$34,$35,$36
        .byte $37,$88,$89,$8A,$8B,$8C,$8E,$8F
        .byte $90,$91,$92,$95,$C8,$C9,$CA,$CB
        .byte $CC,$D4,$D3

; ----------------------------------------------------------------------------
; lookup table, used in R8661 and L86CD
LA0BB:  .byte $00,$0C,$18,$17,$10,$1B,$0A,$1D,$1E,$15,$0A,$1D,$12,$18,$17,$1C
        .byte $24,$1F,$12,$1B,$1E,$1C,$15,$0E,$1F,$0E,$15,$01,$1C,$19,$0E,$0E
        .byte $0D,$00,$FF

; ----------------------------------------------------------------------------
; lookup table, used in R9E4C, copied to L66_PALETTE.
LA0DE:  .byte $86,$84,$84
; ----------------------------------------------------------------------------
; lookup table, used in R9F18/R9F28
LA0E1:  .byte $00,$16,$17,$18

; ----------------------------------------------------------------------------
; null-terminated string, used in R9F09
LA0E5:  .byte $01,$D0,$36,$02,$30,$74,$03,$D8,$AB,$00

; ----------------------------------------------------------------------------
; lookup table, used in R9F18/R9F28
LA0EF:  .byte $00,$03,$07,$0F,$01,$16,$01,$17
        .byte $18,$19,$18,$1A,$1B,$1C,$1B,$20

; ----------------------------------------------------------------------------
; Table of 2 sprite numbers, used in L8C28, indexed by $43 bit 2.
LA0FF:  .byte $29,$14                           ; A0FF 29 14
; Table of 2 sprite numbers, used in L8C28, indexed by $43 bit 3.
LA101:  .byte $23,$13                           ; A101 23 13
; Table of 2 sprite numbers, used in L8C28, indexed by $43 bit 2.
LA103:  .byte $26,$15                           ; A103 26 15

; ----------------------------------------------------------------------------
; Table, indexed by L0727_NUM_PLAYERS, copied to L45_SPRITE_Y.
LA105:  .byte $00,$C3,$D3                       ; A105 00 C3 D3

; ----------------------------------------------------------------------------
; Table used in R886C, indexed by $61, copied to L44_SPRITE_X.
LA108:  .byte $00,$34,$B4                       ; A108 00 34 B4
; ----------------------------------------------------------------------------
; Table used in R886C, indexed by $55, copied to L44_SPRITE_X.
LA10B:  .byte $00,$34,$B4                       ; A10B 00 34 B4
; ----------------------------------------------------------------------------
; Table used in R886C, indexed by $43 bit 2, copied to L53_SPRITE_NUM.
LA10E:  .byte $06,$11                           ; A10E 06 11
        .byte $00,$40,$C0                       ; A110 00 40 C0

; ----------------------------------------------------------------------------
; Table of sprite numbers, used in L9953, indexed by $0731.
LA113:  .byte $04,$04,$05,$00                   ; A113 04 04 05 00
; ----------------------------------------------------------------------------
; Table of sprite X-coordinates, used in L9953, indexed by $0731.
LA117:  .byte $38,$70,$A7                       ; A117 38 70 A7

; ----------------------------------------------------------------------------
; lookup table, used in R89D4, indexed by L75_V1_STATE
LA11A:  .byte $00,$01,$01,$01,$00               ; A11A 00 01 01 01 00

; ----------------------------------------------------------------------------
; Table of 128 virus X-coordinates, used in R89D4, indexed by L3E_VIRUS_CYCLE.
; Viruses 2 and 3 use offsets of 21 and 42.
LA11F:  .byte $20,$22,$24,$25,$27,$28,$2A,$2B,$2C,$2D,$2E,$2F,$2F,$2F,$30,$30
        .byte $30,$30,$30,$2F,$2F,$2F,$2E,$2D,$2C,$2B,$2A,$28,$27,$25,$24,$22
        .byte $20,$1E,$1C,$1B,$19,$18,$16,$15,$14,$13,$12,$11,$11,$11,$10,$10
        .byte $10,$10,$10,$11,$11,$11,$12,$13,$14,$15,$16,$18,$19,$1B,$1C,$1E
        .byte $20,$22,$24,$25,$27,$28,$2A,$2B,$2C,$2D,$2E,$2F,$2F,$2F,$30,$30
        .byte $30,$30,$30,$2F,$2F,$2F,$2E,$2D,$2C,$2B,$2A,$28,$27,$25,$24,$22
        .byte $20,$1E,$1C,$1B,$19,$18,$16,$15,$14,$13,$12,$11,$11,$11,$10,$10
        .byte $10,$10,$10,$11,$11,$11,$12,$13,$14,$15,$16,$18,$19,$1B,$1C,$1E
; ----------------------------------------------------------------------------
; Table of 128 virus Y-coordinates, used in R89D4, indexed by L3E_VIRUS_CYCLE.
; Viruses 2 and 3 use offsets of 21 and 42.
LA19F:  .byte $AF,$AF,$AE,$AE,$AD,$AC,$AB,$AA,$A8,$A7,$A5,$A3,$A2,$A0,$9E,$9D
        .byte $9B,$99,$98,$96,$94,$93,$91,$8F,$8E,$8C,$8B,$8A,$89,$88,$88,$87
        .byte $87,$87,$88,$88,$89,$8A,$8B,$8C,$8E,$8F,$91,$93,$94,$96,$98,$99
        .byte $9B,$9D,$9E,$A0,$A2,$A3,$A5,$A7,$A8,$AA,$AB,$AC,$AD,$AE,$AE,$AF
        .byte $AF,$AF,$AE,$AE,$AD,$AC,$AB,$AA,$A8,$A7,$A5,$A3,$A2,$A0,$9E,$9D
        .byte $9B,$99,$98,$96,$94,$93,$91,$8F,$8E,$8C,$8B,$8A,$89,$88,$88,$87
        .byte $87,$87,$88,$88,$89,$8A,$8B,$8C,$8E,$8F,$91,$93,$94,$96,$98,$99
        .byte $9B,$9D,$9E,$A0,$A2,$A3,$A5,$A7,$A8,$AA,$AB,$AC,$AD,$AE,$AE,$AF

; ----------------------------------------------------------------------------
; lookup table, used by R8FF4
; score multiplier, indexed by $AD
LA21F:  .byte $01,$02,$04,$08,$10,$20,$20,$20,$20,$20,$20

; ----------------------------------------------------------------------------
; Color palette lookup table, used by R8617, indexed by L8B_SPEED.
; 0A = dark green
; 03 = dark purple
; 00 = dark gray
LA22A:  .byte $0A,$03,$00                       ; A22A 0A 03 00
; ----------------------------------------------------------------------------
; lookup table, used by R9CFF
LA22D:  .byte $01,$02,$04,$00                   ; A22D 01 02 04 00

; ----------------------------------------------------------------------------
; 12-byte table of virus y-coordinate offsets, indexed by L78_V{1,2,3}_TIMER.
; Falling animation for viruses.
LA231:  .byte $FC,$F8,$F4,$F2,$F1,$F0,$F1,$F2,$F4,$F8,$FC,$00
; ----------------------------------------------------------------------------
; lookup table, used by R82D1 (indexed by L030B_P1_SPEED * 4) and L816E (also by L038B_P2_SPEED * 4)
LA23D:  .byte $15,$18,$20,$00  ; "LOW"
        .byte $16,$0E,$0D,$00  ; "MED"
        .byte $FE,$11,$12,$00  ; " HI"
; ----------------------------------------------------------------------------
; lookup table, used by R8693 (indexed by $8b * 4)
; duplicate of LA23D
LA249:  .byte $15,$18,$20,$00  ; "LOW"
        .byte $16,$0E,$0D,$00  ; "MED"
        .byte $FF,$11,$12,$00  ; " HI"
; ----------------------------------------------------------------------------
; Table of sprite numbers, used by R89D4, indexed by L7B_VIRUS_MARCH.
; Red virus marching animation
LA255:  .byte $23,$24,$23,$25
; ----------------------------------------------------------------------------
; Table of sprite numbers, used by R89D4 and R8BE5, indexed by L7B_VIRUS_MARCH.
; Blue virus marching animation
LA259:  .byte $26,$27,$26,$28
; ----------------------------------------------------------------------------
; Table of sprite numbers, used by R89D4, indexed by L7B_VIRUS_MARCH.
; Yellow virus marching animation
LA25D:  .byte $29,$2A,$29,$2B
; ----------------------------------------------------------------------------
; lookup table, used by
LA261:  .byte $09,$0A,$09
; ----------------------------------------------------------------------------
; lookup table, used by
LA264:  .byte $04,$02,$03
; ----------------------------------------------------------------------------
; lookup table, used by L981C
LA267:  .byte $00,$A7,$B7
; ----------------------------------------------------------------------------
; Argument to RB6C2, 1-player settings screen
LA26A:  .byte $21,$88                           ; PPU address $2188 (row 12, col 8)
        .byte $02                               ; 2 bytes non-repeated
        .byte $FF,$FF
        .byte $21,$96                           ; PPU address $2196 (row 12, col 22)
        .byte $04                               ; 4 bytes non-repeated
        .byte $FF,$FF,$FF,$FF
        .byte $21,$B6                           ; PPU address $21B6 (row 13, col 22)
        .byte $04                               ; 4 bytes non-repeated
        .byte $FF,$FF,$FF,$FF
        .byte $21,$D6                           ; PPU address $21D6 (row 14, col 22)
        .byte $04                               ; 4 bytes non-repeated
        .byte $FF,$FF,$FF,$FF
        .byte $22,$28                           ; PPU address $2228 (row 17, col 8)
        .byte $02                               ; 2 bytes non-repeated
        .byte $F3,$F4
        .byte $22,$48                           ; PPU address $2248 (row 18, col 8)
        .byte $02                               ; 2 bytes non-repeated
        .byte $F5,$F6
        .byte $22,$68                           ; PPU address $2268 (row 19, col 8)
        .byte $02                               ; 2 bytes non-repeated
        .byte $FF,$FF
        .byte $FF                               ; terminator byte
; ----------------------------------------------------------------------------
; Table of sprite X-coordinates, used in R9B42, indexed by L96_LEVEL.
; X-coordinates for small pointer on options screen.
LA294:  .byte $57,$5B,$5F,$63,$67,$6B,$6F,$73
        .byte $77,$7B,$7F,$83,$87,$8B,$8F,$93
        .byte $97,$9B,$9F,$A3,$A7
; ----------------------------------------------------------------------------
; Table of sprite Y-coordinates, used in R9B42, indexed by $58.
LA2A9:  .byte $00,$00,$00,$00,$53,$62
; ----------------------------------------------------------------------------
; Table of sprite X-coordinates, used in R9B42, indexed by L8B_SPEED.
LA2AF:  .byte $58,$80,$A4
; ----------------------------------------------------------------------------
; Table of sprite Y-coordinates, used in R9B42, indexed by $58.
LA2B2:  .byte $00,$00,$00,$00,$87,$96

; ----------------------------------------------------------------------------
; Argument to RB6C2
; Screen attribute data
LA2B8:  .byte $23,$C0,$20
        .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $00,$00,$00,$00,$00,$88,$22,$00,$00,$50,$50,$50,$10,$88,$22,$00
        .byte $23,$E0,$20
        .byte $00,$05,$05,$05,$01,$00,$00,$00,$00,$55,$55,$55,$11,$00,$00,$00
        .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $FF
; ----------------------------------------------------------------------------
; Argument to RB6C2
; Screen attribute data
LA2FF:  .byte $23,$C0,$20
        .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$50,$50,$50,$10,$00,$00,$00
        .byte $00,$05,$05,$05,$01,$88,$22,$00,$00,$00,$00,$00,$00,$88,$22,$00
        .byte $23,$E0,$20
        .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$11,$00,$00,$00
        .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $FF
; ----------------------------------------------------------------------------
; Argument to RB6C2
; Screen attribute data
LA346:  .byte $23,$C0,$20
        .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$50,$50,$50,$10,$00,$00,$00
        .byte $00,$05,$05,$05,$01,$88,$22,$00,$00,$50,$50,$50,$10,$88,$22,$00
        .byte $23,$E0,$20
        .byte $00,$05,$05,$05,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $FF

; ----------------------------------------------------------------------------
; lookup table used in R8D70, indexed by L8B_SPEED
LA38D:  .byte $0F,$19,$1F                       ; A38D 0F 19 1F
; ----------------------------------------------------------------------------
; lookup table used in R9CFF
LA390:  .byte $10,$10,$10                       ; A390 10 10 10
; ----------------------------------------------------------------------------
; lookup table used in R9CFF
LA393:  .byte $02,$02,$02                       ; A393 02 02 02

; ----------------------------------------------------------------------------
; Table of PPU addresses used in R8393 (indexed by $031E×2)
LA396:  .dbyt $220E ; row 16, col 14
        .dbyt $21CE ; row 14, col 14
        .dbyt $218E ; row 12, col 14

; ----------------------------------------------------------------------------
; Table of PPU addresses used in R8393 (indexed by $039E×2)
LA39C:  .dbyt $2210 ; row 16, col 16
        .dbyt $21D0 ; row 14, col 16
        .dbyt $2190 ; row 12, col 16
        .byte $00,$04,$08,$12,$16,$20,$24,$28,$32,$36
        .byte $40,$44,$48,$52,$56,$60,$64,$68,$72,$76,$80,$84,$88,$92,$96,$30
        .byte $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$28,$28
        .byte $20,$20,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18
        .byte $18,$18

; ----------------------------------------------------------------------------
LA3DE:  .byte $09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$0A
        .byte $0A,$0B,$0B,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C
        .byte $0C,$0C,$0C

; ----------------------------------------------------------------------------
; 26-byte lookup table, used in R88B1 and L9F87 (R9BB9 routine 6)
; indexed by $7D
; sprite x-coordinates
LA401:  .byte $BE,$F1,$BE,$BC,$B8,$B4,$F2,$B0,$AC,$A8,$A4,$A0,$9E,$98,$94,$90
        .byte $8C,$88,$84,$80,$7C,$7A,$78,$F0,$78,$FF
; ----------------------------------------------------------------------------
; used in R88B1
; indexed by $7D
; sprite y-coordinates
LA41B:  .byte $45,$00,$40,$36,$2E,$27,$00,$21,$1E,$1B,$19,$18,$18,$1A,$1C,$1F
        .byte $23,$28,$2D,$34,$3C,$43,$4A,$00,$4F,$F8,$01,$08,$FF,$00,$00,$07
        .byte $0F,$17,$02,$02,$02,$02,$02,$02,$02,$02,$03,$03,$03,$03,$03,$03
        .byte $03,$03,$04,$04,$04,$04,$04,$04,$04,$04
; ----------------------------------------------------------------------------
; Used in R90D3, indexed by $A6-2.
LA455:  .byte $00,$FF,$FF                       ; A455 00 FF FF
; ----------------------------------------------------------------------------
; Used in R90D3, indexed by $A6-2.
LA458:  .byte $F9,$F9,$FA                       ; A458 F9 F9 FA
; ----------------------------------------------------------------------------
; Used in R90D3, indexed by $A6-2.
LA45B:  .byte $00,$FF,$FF,$60,$68,$70,$78,$80,$88,$90,$98,$C0,$C1,$C2,$B0,$B1
        .byte $B2,$08,$F8,$01,$FF,$50,$40,$70,$60
; ----------------------------------------------------------------------------
; lookup table, 16 bytes, indexed by $86 or ...
LA474:  .byte $78,$70,$68,$60,$58,$50,$48,$40   ; A474 78 70 68 60 58 50 48 40
        .byte $38,$30,$28,$20,$18,$10,$08,$00   ; A47C 38 30 28 20 18 10 08 00
; ----------------------------------------------------------------------------
; lookup table, used in R871F
LA484:  .byte $C8,$C0,$B8,$B0,$A8,$A0,$98,$90,$88,$80,$78,$70,$68,$60,$58,$50

; ----------------------------------------------------------------------------
; 12-byte lookup table
; used as offsets into table LA4A0.
LA494:  .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$09,$12,$1B
; ----------------------------------------------------------------------------
; lookup table, used in R8772
; Sprite data: Y-coord, tile index, flags, X-coord
LA4A0:  .byte $00,$60,$02,$00,$00,$70,$02,$08,$FF ; Pill L-R, (0,0) and (+8,0)
        .byte $00,$50,$02,$00,$F8,$40,$02,$00,$FF ; Pill D-U, (0,0) and (0,-8)
        .byte $00,$70,$02,$08,$00,$60,$02,$00,$FF ; Pill R-L, (+8,0) and (0,0)
        .byte $F8,$40,$02,$00,$00,$50,$02,$00,$FF ; Pill U-D, (-8,0) and (0,0)
; ----------------------------------------------------------------------------
LA4C4:  .byte $00,$01,$00,$00,$F8,$00,$00,$00,$FF,$00,$01,$00,$F8,$00,$08,$00
        .byte $FF,$00,$01,$02,$F0,$F8,$00,$08

; ----------------------------------------------------------------------------
; lookup table, used in R8F52
LA4DC:  .byte $00,$01,$63,$63,$00,$F8,$63,$63,$01,$00,$63,$63,$F8,$00,$63,$63
        .byte $FF,$00,$01,$63,$08,$00,$F8,$63,$01,$00,$FF,$63,$F8,$00,$08,$63
        .byte $FF,$00,$01,$02,$08,$00,$F8,$F0,$02,$01,$00,$FF,$F0,$F8,$00,$08

; ----------------------------------------------------------------------------
LA50C:  .byte $60,$70,$00,$00,$50,$40,$00,$00,$70,$60,$00,$00,$40,$50,$00,$00
        .byte $60,$A0,$70,$00,$50,$90,$40,$00,$70,$A0,$60,$00,$40,$90,$50,$00
        .byte $60,$A0,$A0,$70,$50,$90,$90,$40,$70,$A0,$A0,$60,$40,$90,$90,$50
        .byte $47,$57,$67,$77,$87,$97,$A7,$01,$02

; ----------------------------------------------------------------------------
LA545:  .byte $00,$00,$00,$00,$80,$00,$11,$13,$15,$17,$10,$12,$14,$16,$09,$0B
        .byte $0D,$0F,$08,$0A,$0C,$0E,$10,$12,$14,$16,$11,$13,$15,$17,$08,$0A
        .byte $0C,$0E,$09,$0B,$0D,$0F

; ----------------------------------------------------------------------------
; Argument to RB6C2
; Palette RAM indexes
LA56B:  .byte $3F,$00,$20
        .byte $0F,$31,$2C,$0C,$0F,$32,$28,$0C,$0F,$28,$15,$21,$0F,$00,$22,$0C
        .byte $0F,$37,$30,$18,$0F,$28,$15,$0F,$0F,$28,$15,$21,$0F,$28,$21,$0F
        .byte $FF
; ----------------------------------------------------------------------------
; Argument to RB6C2
; Palette RAM indexes
LA58F:  .byte $3F,$00,$20
        .byte $0F,$0A,$1A,$11,$0F,$30,$28,$11,$0F,$0A,$1A,$15,$0F,$30,$28,$15
        .byte $0F,$37,$30,$18,$0F,$30,$15,$0C,$0F,$30,$2C,$0C,$0F,$38,$21,$0F
        .byte $FF
; ----------------------------------------------------------------------------
; Argument to RB6C2
; Palette RAM indexes
LA5B3:  .byte $3F,$00,$20
        .byte $0F,$30,$27,$15,$0F,$30,$17,$0F,$0F,$30,$29,$1A,$0F,$30,$0A,$0F
        .byte $0F,$30,$27,$15,$0F,$30,$17,$0F,$0F,$30,$29,$1A,$0F,$29,$27,$21
        .byte $FF
; ----------------------------------------------------------------------------
; Argument to RB6C2
; Palette RAM indexes
LA5D7:  .byte $3F,$00,$20
        .byte $0F,$31,$2C,$0C,$0F,$32,$28,$0C,$0F,$28,$15,$21,$0F,$00,$22,$0C
        .byte $0F,$37,$30,$18,$0F,$28,$15,$0F,$0F,$28,$15,$21,$0F,$28,$21,$0F
        .byte $FF
; ----------------------------------------------------------------------------
; Argument to RB6C2
; Palette RAM indexes
LA5FB:  .byte $3F,$00,$20
        .byte $22,$1A,$0A,$28,$22,$30,$0F,$0F,$22,$28,$15,$21,$22,$08,$18,$0F
        .byte $22,$27,$15,$3C,$22,$30,$10,$0F,$22,$28,$15,$0F,$22,$35,$29,$0F
        .byte $FF
; ----------------------------------------------------------------------------
; Argument to RB6C2
; Palette RAM indexes
LA61F:  .byte $3F,$00,$20
        .byte $02,$0F,$0F,$0F,$02,$02,$0F,$0F,$02,$28,$15,$21,$02,$08,$18,$0F
        .byte $02,$0F,$0F,$0F,$02,$30,$10,$0F,$02,$28,$15,$0F,$02,$10,$00,$0F
        .byte $FF
; ----------------------------------------------------------------------------
; Argument to RB6C2
; Palette RAM indexes
LA643:  .byte $3F,$00,$20
        .byte $0F,$0F,$0F,$0F,$0F,$30,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$08,$18,$0F
        .byte $0F,$0F,$0F,$0F,$0F,$30,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F
        .byte $FF
; ----------------------------------------------------------------------------
; Argument to RB6C2
; Palette RAM indexes (sprite palette only)
LA667:  .byte $3F,$10                           ; PPU address $3F10
        .byte $10                               ; 16 non-repeated bytes
        .byte $02,$28,$15,$21
        .byte $02,$02,$10,$0F
        .byte $02,$28,$15,$0F
        .byte $02,$10,$00,$0F
        .byte $FF                               ; terminator byte
; ----------------------------------------------------------------------------
; Argument to RB6C2
; Palette RAM indexes
LA67B:  .byte $3F,$00,$20
        .byte $23,$19,$09,$18,$23,$30,$0F,$0F,$23,$28,$15,$21,$23,$08,$18,$0F
        .byte $23,$28,$16,$2C,$23,$10,$00,$0F,$23,$28,$15,$21,$23,$0F,$0F,$0F
        .byte $FF
; ----------------------------------------------------------------------------
; Argument to RB6C2
; Palette RAM indexes
LA69F:  .byte $3F,$00,$20
        .byte $13,$0A,$0F,$08,$13,$30,$0F,$0F,$13,$28,$15,$21,$13,$08,$18,$0F
        .byte $13,$08,$06,$1C,$13,$00,$21,$02,$13,$28,$15,$21,$13,$0F,$0F,$0F
        .byte $FF
; ----------------------------------------------------------------------------
; Argument to RB6C2
; Palette RAM indexes
LA6C3:  .byte $3F,$00,$20
        .byte $23,$19,$09,$18,$23,$30,$0F,$0F,$23,$28,$15,$21,$23,$08,$18,$0F
        .byte $23,$28,$16,$2C,$23,$10,$00,$0F,$23,$28,$15,$21,$23,$0F,$0F,$0F
        .byte $FF
; ----------------------------------------------------------------------------
; Argument to RB6C2
; Palette RAM indexes
LA6E7:  .byte $3F,$00,$10
        .byte $02,$0F,$0F,$0F,$02,$30,$0F,$0F,$02,$28,$15,$21,$02,$08,$18,$0F
        .byte $FF

; ----------------------------------------------------------------------------
; lookup table, used in R871F
LA6FB:  .byte $60,$60,$20,$A0,$C0,$F8,$6E,$82
        .byte $00,$00,$30,$00,$00,$01,$00,$00
        .byte $00,$08,$00,$00,$00,$12,$00,$00
        .byte $00,$30,$00,$00

; ----------------------------------------------------------------------------
; array of pairs of bytes, used by R8321
LA717:  .byte $21,$4C,$21,$6C,$21,$8C,$21,$AC
        .byte $21,$CC,$21,$EC,$22,$0C,$22,$2C
        .byte $22,$4C,$22,$6C,$22,$8C,$22,$AC
        .byte $22,$CC,$22,$EC,$23,$0C,$23,$2C

; ----------------------------------------------------------------------------
; array of pairs of bytes, used by R8321
LA737:  .byte $21,$44,$21,$64,$21,$84,$21,$A4
        .byte $21,$C4,$21,$E4,$22,$04,$22,$24
        .byte $22,$44,$22,$64,$22,$84,$22,$A4
        .byte $22,$C4,$22,$E4,$23,$04,$23,$24

; ----------------------------------------------------------------------------
; array of pairs of bytes, used by R8321
LA757:  .byte $21,$54,$21,$74,$21,$94,$21,$B4
        .byte $21,$D4,$21,$F4,$22,$14,$22,$34
        .byte $22,$54,$22,$74,$22,$94,$22,$B4
        .byte $22,$D4,$22,$F4,$23,$14,$23,$34

; ----------------------------------------------------------------------------
; lookup table, used in multiple places: R8393, R8508, R86AD, R87A2
; BCD table 00-29
LA777:  .byte $00,$01,$02,$03,$04,$05,$06,$07
        .byte $08,$09,$10,$11,$12,$13,$14,$15
        .byte $16,$17,$18,$19,$20,$21,$22,$23
        .byte $24,$25,$26,$27,$28,$29

; ----------------------------------------------------------------------------
; lookup table, used by R8D70, indexed by LA38D,x + $A0
LA795:  .byte $45,$43,$41,$3F,$3D,$3B,$39,$37
        .byte $35,$33,$31,$2F,$2D,$2B,$29,$27
        .byte $25,$23,$21,$1F,$1D,$1B,$19,$17
        .byte $15,$13,$12,$11,$10,$0F,$0E,$0D
        .byte $0C,$0B,$0A,$09,$09,$08,$08,$07
        .byte $07,$06,$06,$05,$05,$05,$05,$05
        .byte $05,$05,$05,$05,$05,$05,$05,$04
        .byte $04,$04,$04,$04,$03,$03,$03,$03
        .byte $03,$02,$02,$02,$02,$02,$01,$01
        .byte $01,$01,$01,$01,$01,$01,$01,$01
        .byte $00,$01,$02,$03,$04,$05,$06,$03

; ----------------------------------------------------------------------------
; lookup table, used by R9CFF
LA7ED:  .byte $00,$01,$02,$02,$01,$00,$00,$01
        .byte $02,$02,$01,$00,$00,$01,$02,$01

; ----------------------------------------------------------------------------
; lookup table, used by R8E8D
LA7FD:  .byte $00,$00,$00,$01,$01,$01,$02,$02,$02

; ----------------------------------------------------------------------------
; lookup table, used by R8E8D
LA806:  .byte $00,$01,$02,$00,$01,$02,$00,$01,$02

; ----------------------------------------------------------------------------
; 36-byte null-terminated string, used by R9691
LA80F:  .byte $8B,$8C,$8C,$8C,$8C,$8C,$8C,$8D,$8E
        .byte $FE,$FE,$FE,$FE,$FE,$FE,$8F,$8E,$FE
        .byte $0D,$1B,$0A,$20,$FE,$8F,$8E,$FE,$FE
        .byte $FE,$FE,$FE,$FE,$8F,$ED,$EE,$EE,$EE
        .byte $EE,$EE,$EE,$EF,$00

; ----------------------------------------------------------------------------
; 50-byte null-terminated string, used by R96D4
LA838:  .byte $8B,$8C,$8C,$8C,$8C,$8C,$8C,$8D,$8E
        .byte $FE,$FE,$FE,$FE,$FE,$FE,$8F,$8E,$FE
        .byte $10,$0A,$16,$0E,$FE,$8F,$8E,$FE,$FE
        .byte $FE,$FE,$FE,$FE,$8F,$8E,$FE,$18,$1F
        .byte $0E,$1B,$FE,$8F,$8E,$FE,$FE,$FE,$FE
        .byte $FE,$FE,$8F,$ED,$EE,$EE,$EE,$EE,$EE
        .byte $EE,$EF,$00

; ----------------------------------------------------------------------------
; 80-byte null-terminated string, used by RB337
; Copied to $0400-$044f or $0500-$054f
LA871:  .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
        .byte $8B,$8C,$8C,$8C,$8C,$8C,$8C,$8D
        .byte $8E,$FE,$FE,$FE,$FE,$FE,$FE,$8F
        .byte $8E,$1C,$1D,$0A,$10,$0E,$FE,$8F
        .byte $8E,$FE,$0C,$15,$0E,$0A,$1B,$8F
        .byte $8E,$FE,$FE,$FE,$FE,$FE,$FE,$8F
        .byte $8E,$1D,$1B,$22,$FE,$FE,$FE,$8F
        .byte $8E,$FE,$FE,$17,$0E,$21,$1D,$8F
        .byte $8E,$FE,$FE,$FE,$FE,$FE,$FE,$8F
        .byte $ED,$EE,$EE,$EE,$EE,$EE,$EE,$EF
        .byte $00

; ----------------------------------------------------------------------------
; Array of 75 pointers to strings, indexed by L53_SPRITE_NUM * 2.
; Sprite data used in R88F6_SPRITE.
LA8C2:
.scope
        ; 00
        .word LA958, LA96D, LA96D, LA97A
        .word LA987, LA9C8, LA9F9, LAA26
        .word LAA67, LAAA4, LAAE1, LAB1E
        .word LAB63, LABA0, LABAD, LABBA
        ; 10
        .word LABC3, LABD8, LAC05, LAC05
        .word LAC2A, LAC4F, LAC74, LAC9D
        .word LACB6, LACBF, LACBF, LACBF
        .word LACBF, LACBF, LACC4, LACC9
        ; 20
        .word LACC9, LACD6, LACDB, LACE8
        .word LAD0D, LAD32, LAD57, LAD7C
        .word LADA1, LADC6, LADEB, LAE10
        .word LAE35, LAE56, LAE77, LAE98
        ; 30
        .word LAEB9, LAEDA, LAEFB, LAF44
        .word LAF65, LAFD6, LAFE7, LAFF8
        .word LB029, LB042, LB05B, LB074
        .word LB08D, LB08D, LB0B6, LB0D7
        ; 40
        .word LB0F8, LB10D, LB122, LB13B
        .word LB15C, LB175, LB18E, LB1CB
        .word LB208, LB23D, LB246

; 4 bytes of sprite attributes:
; - Y position of top of sprite
; - Tile index number
; - Attribute flags: v-flip, h-flip, priority, palette
; - X position of left side of sprite

; Sprite $00: Pause (page 2)
; 0A 0B 0C 0D 0E
LA958:  .byte $00,$0A,$00,$00
        .byte $00,$0B,$00,$08
        .byte $00,$0C,$00,$10
        .byte $00,$0D,$00,$18
        .byte $00,$0E,$00,$20
        .byte $80
; Sprite $01/$02: slider pointer (page 5)
; F0 F1 F2
LA96D:  .byte $00,$F0,$03,$00
        .byte $00,$F1,$03,$08
        .byte $00,$F2,$03,$10
        .byte $80
; Sprite $03: slider pointer (v-flipped)
; F0 F1 F2
LA97A:  .byte $00,$F0,$83,$00
        .byte $00,$F1,$83,$08
        .byte $00,$F2,$83,$10
        .byte $80
; Sprite $04: 7x3 box (page 5)
; 3F 2F 2F 2F 2F 2F 5F
; 2E                2E
; 4F 2F 2F 2F 2F 2F 6F
LA987:  .byte $00,$3F,$03,$00,$00,$2F,$03,$08,$00,$2F,$03,$10,$00,$2F,$03,$18
        .byte $00,$2F,$03,$20,$00,$2F,$03,$28,$00,$5F,$03,$30,$08,$2E,$03,$00
        .byte $08,$2E,$03,$30,$10,$4F,$03,$00,$10,$2F,$03,$08,$10,$2F,$03,$10
        .byte $10,$2F,$03,$18,$10,$2F,$03,$20,$10,$2F,$03,$28,$10,$6F,$03,$30
        .byte $80
; Sprite $05: 5x3 box (page 5)
; 3F 2F 2F 2F 5F
; 2E          2E
; 4F 2F 2F 2F 6F
LA9C8:  .byte $00,$3F,$03,$00,$00,$2F,$03,$08,$00,$2F,$03,$10,$00,$2F,$03,$18
        .byte $00,$5F,$03,$20,$08,$2E,$03,$00,$08,$2E,$03,$20,$10,$4F,$03,$00
        .byte $10,$2F,$03,$08,$10,$2F,$03,$10,$10,$2F,$03,$18,$10,$6F,$03,$20
        .byte $80
; Sprite $06: Red virus with arm raised (page 2)
; 20 21 84 83
; 22 23 94 93
;    24 A4 A3
LA9F9:  .byte $00,$20,$01,$00,$00,$21,$01,$08,$00,$84,$01,$10,$00,$83,$41,$18
        .byte $08,$22,$01,$00,$08,$23,$01,$08,$08,$94,$01,$10,$08,$93,$41,$18
        .byte $10,$24,$01,$08,$10,$A4,$01,$10,$10,$A3,$41,$18,$80
; Sprite $07: Big X in a box (page 2)
; 10 11 11 10 (bottom v-flipped, right side h-flipped)
; 12 13 13 12
; 12 13 13 12
; 10 11 11 10
LAA26:  .byte $E0,$10,$01,$F8,$E0,$11,$01,$00,$E0,$11,$41,$08,$E0,$10,$41,$10
        .byte $E8,$12,$01,$F8,$E8,$13,$01,$00,$E8,$13,$41,$08,$E8,$12,$41,$10
        .byte $F0,$12,$81,$F8,$F0,$13,$81,$00,$F0,$13,$C1,$08,$F0,$12,$C1,$10
        .byte $F8,$10,$81,$F8,$F8,$11,$81,$00,$F8,$11,$C1,$08,$F8,$10,$C1,$10
        .byte $80
; Sprite $08: open-mouth mario (page 2)
; 67 68 69
; 15 16 17
; 18 19 1A
; 1B 1C 1D
; 30 31 32
LAA67:  .byte $00,$67,$00,$00,$00,$68,$00,$08,$00,$69,$00,$10,$08,$15,$00,$00
        .byte $08,$16,$00,$08,$08,$17,$00,$10,$10,$18,$00,$00,$10,$19,$00,$08
        .byte $10,$1A,$00,$10,$18,$1B,$00,$00,$18,$1C,$00,$08,$18,$1D,$00,$10
        .byte $20,$30,$00,$00,$20,$31,$00,$08,$20,$32,$00,$10,$80
; Sprite $09: open-mouth, arm-raised mario (page 2)
; 1E 68 69
; 2E 16 17
; 3E 19 1A
; 4E 1C 1D
; 30 31 32
LAAA4:  .byte $00,$1E,$00,$00,$00,$68,$00,$08,$00,$69,$00,$10
        .byte $08,$2E,$00,$00,$08,$16,$00,$08,$08,$17,$00,$10
        .byte $10,$3E,$00,$00,$10,$19,$00,$08,$10,$1A,$00,$10
        .byte $18,$4E,$00,$00,$18,$1C,$00,$08,$18,$1D,$00,$10
        .byte $20,$30,$00,$00,$20,$31,$00,$08,$20,$32,$00,$10,$80
; Sprite $0A: side, arm high mario (page 2)
; 33 34 35
; 43 44 45
; 53 54 55
; 63 64 65
; 73 74 75
LAAE1:  .byte $00,$33,$00,$00,$00,$34,$00,$08,$00,$35,$00,$10
        .byte $08,$43,$00,$00,$08,$44,$00,$08,$08,$45,$00,$10
        .byte $10,$53,$00,$00,$10,$54,$00,$08,$10,$55,$00,$10
        .byte $18,$63,$00,$00,$18,$64,$00,$08,$18,$65,$00,$10
        .byte $20,$73,$00,$00,$20,$74,$00,$08,$20,$75,$00,$10,$80
LAB1E:  .byte $00,$36,$00,$00,$00,$34,$00,$08,$00,$35,$00,$10,$08,$66,$00,$F8
        .byte $08,$46,$00,$00,$08,$44,$00,$08,$08,$45,$00,$10,$10,$76,$00,$F8
        .byte $10,$56,$00,$00,$10,$54,$00,$08,$10,$55,$00,$10,$18,$63,$00,$00
        .byte $18,$64,$00,$08,$18,$65,$00,$10,$20,$73,$00,$00,$20,$74,$00,$08
        .byte $20,$75,$00,$10,$80
LAB63:  .byte $00,$36,$00,$00,$00,$34,$00,$08,$00,$35,$00,$10,$08,$37,$00,$00
        .byte $08,$44,$00,$08,$08,$45,$00,$10,$10,$47,$00,$00,$10,$54,$00,$08
        .byte $10,$55,$00,$10,$18,$57,$00,$00,$18,$64,$00,$08,$18,$65,$00,$10
        .byte $20,$73,$00,$00,$20,$74,$00,$08,$20,$75,$00,$10,$80
LABA0:  .byte $00,$15,$00,$00,$00,$18,$00,$08,$00,$20,$00,$10,$80
LABAD:  .byte $00,$16,$00,$00,$00,$0E,$00,$08,$00,$0D,$00,$10,$80
LABBA:  .byte $00,$11,$00,$00,$00,$12,$00,$08,$80
LABC3:  .byte $00,$0D,$00,$00,$00,$0F,$00,$08,$00,$0B,$00,$10,$00,$14,$00,$18
        .byte $00,$0F,$00,$20,$80
; Sprite $11: red virus
; 20 2B 39 38
; 22 2C 49 48
;    2D 59 58
LABD8:  .byte $00,$20,$01,$00,$00,$2B,$01,$08,$00,$39,$01,$10,$00,$38,$41,$18
        .byte $08,$22,$01,$00,$08,$2C,$01,$08,$08,$49,$01,$10,$08,$48,$41,$18
        .byte $10,$2D,$01,$08,$10,$59,$01,$10,$10,$58,$41,$18,$80
LAC05:  .byte $00,$38,$01,$00,$00,$39,$01,$08,$00,$38,$41,$10,$08,$48,$01,$00
        .byte $08,$49,$01,$08,$08,$48,$41,$10,$10,$58,$01,$00,$10,$59,$01,$08
        .byte $10,$58,$41,$10,$80
LAC2A:  .byte $00,$3A,$03,$00,$00,$3B,$03,$08,$00,$3A,$43,$10,$08,$4A,$03,$00
        .byte $08,$4B,$03,$08,$08,$4A,$43,$10,$10,$5A,$03,$00,$10,$5B,$03,$08
        .byte $10,$5A,$43,$10,$80
LAC4F:  .byte $00,$3C,$03,$00,$00,$3D,$03,$08,$00,$3C,$43,$10,$08,$4C,$03,$00
        .byte $08,$4D,$03,$08,$08,$4C,$43,$10,$10,$5C,$03,$00,$10,$5D,$03,$08
        .byte $10,$5C,$43,$10,$80
LAC74:  .byte $00,$20,$21,$00,$00,$21,$21,$08,$00,$22,$21,$10,$00,$23,$21,$18
        .byte $00,$24,$21,$20,$08,$30,$21,$00,$08,$31,$21,$08,$08,$32,$21,$10
        .byte $08,$33,$21,$18,$08,$34,$21,$20,$80
LAC9D:  .byte $00,$03,$21,$00,$00,$04,$21,$08,$00,$05,$21,$10,$08,$13,$21,$00
        .byte $08,$14,$21,$08,$08,$15,$21,$10,$80
LACB6:  .byte $00,$44,$21,$00,$00,$45,$21,$08,$80
; Sprite $19-$1D:
; 45
LACBF:  .byte $00,$45,$00,$00,$80
; Sprite $1E:
; 45 (v-flip)
LACC4:  .byte $00,$45,$80,$00,$80
; Sprite $20: Tiny aliens (page 7)
; 00  01  02
LACC9:  .byte $00,$00,$00,$00,$00,$01,$00,$0A,$00,$02,$00,$14,$80
; Sprite $21
; 29
LACD6:  .byte $00,$29,$01,$00,$80
; Sprite $22: Tiny aliens (page 7)
; 10  11  12
LACDB:  .byte $00,$10,$00,$00,$00,$11,$00,$0A,$00,$12,$00,$14,$80
; Sprite $23: Red virus, symmetrical (page 2)
; 83 84 83
; 93 94 93
; A3 A4 A3
LACE8:  .byte $00,$83,$01,$00,$00,$84,$01,$08,$00,$83,$41,$10
        .byte $08,$93,$01,$00,$08,$94,$01,$08,$08,$93,$41,$10
        .byte $10,$A3,$01,$00,$10,$A4,$01,$08,$10,$A3,$41,$10,$80
LAD0D:  .byte $00,$85,$01,$00,$00,$86,$01,$08,$00,$87,$01,$10,$08,$95,$01,$00
        .byte $08,$96,$01,$08,$08,$97,$01,$10,$10,$A5,$01,$00,$10,$A6,$01,$08
        .byte $10,$A7,$01,$10,$80
LAD32:  .byte $00,$87,$41,$00,$00,$86,$41,$08,$00,$85,$41,$10,$08,$97,$41,$00
        .byte $08,$96,$41,$08,$08,$95,$41,$10,$10,$A7,$41,$00,$10,$A6,$41,$08
        .byte $10,$A5,$41,$10,$80
; Sprite $26: Blue virus, symmetrical (page 2)
; B3 B4 B3
; C3 C4 C3
; D3 D4 D3
LAD57:  .byte $00,$B3,$03,$00,$00,$B4,$03,$08,$00,$B3,$43,$10
        .byte $08,$C3,$03,$00,$08,$C4,$03,$08,$08,$C3,$43,$10
        .byte $10,$D3,$03,$00,$10,$D4,$03,$08,$10,$D3,$43,$10,$80
LAD7C:  .byte $00,$B5,$03,$00,$00,$B6,$03,$08,$00,$B7,$03,$10,$08,$C5,$03,$00
        .byte $08,$C6,$03,$08,$08,$C7,$03,$10,$10,$D5,$03,$00,$10,$D6,$03,$08
        .byte $10,$D7,$03,$10,$80
LADA1:  .byte $00,$B7,$43,$00,$00,$B6,$43,$08,$00,$B5,$43,$10,$08,$C7,$43,$00
        .byte $08,$C6,$43,$08,$08,$C5,$43,$10,$10,$D7,$43,$00,$10,$D6,$43,$08
        .byte $10,$D5,$43,$10,$80
; Sprite $29: Yellow virus, symmetrical (page 2)
; 88 89 88
; 98 99 98
; A8 A9 A8
LADC6:  .byte $00,$88,$03,$00,$00,$89,$03,$08,$00,$88,$43,$10
        .byte $08,$98,$03,$00,$08,$99,$03,$08,$08,$98,$43,$10
        .byte $10,$A8,$03,$00,$10,$A9,$03,$08,$10,$A8,$43,$10,$80
; Sprite $2A: Yellow virus, marching R (page 2)
; 8A 8B 8C
; 9A 9B 9C
; AA AB AC
LADEB:  .byte $00,$8A,$03,$00,$00,$8B,$03,$08,$00,$8C,$03,$10
        .byte $08,$9A,$03,$00,$08,$9B,$03,$08,$08,$9C,$03,$10
        .byte $10,$AA,$03,$00,$10,$AB,$03,$08,$10,$AC,$03,$10,$80
; Sprite $2B: Yellow virus, marching L (page 2)
; 8C 8B 8A
; 9C 9B 9A
; AC AB AA
LAE10:  .byte $00,$8C,$43,$00,$00,$8B,$43,$08,$00,$8A,$43,$10
        .byte $08,$9C,$43,$00,$08,$9B,$43,$08,$08,$9A,$43,$10
        .byte $10,$AC,$43,$00,$10,$AB,$43,$08,$10,$AA,$43,$10,$80
; Sprite $2C: Red virus fussy
; BB BC
; CB CC CD
; DB DC DD
LAE35:  .byte $00,$BB,$01,$00,$00,$BC,$01,$08
        .byte $08,$CB,$01,$00,$08,$CC,$01,$08,$08,$CD,$01,$10
        .byte $10,$DB,$01,$00,$10,$DC,$01,$08,$10,$DD,$01,$10,$80
LAE56:  .byte $00,$BC,$41,$08,$00,$BB,$41,$10,$08,$CD,$41,$00,$08,$CC,$41,$08
        .byte $08,$CB,$41,$10,$10,$DD,$41,$00,$10,$DC,$41,$08,$10,$DB,$41,$10
        .byte $80
LAE77:  .byte $00,$B8,$03,$00,$00,$B9,$03,$08,$08,$C8,$03,$00,$08,$C9,$03,$08
        .byte $08,$CA,$03,$10,$10,$D8,$03,$00,$10,$D9,$03,$08,$10,$DA,$03,$10
        .byte $80
LAE98:  .byte $00,$B9,$43,$08,$00,$B8,$43,$10,$08,$CA,$43,$00,$08,$C9,$43,$08
        .byte $08,$C8,$43,$10,$10,$DA,$43,$00,$10,$D9,$43,$08,$10,$D8,$43,$10
        .byte $80
; Sprite $30: yellow virus fussy
; 8D 8E
; 9D 9E 9F
; AD AE AF
LAEB9:  .byte $00,$8D,$03,$00,$00,$8E,$03,$08,$08,$9D,$03,$00,$08,$9E,$03,$08
        .byte $08,$9F,$03,$10,$10,$AD,$03,$00,$10,$AE,$03,$08,$10,$AF,$03,$10
        .byte $80
; Sprite $31: yellow virus fussy (h-flip)
;    8E 8D
; 9F 9E 9D
; AF AE AD
LAEDA:  .byte $00,$8E,$43,$08,$00,$8D,$43,$10,$08,$9F,$43,$00,$08,$9E,$43,$08
        .byte $08,$9D,$43,$10,$10,$AF,$43,$00,$10,$AE,$43,$08,$10,$AD,$43,$10
        .byte $80
; Sprite $32: shrugging mario
;    67 68 69
;    6A 6B 6C
; 77 78 79 7A 7B
;    7C 7D 7E 7F
;    73 74 75
LAEFB:  .byte $00,$67,$00,$00,$00,$68,$00,$08,$00,$69,$00,$10,$08,$6A,$00,$00
        .byte $08,$6B,$00,$08,$08,$6C,$00,$10,$10,$77,$00,$F8,$10,$78,$00,$00
        .byte $10,$79,$00,$08,$10,$7A,$00,$10,$10,$7B,$00,$18,$18,$7C,$00,$00
        .byte $18,$7D,$00,$08,$18,$7E,$00,$10,$18,$7F,$00,$18,$20,$73,$00,$00
        .byte $20,$74,$00,$08,$20,$75,$00,$10,$80
; Sprite $33: 8-way lines
; 90 91 90'
; 92    92'
; 90`91`90"
LAF44:  .byte $00,$90,$00,$00,$00,$91,$00,$08,$00,$90,$40,$10,$08,$92,$00,$00
        .byte $08,$92,$40,$10,$10,$90,$80,$00,$10,$91,$80,$08,$10,$90,$C0,$10
        .byte $80
; Sprite $34
;       0A 0B 0C 0D
; 18 19 1A 1B 1C 1D 1E 1F
; 28 29 2A 2B 2C 2D 2E 2F
; 38 39 3A 3B 3C 3D 3E 3F
LAF65:  .byte $00,$0A,$22,$10,$00,$0B,$22,$18,$00,$0C,$22,$20,$00,$0D,$22,$28
        .byte $08,$18,$22,$00,$08,$19,$22,$08,$08,$1A,$22,$10,$08,$1B,$22,$18
        .byte $08,$1C,$22,$20,$08,$1D,$22,$28,$08,$1E,$22,$30,$08,$1F,$22,$38
        .byte $10,$28,$22,$00,$10,$29,$22,$08,$10,$2A,$22,$10,$10,$2B,$22,$18
        .byte $10,$2C,$22,$20,$10,$2D,$22,$28,$10,$2E,$22,$30,$10,$2F,$22,$38
        .byte $18,$38,$22,$00,$18,$39,$22,$08,$18,$3A,$22,$10,$18,$3B,$22,$18
        .byte $18,$3C,$22,$20,$18,$3D,$22,$28,$18,$3E,$22,$30,$18,$3F,$22,$38
        .byte $80
LAFD6:  .byte $20,$4A,$22,$10,$20,$4B,$22,$18,$20,$4C,$22,$20,$20,$4D,$22,$28
        .byte $80
LAFE7:  .byte $20,$5A,$22,$10,$20,$5B,$22,$18,$20,$5C,$22,$20,$20,$5D,$22,$28
        .byte $80
LAFF8:  .byte $28,$07,$02,$18,$28,$07,$42,$20,$30,$17,$02,$18,$30,$17,$42,$20
        .byte $38,$26,$02,$10,$38,$27,$02,$18,$38,$27,$42,$20,$38,$26,$42,$28
        .byte $40,$36,$02,$10,$40,$37,$02,$18,$40,$37,$42,$20,$40,$36,$42,$28
        .byte $80
LB029:  .byte $00,$54,$23,$00,$00,$55,$23,$08,$00,$56,$23,$10,$08,$64,$23,$00
        .byte $08,$65,$23,$08,$08,$66,$23,$10,$80
LB042:  .byte $00,$54,$23,$00,$00,$55,$23,$08,$00,$57,$23,$10,$08,$64,$23,$00
        .byte $08,$65,$23,$08,$08,$66,$23,$10,$80
LB05B:  .byte $00,$72,$63,$00,$00,$71,$63,$08,$00,$70,$63,$10,$08,$82,$63,$00
        .byte $08,$81,$63,$08,$08,$80
        .byte $63,$10,$80                       ; B071
LB074:  .byte $00,$72,$63,$00,$00,$71,$63,$08,$00,$70,$63,$10,$08,$92,$63,$00
        .byte $08,$91,$63,$08,$08,$90,$63,$10,$80
LB08D:  .byte $00,$A0,$21,$00,$00,$A1,$21,$08,$00,$A2,$21,$10,$08,$B0,$21,$00
        .byte $08,$B1,$21,$08,$08,$B2,$21,$10,$08,$B3,$21,$18,$10,$C1,$21,$08
        .byte $10,$C2,$21,$10,$10,$C3,$21,$18,$80
LB0B6:  .byte $00,$74,$63,$08,$00,$73,$63,$10,$08,$85,$63,$00,$08,$84,$63,$08
        .byte $08,$83,$63,$10,$10,$95,$63,$00,$10,$94,$63,$08,$10,$93,$63,$10
        .byte $80
LB0D7:  .byte $00,$74,$63,$08,$00,$73,$63,$10,$08,$75,$63,$00,$08,$84,$63,$08
        .byte $08,$83,$63,$10,$10,$95,$63,$00,$10,$94,$63,$08,$10,$93,$63,$10
        .byte $80
LB0F8:  .byte $00,$76,$22,$00,$00,$77,$22,$08,$08,$86,$22,$00,$08,$87,$22,$08
        .byte $08,$89,$22,$10,$80
LB10D:  .byte $00,$76,$22,$00,$00,$78,$22,$08,$08,$86,$22,$00,$08,$88,$22,$08
        .byte $08,$89,$22,$10,$80
LB122:  .byte $00,$6A,$21,$00,$00,$6B,$21,$08,$08,$7A,$21,$00,$08,$7B,$21,$08
        .byte $10,$8A,$21,$00,$10,$8B,$21,$08,$80
LB13B:  .byte $00,$6A,$21,$00,$00,$6B,$21,$08,$08,$7A,$21,$00,$08,$7B,$21,$08
        .byte $10,$8A,$21,$00,$10,$8B,$21,$08,$10,$6C,$22,$10,$10,$6D,$22,$18
        .byte $80
LB15C:  .byte $00,$7E,$62,$00,$00,$7D,$62,$08,$00,$7C,$62,$10,$08,$8E,$62,$00
        .byte $08,$8D,$62,$08,$08,$8C,$62,$10,$80
LB175:  .byte $00,$9E,$62,$00,$00,$9D,$62,$08,$00,$9C,$62,$10,$08,$AE,$62,$00
        .byte $08,$AD,$62,$08,$08,$AC,$62,$10,$80
LB18E:  .byte $00,$A6,$63,$08,$00,$A5,$63,$10,$00,$A4,$63,$18,$08,$B7,$63,$00
        .byte $08,$B6,$63,$08,$08,$B5,$63,$10,$08,$B4,$63,$18,$10,$C7,$63,$00
        .byte $10,$C6,$63,$08,$10,$C5,$63,$10,$10,$C4,$63,$18,$18,$D7,$63,$00
        .byte $18,$D6,$63,$08,$18,$D5,$63,$10,$18,$D4,$63,$18,$80
LB1CB:  .byte $00,$A6,$63,$08,$00,$A5,$63,$10,$00,$A4,$63,$18,$08,$B7,$63,$00
        .byte $08,$98,$63,$08,$08,$97,$63,$10,$08,$B4,$63,$18,$10,$C7,$63,$00
        .byte $10,$A8,$63,$08,$10,$A7,$63,$10,$10,$C4,$63,$18,$18,$D7,$63,$00
        .byte $18,$D6,$63,$08,$18,$D5,$63,$10,$18,$D4,$63,$18,$80
; Sprite $48: foot-tapping mario (no right foot)
; 67 68 69
; 15 16 17
; 5E 5F 3F
; 6E 6F 4F
; 30
LB208:  .byte $00,$67,$00,$00,$00,$68,$00,$08,$00,$69,$00,$10,$08,$15,$00,$00
        .byte $08,$16,$00,$08,$08,$17,$00,$10,$10,$5E,$00,$00,$10,$5F,$00,$08
        .byte $10,$3F,$00,$10,$18,$6E,$00,$00,$18,$6F,$00,$08,$18,$4F,$00,$10
        .byte $20,$30,$00,$00,$80
; Sprite $49: foot-tapping mario's right foot down
;    31 32
LB23D:  .byte $20,$31,$00,$08,$20,$32,$00,$10,$80
; Sprite $4A: foot-tapping mario's right foot raised
;    1F 2F
LB246:  .byte $20,$1F,$00,$08,$20,$2F,$00,$10,$80
.endscope

; ----------------------------------------------------------------------------
RB24F:
.scope
    lda L0324_P1_VIRUS                          ; B24F AD 24 03
    if_ne                                       ; B252 F0 08
        lda L03A4_P2_VIRUS                      ; B254 AD A4 03
        if_ne                                   ; B257 F0 03
            jmp LB336 ; rts                     ; B259 4C 36 B3
        end_if
    end_if
    lda #$0F                                    ; B25C A9 0F
    sta $0300                                   ; B25E 8D 00 03
    sta $0380                                   ; B261 8D 80 03
    lda #$40                                    ; B264 A9 40
    jsr R9701                                   ; B266 20 01 97
    lda L0324_P1_VIRUS                          ; B269 AD 24 03
    if_eq                                       ; B26C D0 22
        lda L0727_NUM_PLAYERS                   ; B26E AD 27 07
        cmp #$01                                ; B271 C9 01
        if_ne                                   ; B273 F0 0B
            lda L03A4_P2_VIRUS                  ; B275 AD A4 03
            if_eq                               ; B278 D0 06
                jsr R9682                       ; B27A 20 82 96
                jmp LB2A2                       ; B27D 4C A2 B2
            end_if
        end_if
        jsr R9075 ; Load P1 state               ; B280 20 75 90
        jsr RB337 ; Initialize page 4           ; B283 20 37 B3
        jsr R90AF ; Save P1 state               ; B286 20 AF 90
        lda #$01                                ; B289 A9 01
        sta $55                                 ; B28B 85 55
        jmp LB2A2                               ; B28D 4C A2 B2
    end_if
    lda L03A4_P2_VIRUS                          ; B290 AD A4 03
    if_eq                                       ; B293 D0 0D
        jsr R9092 ; Load P2 state               ; B295 20 92 90
        jsr RB337 ; Initialize page 5           ; B298 20 37 B3
        jsr R90BC ; Save P2 state               ; B29B 20 BC 90
        lda #$02                                ; B29E A9 02
        sta $55                                 ; B2A0 85 55
    end_if

LB2A2:
    lda #$0F                                    ; B2A2 A9 0F
    sta $0300                                   ; B2A4 8D 00 03
    sta $0380                                   ; B2A7 8D 80 03
    lda #$10                                    ; B2AA A9 10
    jsr R9701                                   ; B2AC 20 01 97
    ldx $0731                                   ; B2AF AE 31 07
    lda LA261,x                                 ; B2B2 BD 61 A2
    sta $06F5                                   ; B2B5 8D F5 06
    lda L0727_NUM_PLAYERS                       ; B2B8 AD 27 07
    cmp #$01                                    ; B2BB C9 01
    if_eq                                       ; B2BD D0 0A
        lda $0316                               ; B2BF AD 16 03
        cmp #$18                                ; B2C2 C9 18
        if_ne                                   ; B2C4 F0 03
            inc $0316                           ; B2C6 EE 16 03
        end_if
    end_if
    lda #$80                                    ; B2C9 A9 80
    ora $52                                     ; B2CB 05 52
    sta $52                                     ; B2CD 85 52
    lda #$0F                                    ; B2CF A9 0F
    sta $0300                                   ; B2D1 8D 00 03
    sta $0380                                   ; B2D4 8D 80 03
    lda #$10                                    ; B2D7 A9 10
    jsr R9701                                   ; B2D9 20 01 97
    lda #$0F                                    ; B2DC A9 0F
    sta $0300                                   ; B2DE 8D 00 03
    sta $0380                                   ; B2E1 8D 80 03
    loop
        lda $43                                 ; B2E4 A5 43
        and #$08                                ; B2E6 29 08
        if_ne                                   ; B2E8 F0 13
            lda #$6D                            ; B2EA A9 6D
            sta L44_SPRITE_X                    ; B2EC 85 44
            ldx L0727_NUM_PLAYERS               ; B2EE AE 27 07
            lda LA105,x                         ; B2F1 BD 05 A1
            sta L45_SPRITE_Y                    ; B2F4 85 45
            lda #$10                            ; B2F6 A9 10
            sta L53_SPRITE_NUM                  ; B2F8 85 53
            jsr R88F6_SPRITE                    ; B2FA 20 F6 88
        end_if
        jsr RB654                               ; B2FD 20 54 B6
        lda $F5                                 ; B300 A5 F5
        ora $F7                                 ; B302 05 F7
        and #$10                                ; B304 29 10
    while_eq                                    ; B306 F0 DC
    lda L0727_NUM_PLAYERS                       ; B308 AD 27 07
    cmp #$02                                    ; B30B C9 02
    if_ne                                       ; B30D F0 0A
        jsr R9E4C                               ; B30F 20 4C 9E
        ; enter top-level state 3
        lda #$03                                ; B312 A9 03
        sta L46_TOP_STATE                       ; B314 85 46
    else                                        ; B316 4C 36 B3
        lda #$FF                                ; B319 A9 FF
        ldx #$04                                ; B31B A2 04
        ldy #$05                                ; B31D A0 05
        jsr RB894 ; fill pages 4-5 with FF      ; B31F 20 94 B8
        lda #$0F                                ; B322 A9 0F
        sta $0300                               ; B324 8D 00 03
        sta $0380                               ; B327 8D 80 03
        lda #$10                                ; B32A A9 10
        jsr R9701                               ; B32C 20 01 97
        ; enter top-level state 3
        lda #$03                                ; B32F A9 03
        sta L46_TOP_STATE                       ; B331 85 46
        jmp LB336                               ; B333 4C 36 B3
    end_if
LB336:
    rts                                         ; B336 60
.endscope

; ----------------------------------------------------------------------------
; Initialize player state at $0400 or $0500.
; Fill the page with $FF, and copy 80 bytes from LA871.
; Called by RB24F.
RB337:
    lda $58                                     ; B337 A5 58
    tax                                         ; B339 AA
    tay                                         ; B33A A8
    lda #$FF                                    ; B33B A9 FF
    jsr RB894 ; fill page ($58) with FF         ; B33D 20 94 B8
    lda #$00                                    ; B340 A9 00
    sta $57                                     ; B342 85 57
    ldy #$00                                    ; B344 A0 00
    loop
        lda LA871,y                             ; B346 B9 71 A8
        beq break                               ; B349 F0 06
        sta ($57),y                             ; B34B 91 57
        iny                                     ; B34D C8
    forever                                     ; B34E 4C 46 B3
    rts                                         ; B351 60

; ----------------------------------------------------------------------------
; Initialize $0580
; Interleave $26 (38) values each from LB3BF, LB40A, and LB3E5
; into $0580-$05f1.
RB352:
    ldx #$00                                    ; B352 A2 00
    ldy #$00                                    ; B354 A0 00
    loop
        lda LB3BF,x                             ; B356 BD BF B3
        sta $0580,y                             ; B359 99 80 05
        iny                                     ; B35C C8
        lda LB40A,x                             ; B35D BD 0A B4
        sta $0580,y                             ; B360 99 80 05
        iny                                     ; B363 C8
        lda LB3E5,x                             ; B364 BD E5 B3
        sta $0580,y                             ; B367 99 80 05
        iny                                     ; B36A C8
        inx                                     ; B36B E8
        cpx #$26                                ; B36C E0 26
    while_ne                                    ; B36E D0 E6
    rts                                         ; B370 60

; ----------------------------------------------------------------------------
; Copy 38 entries into sprite attribute table based on $0580.
; Quit unless L8B_SPEED == #$02.
RB371:
    lda L8B_SPEED                           ; B371 A5 8B
    cmp #$02                                ; B373 C9 02
    if_eq                                   ; B375 D0 47
        ldx #$00                            ; B377 A2 00
        ldy L42_OAM_OFFSET                  ; B379 A4 42
        ; increment x by 3 every loop
        ; increment y by 4 every loop
        loop
            ; if $43 & 3 == 0 then increment Y-coordinate
            lda $0580,x                     ; B37B BD 80 05
            sta $47                         ; B37E 85 47
            lda $43                         ; B380 A5 43
            and #$03                        ; B382 29 03
            if_eq                           ; B384 D0 02
                inc $47                     ; B386 E6 47
            end_if
            lda $47                         ; B388 A5 47
            sta $0580,x                     ; B38A 9D 80 05
            sta $0200,y                     ; B38D 99 00 02
            inx                             ; B390 E8
            iny                             ; B391 C8
            ; if $43 & 1 then rotate bottom 2 bits of tile index
            lda $0580,x                     ; B392 BD 80 05
            sta $47                         ; B395 85 47
            lda $43                         ; B397 A5 43
            and #$01                        ; B399 29 01
            clc                             ; B39B 18
            adc $47                         ; B39C 65 47
            and #$03                        ; B39E 29 03
            ora #$40                        ; B3A0 09 40
            sta $0580,x                     ; B3A2 9D 80 05
            sta $0200,y                     ; B3A5 99 00 02
            inx                             ; B3A8 E8
            iny                             ; B3A9 C8
            ; flags are always #$20
            ; (no flips, behind background, palette 0)
            lda #$20                        ; B3AA A9 20
            sta $0200,y                     ; B3AC 99 00 02
            iny                             ; B3AF C8
            ; copy X-coordinate
            lda $0580,x                     ; B3B0 BD 80 05
            sta $0200,y                     ; B3B3 99 00 02
            inx                             ; B3B6 E8
            iny                             ; B3B7 C8
            cpx #$72                        ; B3B8 E0 72
        while_ne                            ; B3BA D0 BF
        ; loop 38 times
        sty L42_OAM_OFFSET                  ; B3BC 84 42
    end_if
    rts                                     ; B3BE 60

; ----------------------------------------------------------------------------
; Lookup table of sprite Y coordinates, used by RB352.
LB3BF:  .byte $00,$07,$0E,$15,$1C,$23,$2A,$31
        .byte $38,$3F,$46,$4D,$54,$5B,$62,$69
        .byte $70,$77,$7E,$85,$8C,$93,$9A,$A1
        .byte $A8,$AF,$B6,$BD,$C4,$CB,$D2,$D9
        .byte $E0,$E7,$EE,$F5,$FC,$FF

; ----------------------------------------------------------------------------
; Lookup table of sprite tile numbers, used by RB352.
LB3E5:  .byte $58,$C0,$40,$E0,$90,$10,$60,$A8
        .byte $70,$C0,$30,$D8,$50,$E8,$90,$B0
        .byte $10,$68,$C8,$38,$78,$20,$A8,$50
        .byte $D8,$C0,$88,$E8,$48,$98,$30,$C8
        .byte $60,$D8,$10,$A0,$80

; ----------------------------------------------------------------------------
; Lookup table of sprite X coordinates, used by RB352.
LB40A:  .byte $F1,$F0,$F2,$F1,$F2,$F1,$F0,$F0
        .byte $F1,$F2,$F2,$F0,$F0,$F1,$F1,$F2
        .byte $F0,$F2,$F0,$F1,$F0,$F2,$F2,$F0
        .byte $F1,$F0,$F2,$F2,$F1,$F1,$F0,$F2
        .byte $F2,$F1,$F2,$F0,$F1

; ----------------------------------------------------------------------------
; If L8B_SPEED == #$02 and L96_LEVEL == #$15 then RB43F.
RB42F:
    lda L8B_SPEED                               ; B42F A5 8B
    cmp #$02                                    ; B431 C9 02
    if_eq                                       ; B433 D0 09
        lda L96_LEVEL                           ; B435 A5 96
        cmp #$15                                ; B437 C9 15
        if_eq                                   ; B439 D0 03
            jsr RB43F                           ; B43B 20 3F B4
        end_if
    end_if
    rts                                         ; B43E 60

; ----------------------------------------------------------------------------
; Jump to one of 31 subroutines based on $5E.

; -------D--/AXY-CZ--VN
; RTS: 0->6->0
; READS $43 $8b ($47),Y L0760,X L0762,X La085,X La0e1,X La0ef,X La8c2,X
; WRITES $47 $48 $49 $4a $4b L53_SPRITE_NUM L66_PALETTE $7f L06f0 L06f3 L06f4 L06f5 L0200,Y L0200,X
; MODIFIES L39_V1_Y $42 L44_SPRITE_X L45_SPRITE_Y $4f $50 $5e L0580,X L0761,X
; JSR $9f28 $b371 $b569 $b5a7 $b8ac

RB43F:
.scope
        lda     $5E                             ; B43F A5 5E
        jsr     RB8AC                           ; B441 20 AC B8
        .word   LB4E6 ; 0
        .word   LB4E6 ; 1
        .word   LB4E6 ; 2
        .word   LB4F6 ; 3
        .word   LB4E6 ; 4
        .word   LB4E6 ; 5
        .word   LB4FD ; 6
        .word   LB4E6 ; 7
        .word   LB4E6 ; 8
        .word   LB504 ; 9
        .word   LB4C1 ; 10
        .word   LB4EF ; 11
        .word   LB483 ; 12
        .word   LB4CF ; 13
        .word   LB51C ; 14
        .word   LB4EC ; 15
        .word   LB512 ; 16
        .word   LB496 ; 17
        .word   LB4E0 ; 18
        .word   LB589 ; 19
        .word   LB4A6 ; 20
        .word   LB4EC ; 21
        .word   LB533 ; 22
        .word   LB48B ; 23
        .word   LB54A ; 24
        .word   LB4EF ; 25
        .word   LB4CF ; 26
        .word   LB50B ; 27
        .word   LB512 ; 28
        .word   LB4B6 ; 29
        .word   LB565 ; 30
        .byte   $60                             ; B482 60

; ----------------------------------------------------------------------------
; RB43F routine 12.
LB483:
    lda #$03                                    ; B483 A9 03
    sta $06F4                                   ; B485 8D F4 06
    inc $5E                                     ; B488 E6 5E
    rts                                         ; B48A 60

; ----------------------------------------------------------------------------
; RB43F routine 23.
LB48B:
    jsr RB569                                   ; B48B 20 69 B5
    lda #$04                                    ; B48E A9 04
    sta $06F0                                   ; B490 8D F0 06
    inc $5E                                     ; B493 E6 5E
    rts                                         ; B495 60

; ----------------------------------------------------------------------------
; RB43F routine 17.
LB496:
    jsr RB569                                   ; B496 20 69 B5
    lda #$01                                    ; B499 A9 01
    sta $06F3                                   ; B49B 8D F3 06
    lda #$06                                    ; B49E A9 06
    sta $06F0                                   ; B4A0 8D F0 06
    inc $5E                                     ; B4A3 E6 5E
    rts                                         ; B4A5 60

; ----------------------------------------------------------------------------
; RB43F routine 20.
LB4A6:
    jsr RB569                                   ; B4A6 20 69 B5
    lda #$03                                    ; B4A9 A9 03
    sta $06F3                                   ; B4AB 8D F3 06
    lda #$07                                    ; B4AE A9 07
    sta $06F0                                   ; B4B0 8D F0 06
    inc $5E                                     ; B4B3 E6 5E
    rts                                         ; B4B5 60

; ----------------------------------------------------------------------------
; RB43F routine 29.
LB4B6:
    jsr $B569                                   ; B4B6 20 69 B5
    lda #$0C                                    ; B4B9 A9 0C
    sta $06F5                                   ; B4BB 8D F5 06
    inc $5E                                     ; B4BE E6 5E
    rts                                         ; B4C0 60

; ----------------------------------------------------------------------------
; RB43F routine 10.
LB4C1:
    lda #$81                                    ; B4C1 A9 81
    sta $7F                                     ; B4C3 85 7F
    inc $5E                                     ; B4C5 E6 5E
    rts                                         ; B4C7 60

; ----------------------------------------------------------------------------
; unreachable
    lda #$41                                    ; B4C8 A9 41
    sta $7F                                     ; B4CA 85 7F
    inc $5E                                     ; B4CC E6 5E
    rts                                         ; B4CE 60

; ----------------------------------------------------------------------------
; RB43F routine 13.
LB4CF:
        lda $43                                 ; B4CF A5 43
        cmp #$C0                                ; B4D1 C9 C0
        bcc LB4EF                               ; B4D3 90 1A
        and #$0F                                ; B4D5 29 0F
        tax                                     ; B4D7 AA
        lda LA085,x                             ; B4D8 BD 85 A0
        sta L66_PALETTE                         ; B4DB 85 66
        jmp LB4EF                               ; B4DD 4C EF B4

; ----------------------------------------------------------------------------
; RB43F routine 18.
LB4E0:  jsr RB5A7                               ; B4E0 20 A7 B5
        jmp LB4EF                               ; B4E3 4C EF B4

; ----------------------------------------------------------------------------
; RB43F routine 0,1,2,4,5,7,8.
LB4E6:
    jsr R9F28                                   ; B4E6 20 28 9F
    jmp LB4EF                                   ; B4E9 4C EF B4

; ----------------------------------------------------------------------------
; RB43F routine 15.
LB4EC:
    jsr RB569                                   ; B4EC 20 69 B5
; ----------------------------------------------------------------------------
; RB43F routine 11.
LB4EF:
    lda $43                                     ; B4EF A5 43
    if_eq                                       ; B4F1 D0 02
        inc $5E                                 ; B4F3 E6 5E
    end_if
    rts                                         ; B4F5 60

; ----------------------------------------------------------------------------
; RB43F routine 3.
LB4F6:
    lda #$88                                    ; B4F6 A9 88
    sta L66_PALETTE                             ; B4F8 85 66
    inc $5E                                     ; B4FA E6 5E
    rts                                         ; B4FC 60

; ----------------------------------------------------------------------------
; RB43F routine 6.
LB4FD:  lda #$89                                ; B4FD A9 89
        sta L66_PALETTE                         ; B4FF 85 66
        inc $5E                                 ; B501 E6 5E
        rts                                     ; B503 60

; ----------------------------------------------------------------------------
; RB43F routine 9.
LB504:  lda #$85                                ; B504 A9 85
        sta L66_PALETTE                         ; B506 85 66
        inc $5E                                 ; B508 E6 5E
        rts                                     ; B50A 60

; ----------------------------------------------------------------------------
; RB43F routine 27.
LB50B:
    lda #$8B                                    ; B50B A9 8B
    sta L66_PALETTE                             ; B50D 85 66
    inc $5E                                     ; B50F E6 5E
    rts                                         ; B511 60

; ----------------------------------------------------------------------------
; RB43F routine 16 and 28.
LB512:
    jsr RB569                                   ; B512 20 69 B5
    lda #$87                                    ; B515 A9 87
    sta L66_PALETTE                             ; B517 85 66
    inc $5E                                     ; B519 E6 5E
    rts                                         ; B51B 60

; ----------------------------------------------------------------------------
; RB43F routine 14.
LB51C:
    lda $50                                     ; B51C A5 50
    cmp #$44                                    ; B51E C9 44
    if_eq                                       ; B520 D0 05
        inc $5E                                 ; B522 E6 5E
    else                                        ; B524 4C 2F B5
        lda $43                                 ; B527 A5 43
        and #$03                                ; B529 29 03
        if_eq                                   ; B52B D0 02
            inc $50                             ; B52D E6 50
        end_if
    end_if
    jsr RB569                                   ; B52F 20 69 B5
    rts                                         ; B532 60

; ----------------------------------------------------------------------------
; RB43F routine 22.
LB533:
        lda $50                                 ; B533 A5 50
        cmp #$30                                ; B535 C9 30
        if_eq                                   ; B537 D0 05
            inc $5E                             ; B539 E6 5E
        else                                    ; B53B 4C 46 B5
            lda $43                             ; B53E A5 43
            and #$03                            ; B540 29 03
            if_eq                               ; B542 D0 02
                dec $50                         ; B544 C6 50
            end_if
        end_if
        jsr RB569                               ; B546 20 69 B5
        rts                                     ; B549 60

; ----------------------------------------------------------------------------
; RB43F routine 24.
LB54A:  lda $4F                                 ; B54A A5 4F
        cmp #$E0                                ; B54C C9 E0
        if_eq                                   ; B54E D0 05
            inc $5E                             ; B550 E6 5E
        else                                    ; B552 4C 61 B5
            dec $4F                             ; B555 C6 4F
            dec $4F                             ; B557 C6 4F
            lda $43                             ; B559 A5 43
            and #$01                            ; B55B 29 01
            if_eq                               ; B55D D0 02
                dec $50                         ; B55F C6 50
            end_if
        end_if
        jsr RB569                               ; B561 20 69 B5
        rts                                     ; B564 60

; ----------------------------------------------------------------------------
; RB43F routine 30.
LB565:  jsr RB371                               ; B565 20 71 B3
        rts                                     ; B568 60

; ----------------------------------------------------------------------------
; Internal subroutine for RB43F routines.
RB569:
    lda $4F                                     ; B569 A5 4F
    if_ne                                       ; B56B F0 1B
        sta L44_SPRITE_X                        ; B56D 85 44
        lda $50                                 ; B56F A5 50
        sta L45_SPRITE_Y                        ; B571 85 45
        lda #$34                                ; B573 A9 34
        sta L53_SPRITE_NUM                      ; B575 85 53
        jsr R88F6_SPRITE                        ; B577 20 F6 88
        lda $43                                 ; B57A A5 43
        and #$04                                ; B57C 29 04
        lsr a                                   ; B57E 4A
        lsr a                                   ; B57F 4A
        clc                                     ; B580 18
        adc #$35                                ; B581 69 35
        sta L53_SPRITE_NUM                      ; B583 85 53
        jsr R88F6_SPRITE                        ; B585 20 F6 88
    end_if
    rts                                         ; B588 60

; ----------------------------------------------------------------------------
; RB43F routine 19.
LB589:
    jsr RB5A7                                   ; B589 20 A7 B5
    lda L39_V1_Y                                ; B58C A5 39
    sec                                         ; B58E 38
    sbc #$24                                    ; B58F E9 24
    cmp $50                                     ; B591 C5 50
    if_cc                                       ; B593 B0 09
        lda #$F8                                ; B595 A9 F8
        sta L39_V1_Y                            ; B597 85 39
        inc $5E                                 ; B599 E6 5E
    else                                        ; B59B 4C A6 B5
        lda $43                                 ; B59E A5 43
        and #$03                                ; B5A0 29 03
        if_eq                                   ; B5A2 D0 02
            dec L39_V1_Y                        ; B5A4 C6 39
        end_if
    end_if
    rts                                         ; B5A6 60

; ----------------------------------------------------------------------------
; Internal subroutine for RB43F routines.
RB5A7:
    jsr RB569                                   ; B5A7 20 69 B5
    lda $43                                     ; B5AA A5 43
    and #$01                                    ; B5AC 29 01
    if_ne                                       ; B5AE F0 07
        lda #$37                                ; B5B0 A9 37
        sta L53_SPRITE_NUM                      ; B5B2 85 53
        jsr R88F6_SPRITE                        ; B5B4 20 F6 88
    end_if
    rts                                         ; B5B7 60
.endscope

; ----------------------------------------------------------------------------
RB5B8:
.scope
        lda L8B_SPEED                           ; B5B8 A5 8B
        asl a                                   ; B5BA 0A
        asl a                                   ; B5BB 0A
        asl a                                   ; B5BC 0A
        asl a                                   ; B5BD 0A
        asl a                                   ; B5BE 0A
        clc                                     ; B5BF 18
        adc L96_LEVEL                           ; B5C0 65 96
        tax                                     ; B5C2 AA
        lda L9FF8,x                             ; B5C3 BD F8 9F
        bne LB5CB                               ; B5C6 D0 03
        jmp LB653                               ; B5C8 4C 53 B6

LB5CB:  lda L3D_V3_Y                            ; B5CB A5 3D
        cmp #$04                                ; B5CD C9 04
        bne LB5D7                               ; B5CF D0 06
        lda #$81                                ; B5D1 A9 81
        sta $7F                                 ; B5D3 85 7F
        inc L3D_V3_Y                            ; B5D5 E6 3D
LB5D7:  lda L3D_V3_Y                            ; B5D7 A5 3D
        cmp #$06                                ; B5D9 C9 06
        beq LB60B                               ; B5DB F0 2E
        lda $43                                 ; B5DD A5 43
        beq LB5E4                               ; B5DF F0 03
        jmp LB653                               ; B5E1 4C 53 B6

LB5E4:  inc L3D_V3_Y                            ; B5E4 E6 3D
        lda L3D_V3_Y                            ; B5E6 A5 3D
        cmp #$02                                ; B5E8 C9 02
        beq LB5EF                               ; B5EA F0 03
        jmp LB653                               ; B5EC 4C 53 B6

LB5EF:  lda L8B_SPEED                           ; B5EF A5 8B
        asl a                                   ; B5F1 0A
        asl a                                   ; B5F2 0A
        asl a                                   ; B5F3 0A
        asl a                                   ; B5F4 0A
        asl a                                   ; B5F5 0A
        clc                                     ; B5F6 18
        adc L96_LEVEL                           ; B5F7 65 96
        tax                                     ; B5F9 AA
        lda L9FF8,x                             ; B5FA BD F8 9F
        sta L3A_V2_X                            ; B5FD 85 3A
        lda L3A_V2_X                            ; B5FF A5 3A
        tax                                     ; B601 AA
        lda LA06A,x                             ; B602 BD 6A A0
        sta L3B_V2_Y                            ; B605 85 3B
        lda #$50                                ; B607 A9 50
        sta L3C_V3_X                            ; B609 85 3C
LB60B:  ldx L3A_V2_X                            ; B60B A6 3A
        lda LA073,x                             ; B60D BD 73 A0
        sta $47                                 ; B610 85 47
        lda $43                                 ; B612 A5 43
        and $47                                 ; B614 25 47
        bne LB62B                               ; B616 D0 13
        lda LA07C,x                             ; B618 BD 7C A0
        clc                                     ; B61B 18
        adc L3B_V2_Y                            ; B61C 65 3B
        sta L3B_V2_Y                            ; B61E 85 3B
        cmp #$F1                                ; B620 C9 F1
        bcc LB62B                               ; B622 90 07
        lda #$F8                                ; B624 A9 F8
        sta L3B_V2_Y                            ; B626 85 3B
        jmp LB653                               ; B628 4C 53 B6

LB62B:  lda LA058,x                             ; B62B BD 58 A0
        sta $47                                 ; B62E 85 47
        lda $43                                 ; B630 A5 43
        and $47                                 ; B632 25 47
        bne LB63E                               ; B634 D0 08
        lda L3E_VIRUS_CYCLE                     ; B636 A5 3E
        eor #$01                                ; B638 49 01
        and #$01                                ; B63A 29 01
        sta L3E_VIRUS_CYCLE                     ; B63C 85 3E
LB63E:  lda L3B_V2_Y                            ; B63E A5 3B
        sta L44_SPRITE_X                        ; B640 85 44
        lda L3C_V3_X                            ; B642 A5 3C
        sta L45_SPRITE_Y                        ; B644 85 45
        ldx L3A_V2_X                            ; B646 A6 3A
        lda LA061,x                             ; B648 BD 61 A0
        clc                                     ; B64B 18
        adc L3E_VIRUS_CYCLE                     ; B64C 65 3E
        sta L53_SPRITE_NUM                      ; B64E 85 53
        jsr R88F6_SPRITE                        ; B650 20 F6 88
LB653:  rts                                     ; B653 60
.endscope

; ----------------------------------------------------------------------------
RB654:
    lda $5D                                     ; B654 A5 5D
    if_ne                                       ; B656 F0 03
        jsr R87A2                               ; B658 20 A2 87
    end_if
    ; top-level audio routine
    jsr RFFD0                                   ; B65B 20 D0 FF
    lda #$00                                    ; B65E A9 00
    sta L33_NMI_SIGNAL                          ; B660 85 33
    ; busy wait until NMI writes to $33
    loop
        lda L33_NMI_SIGNAL                      ; B662 A5 33
    while_eq                                    ; B664 F0 FC
    lda #$FF                                    ; B666 A9 FF
    ldx #$02                                    ; B668 A2 02
    ldy #$02                                    ; B66A A0 02
    jsr RB894                                   ; B66C 20 94 B8
    rts                                         ; B66F 60

; ----------------------------------------------------------------------------
RB670:
    ; top-level audio routine
    jsr RFFD0                                   ; B670 20 D0 FF
    lda #$00                                    ; B673 A9 00
    sta L33_NMI_SIGNAL                          ; B675 85 33
    ; busy wait until NMI writes to $33
    loop
        lda L33_NMI_SIGNAL                      ; B677 A5 33
    while_eq                                    ; B679 F0 FC
    rts                                         ; B67B 60

; ----------------------------------------------------------------------------
RB67C:  jsr     RB670                           ; B67C 20 70 B6
        lda     $FE                             ; B67F A5 FE
        and     #$E1                            ; B681 29 E1
LB683:  sta     L2001                           ; B683 8D 01 20
        sta     $FE                             ; B686 85 FE
        rts                                     ; B688 60

RB689:  jsr     RB670                           ; B689 20 70 B6
        jsr     RB6B4                           ; B68C 20 B4 B6
        lda     $FE                             ; B68F A5 FE
        ora     #$1E                            ; B691 09 1E
        bne     LB683                           ; B693 D0 EE
RB695:  loop
            lda $2002                           ; B695 AD 02 20
            and #$80                            ; B698 29 80
        while_ne                                ; B69A D0 F9
        lda     $FF                             ; B69C A5 FF
        ora     #$80                            ; B69E 09 80
        bne     LB6A6                           ; B6A0 D0 04
RB6A2:  lda     $FF                             ; B6A2 A5 FF
        and     #$7F                            ; B6A4 29 7F
LB6A6:  sta     L2000                           ; B6A6 8D 00 20
        sta     $FF                             ; B6A9 85 FF
        rts                                     ; B6AB 60

; ----------------------------------------------------------------------------
RB6AC:
.scope
        ldx     #$FF                            ; B6AC A2 FF
        ldy     #$00                            ; B6AE A0 00
        jsr     RB846                           ; B6B0 20 46 B8
        rts                                     ; B6B3 60
.endscope

; ----------------------------------------------------------------------------
RB6B4:
.scope
        lda     #$00                            ; B6B4 A9 00
        sta     $2005                           ; B6B6 8D 05 20
        sta     $2005                           ; B6B9 8D 05 20
        lda     $FF                             ; B6BC A5 FF
        sta     L2000                           ; B6BE 8D 00 20
        rts                                     ; B6C1 60
.endscope

; ----------------------------------------------------------------------------

; Non-standard subroutine, it takes an inline pointer argument.
; Subroutine RB74B copies the pointer argument to $00/$01, and adjusts
; the return address.

RB6C2:
.scope
        jsr     RB74B                           ; B6C2 20 4B B7
        jmp     LB71C                           ; B6C5 4C 1C B7

LB6C8:
; case A = anything 00-7F except 60 or 4C
; Y = 0
        pha                                     ; B6C8 48
            sta $2006                           ; B6C9 8D 06 20    ;p[0] -> $2006 (PPU addr hi)
            iny                                 ; B6CC C8          ;Y=1
            lda ($00),y                         ; B6CD B1 00       ;A=p[1]
            sta $2006                           ; B6CF 8D 06 20    ;p[1] -> $2006 (PPU addr lo)
            iny                                 ; B6D2 C8          ;Y=2
            lda ($00),y                         ; B6D3 B1 00       ;A = p[2] = abcdefgh
            asl a                               ; B6D5 0A          ;A = p[2]*2 = bcdefgh0
            pha                                 ; B6D6 48          ;push p[2]*2
                lda $FF                         ; B6D7 A5 FF
                ora #$04                        ; B6D9 09 04       ;copy high bit of p[2] (i.e. 'a') to bit 2 of $ff
                if_cc                           ; B6DB B0 02
                    and #$FB                    ; B6DD 29 FB
                end_if
                sta L2000                       ; B6DF 8D 00 20
                sta $FF                         ; B6E2 85 FF
            pla                                 ; B6E4 68          ;A = p[2]*2 = bcdefgh0
            asl a                               ; B6E5 0A          ;A = p[2]*4 = cdefgh00 (C = b)
            php                                 ; B6E6 08
                if_cs                           ; B6E7 90 03       ;if 'b'
                    ora #$02                    ; B6E9 09 02       ;A = cdefghb0
                    iny                         ; B6EB C8          ;Y = 2+b
                end_if
            plp                                 ; B6EC 28
            clc                                 ; B6ED 18
            if_eq                               ; B6EE D0 01       ;C = (if cdefgh = 0 then 0 else 1)
                sec                             ; B6F0 38
            end_if
            ror a                               ; B6F1 6A          ;A = 0cdefghb OR 1000000b, C=0
            lsr a                               ; B6F2 4A          ;A = 00cdefgh OR 01000000, C=b
            tax                                 ; B6F3 AA          ;X = 00cdefgh OR 01000000, C=b
            loop                                                   ;bits 5:0 of p[2] determine the count.
                if_cc                           ; B6F4 B0 01       ;bit 6 of p[2] determines whether it is a repeated value
                    iny                         ; B6F6 C8
                end_if
                lda ($00),y                     ; B6F7 B1 00
                sta $2007                       ; B6F9 8D 07 20    ;Copy value to PPU data
                dex                             ; B6FC CA
            while_ne                            ; B6FD D0 F5
        pla                                     ; B6FF 68          ;a=p[0]
        cmp #$3F                                ; B700 C9 3F       ;if PPU addr hi = $3f
        if_eq                                   ; B702 D0 0C
            sta $2006                           ; B704 8D 06 20    ;PPU addr = $3f00
            stx $2006                           ; B707 8E 06 20
            stx $2006                           ; B70A 8E 06 20    ;PPU addr = $0000
            stx $2006                           ; B70D 8E 06 20
        end_if
LB710:
        ; increment $00/$01 by Y+1.
        sec                                     ; B710 38
        tya                                     ; B711 98
        adc $00                                 ; B712 65 00
        sta $00                                 ; B714 85 00
        lda #$00                                ; B716 A9 00
        adc $01                                 ; B718 65 01
        sta $01                                 ; B71A 85 01
; entry point
LB71C:  ldx $2002                               ; B71C AE 02 20
        ldy #$00                                ; B71F A0 00
        lda ($00),y                             ; B721 B1 00
        if_mi                                   ; B723 10 01
            rts                                 ; B725 60
        end_if
        cmp #$60                                ; B726 C9 60
        bne LB734                               ; B728 D0 0A
; case 60 (RTS):
; pull $00/$01 from the stack, increment $00/$01 by 3, and repeat.
        pla                                     ; B72A 68
        sta $01                                 ; B72B 85 01
        pla                                     ; B72D 68
        sta $00                                 ; B72E 85 00
        ldy #$02                                ; B730 A0 02
        bne LB710                               ; B732 D0 DC ; Always Branch

LB734:  cmp #$4C                                ; B734 C9 4C
        bne LB6C8                               ; B736 D0 90
; case 4C (JMP):
; push $00/$01 to the stack
        lda $00                                 ; B738 A5 00
        pha                                     ; B73A 48
        lda $01                                 ; B73B A5 01
        pha                                     ; B73D 48
        iny                                     ; B73E C8
        lda ($00),y                             ; B73F B1 00
        tax                                     ; B741 AA
        iny                                     ; B742 C8
        lda ($00),y                             ; B743 B1 00
        sta $01                                 ; B745 85 01
        stx $00                                 ; B747 86 00
        bcs LB71C                               ; B749 B0 D1  ; Always Branch

RB74B:  tsx                                     ; B74B BA
        lda $0103,x                             ; B74C BD 03 01
        sta $05                                 ; B74F 85 05
        lda $0104,x                             ; B751 BD 04 01
        sta $06                                 ; B754 85 06
        ldy #$01                                ; B756 A0 01
        lda ($05),y                             ; B758 B1 05
        sta $00                                 ; B75A 85 00
        iny                                     ; B75C C8
        lda ($05),y                             ; B75D B1 05
        sta $01                                 ; B75F 85 01
        clc                                     ; B761 18
        lda #$02                                ; B762 A9 02
        adc $05                                 ; B764 65 05
        sta $0103,x                             ; B766 9D 03 01
        lda #$00                                ; B769 A9 00
        adc $06                                 ; B76B 65 06
        sta $0104,x                             ; B76D 9D 04 01
        rts                                     ; B770 60
.endscope

; ----------------------------------------------------------------------------
; Advance LFSR.
; Input X and Y
; Reads bytes X and X+1 in zero page.
; If they differ in bit 1 (#$02) then set carry.
; Call ROR on Y bytes starting at X.
; (Always called with X = #$17 and Y = #2.)
; This is the same LFSR as RD295.
RB771:
    lda $00,x                                   ; B771 B5 00
    and #$02                                    ; B773 29 02
    sta $00                                     ; B775 85 00
    lda $01,x                                   ; B777 B5 01
    and #$02                                    ; B779 29 02
    eor $00                                     ; B77B 45 00
    clc                                         ; B77D 18
    if_ne                                       ; B77E F0 01
        sec                                     ; B780 38
    end_if
    loop
        ror $00,x                               ; B781 76 00
        inx                                     ; B783 E8
        dey                                     ; B784 88
    while_ne                                    ; B785 D0 FA
    rts                                         ; B787 60

; ----------------------------------------------------------------------------
RB788:
    lda #$00                                    ; B788 A9 00
    sta $2003                                   ; B78A 8D 03 20
    lda #$02                                    ; B78D A9 02
    sta $4014                                   ; B78F 8D 14 40
    rts                                         ; B792 60

; ----------------------------------------------------------------------------
; Read controller inputs.
; $F5 = controller 1 button state.
; $F6 = controller 2 button state.
; $00 = expansion port controller 1 button state.
; $01 = expansion port controller 2 button state.
RB793:
    ldx $FB                                     ; B793 A6 FB
    inx                                         ; B795 E8
    stx $4016                                   ; B796 8E 16 40
    dex                                         ; B799 CA
    stx $4016                                   ; B79A 8E 16 40
    ldx #$08                                    ; B79D A2 08
    loop
        lda $4016                               ; B79F AD 16 40
        lsr a                                   ; B7A2 4A
        rol $F5                                 ; B7A3 26 F5
        lsr a                                   ; B7A5 4A
        rol $00                                 ; B7A6 26 00
        lda $4017                               ; B7A8 AD 17 40
        lsr a                                   ; B7AB 4A
        rol $F6                                 ; B7AC 26 F6
        lsr a                                   ; B7AE 4A
        rol $01                                 ; B7AF 26 01
        dex                                     ; B7B1 CA
    while_ne                                    ; B7B2 D0 EB
    rts                                         ; B7B4 60

; ----------------------------------------------------------------------------
; Combine controller states from normal and expansion port controllers.
; Normal controller states in $F5/$F6
; Expansion controller states in $00/$01
RB7B5:
    lda $00                                     ; B7B5 A5 00
    ora $F5                                     ; B7B7 05 F5
    sta $F5                                     ; B7B9 85 F5
    lda $01                                     ; B7BB A5 01
    ora $F6                                     ; B7BD 05 F6
    sta $F6                                     ; B7BF 85 F6
    rts                                         ; B7C1 60

; ----------------------------------------------------------------------------
; unreachable
    jsr RB793                                   ; B7C2 20 93 B7
    beq LB7E7                                   ; B7C5 F0 20

; ----------------------------------------------------------------------------
; Read controller inputs twice and bitwise-AND them together to avoid glitches.
; XOR old and new and AND with new to get edge detection in $F5/$F6.
; READS $fb L4017
; WRITES $48 $49 L4016
; MODIFIES $00 $01 $f5 $f6 $f5,X $f7,X
RB7C7:
    jsr RB793                                   ; B7C7 20 93 B7  ; read controller state into $F5,$F6
    jsr RB7B5                                   ; B7CA 20 B5 B7
    lda $F5                                     ; B7CD A5 F5
    sta $48                                     ; B7CF 85 48
    lda $F6                                     ; B7D1 A5 F6
    sta $49                                     ; B7D3 85 49
    jsr RB793                                   ; B7D5 20 93 B7  ; read controller state again
    jsr RB7B5                                   ; B7D8 20 B5 B7
    lda $F5                                     ; B7DB A5 F5
    and $48                                     ; B7DD 25 48
    sta $F5                                     ; B7DF 85 F5
    lda $F6                                     ; B7E1 A5 F6
    and $49                                     ; B7E3 25 49
    sta $F6                                     ; B7E5 85 F6
LB7E7:
    ldx #$01                                    ; B7E7 A2 01
    loop
        lda $F5,x                               ; B7E9 B5 F5
        tay                                     ; B7EB A8
        eor $F7,x                               ; B7EC 55 F7
        and $F5,x                               ; B7EE 35 F5
        sta $F5,x                               ; B7F0 95 F5
        sty $F7,x                               ; B7F2 94 F7
        dex                                     ; B7F4 CA
    while_pl                                    ; B7F5 10 F2
    rts                                         ; B7F7 60

; ----------------------------------------------------------------------------
; unreachable
        jsr     RB793                           ; B7F8 20 93 B7
LB7FB:  ldy     $F5                             ; B7FB A4 F5
LB7FD:  lda     $F6                             ; B7FD A5 F6
        pha                                     ; B7FF 48
        jsr     RB793                           ; B800 20 93 B7
        pla                                     ; B803 68
        cmp     $F6                             ; B804 C5 F6
        bne     LB7FB                           ; B806 D0 F3
        cpy     $F5                             ; B808 C4 F5
        bne     LB7FB                           ; B80A D0 EF
        beq     LB7E7                           ; B80C F0 D9
        jsr     RB793                           ; B80E 20 93 B7
        jsr     RB7B5                           ; B811 20 B5 B7
LB814:  ldy     $F5                             ; B814 A4 F5
        lda     $F6                             ; B816 A5 F6
        pha                                     ; B818 48
        jsr     RB793                           ; B819 20 93 B7
        jsr     RB7B5                           ; B81C 20 B5 B7
        pla                                     ; B81F 68
        cmp     $F6                             ; B820 C5 F6
        bne     LB814                           ; B822 D0 F0
        cpy     $F5                             ; B824 C4 F5
        bne     LB814                           ; B826 D0 EC
        beq     LB7E7                           ; B828 F0 BD
        jsr     RB793                           ; B82A 20 93 B7
        lda     $00                             ; B82D A5 00
        sta     $F7                             ; B82F 85 F7
        lda     $01                             ; B831 A5 01
        sta     $F8                             ; B833 85 F8
        ldx     #$03                            ; B835 A2 03
LB837:  lda     $F5,x                           ; B837 B5 F5
        tay                                     ; B839 A8
        eor     $F1,x                           ; B83A 55 F1
        and     $F5,x                           ; B83C 35 F5
        sta     $F5,x                           ; B83E 95 F5
        sty     $F1,x                           ; B840 94 F1
        dex                                     ; B842 CA
        bpl     LB837                           ; B843 10 F2
        rts                                     ; B845 60

; ----------------------------------------------------------------------------
RB846:
.scope
        sta     $00                             ; B846 85 00
        stx     $01                             ; B848 86 01
        sty     $02                             ; B84A 84 02
        lda     $2002                           ; B84C AD 02 20
        lda     $FF                             ; B84F A5 FF
        and     #$FB                            ; B851 29 FB
        sta     L2000                           ; B853 8D 00 20
        sta     $FF                             ; B856 85 FF
        lda     $00                             ; B858 A5 00
        sta     $2006                           ; B85A 8D 06 20
        ldy     #$00                            ; B85D A0 00
        sty     $2006                           ; B85F 8C 06 20
        ldx     #$04                            ; B862 A2 04
        cmp     #$20                            ; B864 C9 20
        bcs     LB86A                           ; B866 B0 02
        ldx     $02                             ; B868 A6 02
LB86A:  ldy     #$00                            ; B86A A0 00
        lda     $01                             ; B86C A5 01
LB86E:  sta     $2007                           ; B86E 8D 07 20
        dey                                     ; B871 88
        bne     LB86E                           ; B872 D0 FA
        dex                                     ; B874 CA
        bne     LB86E                           ; B875 D0 F7
        ldy     $02                             ; B877 A4 02
        lda     $00                             ; B879 A5 00
        cmp     #$20                            ; B87B C9 20
        bcc     LB891                           ; B87D 90 12
        adc     #$02                            ; B87F 69 02
        sta     $2006                           ; B881 8D 06 20
        lda     #$C0                            ; B884 A9 C0
        sta     $2006                           ; B886 8D 06 20
        ldx     #$40                            ; B889 A2 40
LB88B:  sty     $2007                           ; B88B 8C 07 20
        dex                                     ; B88E CA
        bne     LB88B                           ; B88F D0 FA
LB891:  ldx     $01                             ; B891 A6 01
        rts                                     ; B893 60
.endscope

; ----------------------------------------------------------------------------
; Input A X Y
; Fill every byte in pages X through Y with A.
; Called with X=4, Y=5 and X=Y=2.
RB894:
    pha                                         ; B894 48
        txa                                     ; B895 8A
        sty $01                                 ; B896 84 01
        clc                                     ; B898 18
        sbc $01                                 ; B899 E5 01
        tax                                     ; B89B AA
    pla                                         ; B89C 68
    ldy #$00                                    ; B89D A0 00
    sty $00                                     ; B89F 84 00
    loop
        loop
            sta ($00),y                         ; B8A1 91 00
            dey                                 ; B8A3 88
        while_ne                                ; B8A4 D0 FB
        dec $01                                 ; B8A6 C6 01
        inx                                     ; B8A8 E8
    while_ne                                    ; B8A9 D0 F6
    rts                                         ; B8AB 60

; ----------------------------------------------------------------------------
; input A: index to jump table
; jump table vectors appear immediately after JSR instruction
; copies vector to $00/$01 and jumps to it
RB8AC:
    asl a                                       ; B8AC 0A
    tay                                         ; B8AD A8
    iny                                         ; B8AE C8
    pla                                         ; B8AF 68
    sta $00                                     ; B8B0 85 00
    pla                                         ; B8B2 68
    sta $01                                     ; B8B3 85 01
    lda ($00),y                                 ; B8B5 B1 00
    tax                                         ; B8B7 AA
    iny                                         ; B8B8 C8
    lda ($00),y                                 ; B8B9 B1 00
    sta $01                                     ; B8BB 85 01
    stx $00                                     ; B8BD 86 00
    jmp ($00)                                   ; B8BF 6C 00 00

; ----------------------------------------------------------------------------
; unreachable?
    sei                                         ; B8C2 78
    inc L8000                                   ; B8C3 EE 00 80
    lda #$1A                                    ; B8C6 A9 1A
    jsr RB8CC ; Set mapper control register.    ; B8C8 20 CC B8
    rts                                         ; B8CB 60

; ----------------------------------------------------------------------------
; Set MMC1 mapper Control register to A.
RB8CC:
    sta $9FFF                                   ; B8CC 8D FF 9F
    lsr a                                       ; B8CF 4A
    sta $9FFF                                   ; B8D0 8D FF 9F
    lsr a                                       ; B8D3 4A
    sta $9FFF                                   ; B8D4 8D FF 9F
    lsr a                                       ; B8D7 4A
    sta $9FFF                                   ; B8D8 8D FF 9F
    lsr a                                       ; B8DB 4A
    sta $9FFF                                   ; B8DC 8D FF 9F
    rts                                         ; B8DF 60

; ----------------------------------------------------------------------------
; Set MMC1 mapper CHR bank 0 to A.
RB8E0:
    sta $BFFF                                   ; B8E0 8D FF BF
    lsr a                                       ; B8E3 4A
    sta $BFFF                                   ; B8E4 8D FF BF
    lsr a                                       ; B8E7 4A
    sta $BFFF                                   ; B8E8 8D FF BF
    lsr a                                       ; B8EB 4A
    sta $BFFF                                   ; B8EC 8D FF BF
    lsr a                                       ; B8EF 4A
    sta $BFFF                                   ; B8F0 8D FF BF
    rts                                         ; B8F3 60

; ----------------------------------------------------------------------------
; Set MMC1 mapper CHR bank 1 to A.
RB8F4:
    sta $DFFF                                   ; B8F4 8D FF DF
    lsr a                                       ; B8F7 4A
    sta $DFFF                                   ; B8F8 8D FF DF
    lsr a                                       ; B8FB 4A
    sta $DFFF                                   ; B8FC 8D FF DF
    lsr a                                       ; B8FF 4A
    sta $DFFF                                   ; B900 8D FF DF
    lsr a                                       ; B903 4A
    sta $DFFF                                   ; B904 8D FF DF
    rts                                         ; B907 60

; ----------------------------------------------------------------------------
; Set MMC1 mapper PRG bank to A.
RB908:
    sta $FFF0                                   ; B908 8D F0 FF
    lsr a                                       ; B90B 4A
    sta $FFF0                                   ; B90C 8D F0 FF
    lsr a                                       ; B90F 4A
    sta $FFF0                                   ; B910 8D F0 FF
    lsr a                                       ; B913 4A
    sta $FFF0                                   ; B914 8D F0 FF
    lsr a                                       ; B917 4A
    sta $FFF0                                   ; B918 8D F0 FF
    rts                                         ; B91B 60

; ----------------------------------------------------------------------------
; Argument to RB6C2
; Title screen
; 1024 bytes of data for PPU addresses $2000 to $23FF
; 96 bytes of chunk headers (32 at 3 bytes each)
LB91C:  .byte $20,$00                           ; PPU address $2000
        .byte $20                               ; 32 bytes non-repeated
        .byte $FD,$FE,$FD,$FE,$FD,$FE,$FD,$FE
        .byte $FD,$FE,$FD,$FE,$FD,$FE,$FD,$FE
        .byte $FD,$FE,$FD,$FE,$FD,$FE,$FD,$FE
        .byte $FD,$FE,$FD,$FE,$FD,$FE,$FD,$FE
        .byte $20,$20                           ; PPU address $2020
        .byte $20                               ; 32 bytes non-repeated
        .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
        .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
        .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
        .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
        .byte $20,$40                           ; PPU address $2040
        .byte $20                               ; 32 bytes non-repeated
        .byte $FD,$FE,$FD,$FE,$FD,$FE,$FD,$FE
        .byte $FD,$FE,$FD,$FE,$FD,$FE,$FD,$FE
        .byte $FD,$FE,$FD,$FE,$FD,$FE,$FD,$FE
        .byte $FD,$FE,$FD,$FE,$FD,$FE,$FD,$FE
        .byte $20,$60                           ; PPU address $2060
        .byte $20                               ; 32 bytes non-repeated
        .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
        .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
        .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
        .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
        .byte $20,$80                           ; PPU address $2080
        .byte $20                               ; 32 bytes non-repeated
        .byte $FD,$FE,$FD,$FE,$FD,$FE,$FD,$FE
        .byte $FD,$FE,$FD,$FE,$FD,$FE,$FD,$FE
        .byte $FD,$FE,$FD,$FE,$FD,$FE,$FD,$FE
        .byte $FD,$FE,$FD,$FE,$FD,$FE,$FD,$FE
        .byte $20,$A0                           ; PPU address $20A0
        .byte $20                               ; 32 bytes non-repeated
        .byte $FE,$FD,$FE,$FD,$20,$21,$40,$40
        .byte $40,$40,$40,$40,$40,$40,$40,$40
        .byte $43,$40,$40,$40,$40,$40,$40,$40
        .byte $40,$40,$30,$31,$FE,$FD,$FE,$FD
        .byte $20,$C0                           ; PPU address $20C0
        .byte $20                               ; 32 bytes non-repeated
        .byte $FD,$FE,$FD,$22,$F7,$F8,$45,$46
        .byte $46,$46,$46,$46,$46,$46,$46,$46
        .byte $47,$46,$46,$46,$46,$46,$46,$46
        .byte $46,$48,$B6,$B6,$33,$FE,$FD,$FE
        .byte $20,$E0                           ; PPU address $20E0
        .byte $20                               ; 32 bytes non-repeated
        .byte $FE,$FD,$24,$25,$F9,$51,$52,$53
        .byte $54,$55,$56,$57,$58,$59,$5A,$5B
        .byte $5C,$5D,$5E,$5F,$B0,$B1,$B2,$B3
        .byte $B4,$B5,$B6,$B6,$34,$35,$FE,$FD
        .byte $21,$00
        .byte $20
        .byte $FD,$FE,$26,$FC,$60,$61,$62,$63
        .byte $64,$65,$66,$67,$68,$69,$6A,$6B
        .byte $6C,$6D,$6E,$6F,$C0,$C1,$C2,$C3
        .byte $C4,$C5,$C6,$0E,$0F,$36,$FD,$FE
        .byte $21,$20
        .byte $20
        .byte $FE,$FD,$27,$FC,$70,$71,$72,$73
        .byte $74,$75,$76,$77,$78,$79,$7A,$7B
        .byte $7C,$7D,$7E,$7F,$D0,$D1,$D2,$D3
        .byte $D4,$D5,$D6,$FC,$FC,$37,$FE,$FD
        .byte $21,$40,$20
        .byte $FD,$FE,$28,$FC,$80,$81,$82,$83
        .byte $84,$85,$86,$87,$88,$89,$8A,$8B
        .byte $8C,$8D,$8E,$8F,$E0,$E1,$E2,$E3
        .byte $E4,$E5,$E6,$FC,$FC,$38,$FD,$FE
        .byte $21,$60,$20
        .byte $FE,$FD,$29,$FC,$90,$91,$92,$93
        .byte $94,$95,$96,$97,$98,$99,$9A,$9B
        .byte $9C,$9D,$9E,$9F,$F0,$F1,$F2,$F3
        .byte $F4,$F5,$F6,$FC,$FC,$39,$FE,$FD
        .byte $21,$80,$20
        .byte $FD,$FE,$2A,$2B,$A0,$A1,$A2,$A3
        .byte $A4,$A5,$A6,$A7,$A8,$A9,$AA,$AB
        .byte $AC,$AD,$AE,$AF,$ED,$EE,$EF,$DC
        .byte $DD,$DE,$DF,$FC,$3A,$3B,$FD,$FE
        .byte $21,$A0,$20
        .byte $FE,$FD,$FE,$2C,$4C,$FC,$FC,$FC
        .byte $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .byte $42,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .byte $FC,$FC,$FC,$4F,$3D,$FD,$FE,$FD
        .byte $21,$C0,$20
        .byte $FD,$FE,$FD,$FE,$2E,$2F,$4D,$4D
        .byte $4D,$4D,$4D,$4D,$4D,$4D,$4D,$4D
        .byte $4E,$4D,$4D,$4D,$4D,$4D,$4D,$4D
        .byte $4D,$4D,$3E,$3F,$FD,$FE,$FD,$FE
        .byte $21,$E0,$20
        .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
        .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
        .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
        .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
        .byte $22,$00,$20
        .byte $FD,$FE,$FD,$FE,$FD,$FE,$FD,$FE
        .byte $FD,$FE,$FD,$FE,$FD,$FE,$FD,$FE
        .byte $FD,$FE,$FD,$FE,$FD,$FE,$FD,$FE
        .byte $FD,$FE,$FD,$FE,$FD,$FE,$FD,$FE
        .byte $22,$20,$20
        .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
        .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
        .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
        .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
        .byte $22,$40,$20
        .byte $FD,$FE,$FD,$FE,$FD,$FE,$FD,$FE
        .byte $FD,$FE,$FD,$FE,$FD,$FE,$FD,$FE
        .byte $FD,$FE,$FD,$FE,$FD,$FE,$FD,$FE
        .byte $FD,$FE,$FD,$FE,$FD,$FE,$FD,$FE
        .byte $22,$60,$20
        .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
        .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
        .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
        .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
        .byte $22,$80,$20
        .byte $FD,$FE,$FD,$FE,$FD,$CB,$CC,$CD
        .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
        .byte $CE,$CF,$E7,$FE,$FD,$FE,$FD,$FE
        .byte $22,$A0,$20
        .byte $FE,$FD,$FE,$FD,$C9,$CA,$FF,$FF
        .byte $FF,$FF,$01,$FF,$09,$07,$04,$0B
        .byte $05,$0A,$FF,$06,$04,$08,$05,$FF
        .byte $FF,$FF,$E8,$E9,$FE,$FD,$FE,$FD
        .byte $22,$C0,$20
        .byte $FD,$FE,$FD,$FE,$C8,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$EA,$FD,$FE,$FD,$FE
        .byte $22,$E0,$20
        .byte $FE,$FD,$FE,$FD,$B7,$FF,$FF,$FF
        .byte $FF,$FF,$02,$FF,$09,$07,$04,$0B
        .byte $05,$0A,$FF,$06,$04,$08,$05,$FF
        .byte $FF,$FF,$FF,$C7,$FE,$FD,$FE,$FD
        .byte $23,$00,$20
        .byte $FD,$FE,$FD,$FE,$B8,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$DA,$FD,$FE,$FD,$FE
        .byte $23,$20,$20
        .byte $FE,$FD,$FE,$FD,$B9,$BA,$FF,$FF
        .byte $FF,$FF,$0C,$FF,$01,$03,$03,$00
        .byte $FF,$FF,$10,$11,$12,$13,$14,$15
        .byte $FF,$FF,$D8,$D9,$FE,$FD,$FE,$FD
        .byte $23,$40,$20
        .byte $FD,$FE,$FD,$FE,$FD,$BB,$BC,$BD
        .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
        .byte $BE,$BF,$D7,$FE,$FD,$FE,$FD,$FE
        .byte $23,$60,$20
        .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
        .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
        .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
        .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
        .byte $23,$80,$20
        .byte $FD,$FE,$FD,$FE,$FD,$FE,$FD,$FE
        .byte $FD,$FE,$FD,$FE,$FD,$FE,$FD,$FE
        .byte $FD,$FE,$FD,$FE,$FD,$FE,$FD,$FE
        .byte $FD,$FE,$FD,$FE,$FD,$FE,$FD,$FE
        .byte $23,$A0,$20
        .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
        .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
        .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
        .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
        .byte $23,$C0,$20
        .byte $0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A
        .byte $00,$50,$50,$50,$FA,$FA,$FA,$20
        .byte $00,$55,$55,$55,$FF,$FF,$FF,$22
        .byte $00,$05,$05,$05,$AF,$AF,$AF,$22
        .byte $23,$E0,$20
        .byte $00,$00,$00,$00,$00,$00,$00,$00
        .byte $00,$00,$44,$55,$55,$55,$00,$00
        .byte $00,$00,$04,$05,$84,$A5,$00,$00
        .byte $00,$00,$00,$00,$00,$00,$00,$00
        .byte $FF
; ----------------------------------------------------------------------------
; Argument to RB6C2
; Settings screen
; 960 bytes of data for PPU addresses $2000 to $23BF
; 90 bytes of chunk headers (30 at 3 bytes each)
LBD7D:  .byte $20,$00,$20
        .byte $FD,$FC,$FD,$FC,$FD,$FC,$FD,$FC
        .byte $FD,$FC,$FD,$FC,$FD,$FC,$FD,$FC
        .byte $FD,$FC,$FD,$FC,$FD,$FC,$FD,$FC
        .byte $FD,$FC,$FD,$FC,$FD,$FC,$FD,$FC
        .byte $20,$20,$20
        .byte $FC,$FD,$FC,$FD,$FC,$FD,$FC,$FD
        .byte $FC,$FD,$FC,$FD,$FC,$FD,$FC,$FD
        .byte $FC,$FD,$FC,$FD,$FC,$FD,$FC,$FD
        .byte $FC,$FD,$FC,$FD,$FC,$FD,$FC,$FD
        .byte $20,$40,$20
        .byte $FD,$FC,$FD,$FC,$FD,$FC,$FD,$FC
        .byte $FD,$FC,$FD,$FC,$FD,$FC,$FD,$FC
        .byte $FD,$FC,$FD,$FC,$FD,$FC,$FD,$FC
        .byte $FD,$FC,$FD,$FC,$FD,$FC,$FD,$FC
        .byte $20,$60,$20
        .byte $FC,$FD,$FC,$FD,$FC,$FD,$FC,$39
        .byte $3A,$3A,$3A,$3A,$3A,$3A,$3A,$3A
        .byte $3A,$3A,$3A,$3A,$3A,$3A,$3A,$3A
        .byte $3B,$FD,$FC,$FD,$FC,$FD,$FC,$FD
        .byte $20,$80,$20
        .byte $FD,$FC,$FD,$FC,$FD,$FC,$FD,$49
        .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
        .byte $4B,$FC,$FD,$FC,$FD,$FC,$FD,$FC
        .byte $20,$A0,$20
        .byte $FC,$FD,$FC,$39,$3A,$3A,$3A,$79
        .byte $FF,$FF,$01,$FF,$19,$15,$0A,$22
        .byte $0E,$1B,$FF,$10,$0A,$16,$0E,$FF
        .byte $7C,$3A,$3A,$3A,$3B,$FD,$FC,$FD
        .byte $20,$C0,$20
        .byte $FD,$FC,$FD,$49,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$4B,$FC,$FD,$FC
        .byte $20,$E0,$20
        .byte $FC,$FD,$FC,$49,$FF,$3C,$3D,$3D
        .byte $3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D
        .byte $3D,$3E,$FF,$FF,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$4B,$FD,$FC,$FD
        .byte $21,$00,$20
        .byte $FD,$FC,$FD,$49,$FF,$4C,$1F,$12
        .byte $1B,$1E,$1C,$FF,$15,$0E,$1F,$0E
        .byte $15,$4E,$FF,$FF,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$4B,$FC,$FD,$FC
        .byte $21,$20,$20
        .byte $FC,$FD,$FC,$49,$FF,$5C,$5D,$5D
        .byte $5D,$5D,$5D,$5D,$5D,$5D,$5D,$5D
        .byte $5D,$5E,$FF,$FF,$FF,$FF,$3F,$2F
        .byte $2F,$5F,$FF,$FF,$4B,$FD,$FC,$FD
        .byte $21,$40,$20
        .byte $FD,$FC,$FD,$49,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$FF,$FF,$2E,$FF
        .byte $FF,$2E,$FF,$FF,$4B,$FC,$FD,$FC
        .byte $21,$60,$20
        .byte $FC,$FD,$FC,$49,$FF,$FF,$FF,$FF
        .byte $01,$19,$FF,$33,$30,$32,$30,$30
        .byte $31,$30,$32,$30,$30,$34,$4F,$2F
        .byte $2F,$6F,$FF,$FF,$4B,$FD,$FC,$FD
        .byte $21,$80,$20
        .byte $FD,$FC,$FD,$49,$FF,$FF,$FF,$FF
        .byte $02,$19,$FF,$43,$40,$42,$40,$40
        .byte $41,$40,$42,$40,$40,$44,$3F,$2F
        .byte $2F,$5F,$FF,$FF,$4B,$FC,$FD,$FC
        .byte $21,$A0,$20
        .byte $FC,$FD,$FC,$49,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$FF,$FF,$2E,$FF
        .byte $FF,$2E,$FF,$FF,$4B,$FD,$FC,$FD
        .byte $21,$C0,$20
        .byte $FD,$FC,$FD,$49,$FF,$3C,$3D,$3D
        .byte $3D,$3D,$3D,$3E,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$FF,$FF,$4F,$2F
        .byte $2F,$6F,$FF,$FF,$4B,$FC,$FD,$FC
        .byte $21,$E0,$20
        .byte $FC,$FD,$FC,$49,$FF,$4C,$1C,$19
        .byte $0E,$0E,$0D,$4E,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$4B,$FD,$FC,$FD
        .byte $22,$00,$20
        .byte $FD,$FC,$FD,$49,$FF,$5C,$5D,$5D
        .byte $5D,$5D,$5D,$5E,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$4B,$FC,$FD,$FC
        .byte $22,$20,$20
        .byte $FC,$FD,$FC,$49,$FF,$FF,$FF,$FF
        .byte $73,$74,$FF,$FF,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$4B,$FD,$FC,$FD
        .byte $22,$40,$20
        .byte $FD,$FC,$FD,$49,$FF,$FF,$FF,$FF
        .byte $75,$76,$FF,$15,$18,$20,$FF,$FF
        .byte $16,$0E,$0D,$FF,$FF,$11,$12,$FF
        .byte $FF,$FF,$FF,$FF,$4B,$FC,$FD,$FC
        .byte $22,$60,$20
        .byte $FC,$FD,$FC,$49,$FF,$FF,$FF,$FF
        .byte $77,$78,$FF,$FF,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$4B,$FD,$FC,$FD
        .byte $22,$80,$20
        .byte $FD,$FC,$FD,$49,$FF,$3C,$3D,$3D
        .byte $3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D
        .byte $3E,$FF,$FF,$FF,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$4B,$FC,$FD,$FC
        .byte $22,$A0,$20
        .byte $FC,$FD,$FC,$49,$FF,$4C,$16,$1E
        .byte $1C,$12,$0C,$FF,$1D,$22,$19,$0E
        .byte $4E,$FF,$FF,$FF,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$4B,$FD,$FC,$FD
        .byte $22,$C0,$20
        .byte $FD,$FC,$FD,$49,$FF,$5C,$5D,$5D
        .byte $5D,$5D,$5D,$5D,$5D,$5D,$5D,$5D
        .byte $5E,$FF,$FF,$FF,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$4B,$FC,$FD,$FC
        .byte $22,$E0,$20
        .byte $FC,$FD,$FC,$49,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$4B,$FD,$FC,$FD
        .byte $23,$00,$20
        .byte $FD,$FC,$FD,$49,$FF,$FF,$FF,$FF
        .byte $0F,$0E,$1F,$0E,$1B,$FF,$FF,$0C
        .byte $11,$12,$15,$15,$FF,$FF,$18,$0F
        .byte $0F,$FF,$FF,$FF,$4B,$FC,$FD,$FC
        .byte $23,$20,$20
        .byte $FC,$FD,$FC,$49,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$4B,$FD,$FC,$FD
        .byte $23,$40,$20
        .byte $FD,$FC,$FD,$59,$5A,$5A,$5A,$5A
        .byte $5A,$5A,$5A,$5A,$5A,$5A,$5A,$5A
        .byte $5A,$5A,$5A,$5A,$5A,$5A,$5A,$5A
        .byte $5A,$5A,$5A,$5A,$5B,$FC,$FD,$FC
        .byte $23,$60,$20
        .byte $FC,$FD,$FC,$FD,$FC,$FD,$FC,$FD
        .byte $FC,$FD,$FC,$FD,$FC,$FD,$FC,$FD
        .byte $FC,$FD,$FC,$FD,$FC,$FD,$FC,$FD
        .byte $FC,$FD,$FC,$FD,$FC,$FD,$FC,$FD
        .byte $23,$80,$20
        .byte $FD,$FC,$FD,$FC,$FD,$FC,$FD,$FC
        .byte $FD,$FC,$FD,$FC,$FD,$FC,$FD,$FC
        .byte $FD,$FC,$FD,$FC,$FD,$FC,$FD,$FC
        .byte $FD,$FC,$FD,$FC,$FD,$FC,$FD,$FC
        .byte $23,$A0,$20
        .byte $FC,$FD,$FC,$FD,$FC,$FD,$FC,$FD
        .byte $FC,$FD,$FC,$FD,$FC,$FD,$FC,$FD
        .byte $FC,$FD,$FC,$FD,$FC,$FD,$FC,$FD
        .byte $FC,$FD,$FC,$FD,$FC,$FD,$FC,$FD
        .byte $FF                               ; terminator byte
; ----------------------------------------------------------------------------
; Argument to RB6C2
; Level screen
; 1024 bytes of data for PPU addresses $2000 to $23FF
LC198:  .byte $20,$00,$20
        .byte $FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF
        .byte $FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF
        .byte $FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF
        .byte $FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF
        .byte $20,$20,$20
        .byte $FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC
        .byte $FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC
        .byte $FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC
        .byte $FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC
        .byte $20,$40,$20
        .byte $FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF
        .byte $FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF
        .byte $FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF
        .byte $FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF
        .byte $20,$60,$20
        .byte $FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC
        .byte $FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC
        .byte $FF,$FC,$FF,$FC,$FF,$FC,$9B,$FC
        .byte $9D,$FC,$9F,$FC,$FF,$99,$9A,$FC
        .byte $20,$80,$20
        .byte $FC,$FF,$FC,$D5,$D6,$EC,$D6,$76
        .byte $FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF
        .byte $FC,$FF,$FC,$FF,$A9,$AA,$AB,$AC
        .byte $AD,$AE,$AF,$D9,$DA,$DB,$F5,$FF
        .byte $20,$A0,$20
        .byte $FF,$E3,$E4,$E5,$E6,$E6,$E6,$E7
        .byte $E4,$E8,$FF,$FC,$FF,$38,$43,$44
        .byte $43,$44,$39,$FC,$B9,$BA,$BB,$BC
        .byte $BD,$BE,$BF,$E9,$EA,$EB,$F6,$FC
        .byte $20,$C0,$20
        .byte $FC,$D3,$FE,$FE,$FE,$FE,$FE,$FE
        .byte $FE,$D4,$FC,$FF,$FC,$33,$FF,$FF
        .byte $FF,$FF,$34,$FF,$C9,$CA,$CB,$CC
        .byte $CD,$CE,$CF,$F9,$FA,$FB,$F7,$FF
        .byte $20,$E0,$20
        .byte $FF,$D3,$1D,$18,$19,$FE,$FE,$FE
        .byte $FE,$D4,$FF,$FC,$FF,$3A,$3B,$FF
        .byte $FF,$3C,$3D,$FC,$FF,$FC,$FF,$FC
        .byte $FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC
        .byte $21,$00,$20
        .byte $FC,$D3,$00,$00,$00,$00,$00,$00
        .byte $00,$D4,$FC,$FF,$FC,$FF,$33,$FF
        .byte $FF,$34,$FC,$FF,$FC,$FF,$4B,$4C
        .byte $4C,$4C,$4C,$4C,$4E,$FF,$FC,$FF
        .byte $21,$20,$20
        .byte $FF,$D3,$FE,$FE,$FE,$FE,$FE,$FE
        .byte $FE,$D4,$FF,$30,$31,$31,$3E,$46
        .byte $47,$3F,$31,$31,$32,$FC,$5B,$FF
        .byte $FF,$FF,$FF,$FF,$5E,$FC,$FF,$FC
        .byte $21,$40,$20
        .byte $FC,$D3,$1C,$0C,$18,$1B,$0E,$FE
        .byte $FE,$D4,$FC,$33,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$34,$FF,$5B,$FF
        .byte $FF,$FF,$FF,$FF,$5E,$FF,$FC,$FF
        .byte $21,$60,$20
        .byte $FF,$D3,$00,$00,$00,$00,$00,$00
        .byte $00,$D4,$FF,$33,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$34,$FC,$5B,$FF
        .byte $FF,$FF,$FF,$FF,$5E,$FC,$FF,$FC
        .byte $21,$80,$20
        .byte $FC,$D3,$FE,$FE,$FE,$FE,$FE,$FE
        .byte $FE,$D4,$FC,$33,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$34,$FF,$5B,$FF
        .byte $FF,$FF,$FF,$FF,$5E,$FF,$FC,$FF
        .byte $21,$A0,$20
        .byte $FF,$F3,$F4,$F4,$F4,$F4,$F4,$F4
        .byte $F4,$F8,$FF,$33,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$34,$FC,$5B,$FF
        .byte $FF,$FF,$FF,$FF,$5E,$FC,$FF,$FC
        .byte $21,$C0,$20
        .byte $FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF
        .byte $FC,$FF,$FC,$33,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$34,$FF,$6B,$4D
        .byte $4D,$4D,$4D,$4D,$6E,$FF,$FC,$FF
        .byte $21,$E0,$20
        .byte $FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC
        .byte $FF,$FC,$FF,$33,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$34,$FC,$FF,$FC
        .byte $D5,$D6,$EC,$D7,$FF,$FC,$FF,$FC
        .byte $22,$00,$20
        .byte $FC,$FF,$FC,$90,$91,$65,$A0,$A1
        .byte $FC,$FF,$FC,$33,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$34,$FF,$E3,$E4
        .byte $E5,$E6,$E6,$E7,$E4,$E8,$FC,$FF
        .byte $22,$20,$20
        .byte $FF,$FC,$92,$93,$FD,$FD,$FD,$A2
        .byte $A3,$FC,$FF,$33,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$34,$FC,$D3,$FE
        .byte $FE,$FE,$FE,$FE,$FE,$D4,$FF,$FC
        .byte $22,$40,$20
        .byte $FC,$94,$95,$FD,$FD,$FD,$FD,$FD
        .byte $A4,$A5,$FC,$33,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$34,$FF,$D3,$15
        .byte $0E,$1F,$0E,$15,$FE,$D4,$FC,$FF
        .byte $22,$60,$20
        .byte $FF,$96,$FD,$FD,$FD,$FD,$FD,$FD
        .byte $FD,$A6,$FF,$33,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$34,$FC,$D3,$FE
        .byte $FE,$FE,$FE,$FE,$FE,$D4,$FF,$FC
        .byte $22,$80,$20
        .byte $FC,$63,$FD,$FD,$FD,$FD,$FD,$FD
        .byte $FD,$64,$FC,$33,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$34,$FF,$D3,$FE
        .byte $FE,$FE,$FE,$FE,$FE,$D4,$FC,$FF
        .byte $22,$A0,$20
        .byte $FF,$83,$FD,$FD,$FD,$FD,$FD,$FD
        .byte $FD,$84,$FF,$33,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$34,$FC,$D3,$1C
        .byte $19,$0E,$0E,$0D,$FE,$D4,$FF,$FC
        .byte $22,$C0,$20
        .byte $FC,$C0,$FD,$FD,$FD,$FD,$FD,$FD
        .byte $FD,$B0,$FC,$33,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$34,$FF,$D3,$FE
        .byte $FE,$FE,$FE,$FE,$FE,$D4,$FC,$FF
        .byte $22,$E0,$20
        .byte $FF,$C1,$C2,$FD,$FD,$FD,$FD,$FD
        .byte $B1,$B2,$FF,$33,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$34,$FC,$D3,$FE
        .byte $FE,$FE,$FE,$FE,$FE,$D4,$FF,$FC
        .byte $23,$00,$20
        .byte $FC,$DF,$C3,$C4,$FD,$FD,$FD,$B3
        .byte $B4,$FF,$FC,$33,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$34,$FF,$D3,$1F
        .byte $12,$1B,$1E,$1C,$FE,$D4,$FC,$FF
        .byte $23,$20,$20
        .byte $DC,$DD,$DE,$C5,$C6,$75,$B5,$B6
        .byte $FF,$FC,$FF,$33,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$34,$FC,$D3,$FE
        .byte $FE,$FE,$FE,$FE,$FE,$D4,$FF,$FC
        .byte $23,$40,$20
        .byte $85,$86,$FC,$FF,$FC,$FF,$FC,$FF
        .byte $FC,$FF,$FC,$35,$36,$36,$36,$36
        .byte $36,$36,$36,$36,$37,$FF,$D3,$FE
        .byte $FE,$FE,$FE,$FE,$FE,$D4,$FC,$FF
        .byte $23,$60,$20
        .byte $FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC
        .byte $FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC
        .byte $FF,$FC,$FF,$FC,$FF,$FC,$F3,$F4
        .byte $F4,$F4,$F4,$F4,$F4,$F8,$FF,$FC
        .byte $23,$80,$20
        .byte $FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF
        .byte $FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF
        .byte $FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF
        .byte $FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF
        .byte $23,$A0,$20
        .byte $FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC
        .byte $FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC
        .byte $FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC
        .byte $FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC
        .byte $23,$C0,$20
        .byte $00,$00,$00,$00,$00,$50,$50,$50
        .byte $55,$55,$11,$00,$00,$55,$55,$55
        .byte $55,$55,$11,$A0,$A0,$44,$55,$11
        .byte $05,$05,$01,$AA,$AA,$44,$55,$11
        .byte $23,$E0,$20
        .byte $FF,$FF,$33,$AA,$AA,$44,$55,$11
        .byte $FF,$FF,$33,$AA,$AA,$44,$55,$11
        .byte $FF,$0F,$03,$0A,$0A,$44,$55,$11
        .byte $00,$00,$00,$00,$00,$00,$00,$00
        .byte $FF
; ----------------------------------------------------------------------------
; Argument to RB6C2
; Two player level screen
; 1024 bytes of data for PPU addresses $2000 to $23FF
LC5F9:
        .byte $20,$00,$20,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF
        .byte $20,$20,$20,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC
        .byte $20,$40,$20,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$2C,$74,$49,$2D,$7E,$7D,$2E,$74,$49,$2F,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF
        .byte $20,$60,$20,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$53,$01,$19,$54,$45,$45,$55,$02,$19,$56,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC
        .byte $20,$80,$20,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$57,$FE,$A7,$A8,$B7,$B8,$C7,$C8,$FE,$58,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF
        .byte $20,$A0,$20,$FF,$FC,$FF,$FC,$FF,$38,$43,$44,$43,$44,$39,$53,$FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE,$56,$38,$43,$44,$43,$44,$39,$FC,$FF,$FC,$FF,$FC
        .byte $20,$C0,$20,$FC,$FF,$FC,$FF,$FC,$33,$FF,$FF,$FF,$FF,$34,$57,$FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE,$58,$33,$FF,$FF,$FF,$FF,$34,$FF,$FC,$FF,$FC,$FF
        .byte $20,$E0,$20,$FF,$FC,$FF,$FC,$FF,$3A,$3B,$FF,$FF,$3C,$3D,$53,$FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE,$56,$3A,$3B,$FF,$FF,$3C,$3D,$FC,$FF,$FC,$FF,$FC
        .byte $21,$00,$20,$FC,$FF,$FC,$FF,$FC,$FF,$33,$FF,$FF,$34,$FC,$7B,$73,$4A,$73,$4A,$73,$4A,$73,$4A,$7C,$FF,$33,$FF,$FF,$34,$FC,$FF,$FC,$FF,$FC,$FF
        .byte $21,$20,$20,$FF,$FC,$FF,$30,$31,$31,$3E,$46,$47,$3F,$31,$31,$32,$FC,$D5,$D6,$EC,$D7,$FF,$30,$31,$31,$3E,$46,$47,$3F,$31,$31,$32,$FC,$FF,$FC
        .byte $21,$40,$20,$FC,$FF,$FC,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$E4,$E5,$E6,$E6,$E7,$E4,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FF,$FC,$FF
        .byte $21,$60,$20,$FF,$FC,$FF,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FE,$FE,$FE,$FE,$FE,$FE,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FC,$FF,$FC
        .byte $21,$80,$20,$FC,$FF,$FC,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FE,$4F,$6F,$4F,$6F,$FE,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FF,$FC,$FF
        .byte $21,$A0,$20,$FF,$FC,$FF,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FE,$5F,$7F,$5F,$7F,$FE,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FC,$FF,$FC
        .byte $21,$C0,$20,$FC,$FF,$FC,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FE,$4F,$6F,$4F,$6F,$FE,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FF,$FC,$FF
        .byte $21,$E0,$20,$FF,$FC,$FF,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FE,$5F,$7F,$5F,$7F,$FE,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FC,$FF,$FC
        .byte $22,$00,$20,$FC,$FF,$FC,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FE,$4F,$6F,$4F,$6F,$FE,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FF,$FC,$FF
        .byte $22,$20,$20,$FF,$FC,$FF,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FE,$5F,$7F,$5F,$7F,$FE,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FC,$FF,$FC
        .byte $22,$40,$20,$FC,$FF,$FC,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FE,$FE,$FE,$FE,$FE,$FE,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FF,$FC,$FF
        .byte $22,$60,$20,$FF,$FC,$FF,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$D8,$48,$D8,$48,$D8,$48,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FC,$FF,$FC
        .byte $22,$80,$20,$FC,$FF,$FC,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FF,$FC,$FF,$FC,$FF,$FC,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FF,$FC,$FF
        .byte $22,$A0,$20,$FF,$FC,$FF,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$77,$78,$87,$88,$97,$98,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FC,$FF,$FC
        .byte $22,$C0,$20,$FC,$FF,$FC,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$2C,$74,$27,$28,$49,$2F,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FF,$FC,$FF
        .byte $22,$E0,$20,$FF,$FC,$FF,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$53,$FE,$69,$6A,$FE,$56,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FC,$FF,$FC
        .byte $23,$00,$20,$FC,$FF,$FC,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$57,$FE,$79,$7A,$FE,$58,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FF,$FC,$FF
        .byte $23,$20,$20,$FF,$FC,$FF,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$59,$4A,$73,$4A,$73,$5A,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FC,$FF,$FC
        .byte $23,$40,$20,$FC,$FF,$FC,$35,$36,$36,$36,$36,$36,$36,$36,$36,$37,$FF,$FC,$FF,$FC,$FF,$FC,$35,$36,$36,$36,$36,$36,$36,$36,$36,$37,$FF,$FC,$FF
        .byte $23,$60,$20,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC
        .byte $23,$80,$20,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF
        .byte $23,$A0,$20,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC
        .byte $23,$C0,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$A0,$A0,$00,$00,$A0,$A0,$00,$00,$AA,$AA,$88,$22,$AA,$AA,$00
        .byte $23,$E0,$20,$00,$AA,$AA,$08,$02,$AA,$AA,$00,$00,$AA,$AA,$00,$00,$AA,$AA,$00,$00,$0A,$0A,$00,$00,$0A,$0A,$00,$00,$00,$00,$00,$00,$00,$00,$00
        .byte $FF

; ----------------------------------------------------------------------------
; Argument to RB6C2
; Congratulations screen
; 1024 bytes of data for PPU addresses $2000 to $23FF
LCA5A:

        .byte $20,$00,$20,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .byte $20,$20,$20,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .byte $20,$40,$20,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .byte $20,$60,$20,$FC,$FC,$FC,$26,$27,$27,$27,$27,$27,$27,$27,$27,$27,$27,$27,$27,$27,$27,$27,$27,$27,$27,$27,$27,$27,$27,$27,$27,$28,$FC,$FC,$FC
        .byte $20,$80,$20,$FC,$FC,$FC,$29,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$2A,$FC,$FC,$FC
        .byte $20,$A0,$20,$FC,$FC,$FC,$29,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$2A,$FC,$FC,$FC
        .byte $20,$C0,$20,$FC,$FC,$FC,$29,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$2A,$FC,$FC,$FC
        .byte $20,$E0,$20,$FC,$FC,$FC,$29,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$2A,$FC,$FC,$FC
        .byte $21,$00,$20,$FC,$FC,$FC,$29,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$2A,$FC,$FC,$FC
        .byte $21,$20,$20,$FC,$FC,$FC,$29,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$2A,$FC,$FC,$FC
        .byte $21,$40,$20,$FC,$FC,$FC,$29,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$2A,$FC,$FC,$FC
        .byte $21,$60,$20,$FC,$FC,$FC,$29,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$2A,$FC,$FC,$FC
        .byte $21,$80,$20,$FC,$FC,$FC,$29,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$2A,$FC,$FC,$FC
        .byte $21,$A0,$20,$FC,$FC,$FC,$29,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$2A,$FC,$FC,$FC
        .byte $21,$C0,$20,$FC,$FC,$FC,$29,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$2A,$FC,$FC,$FC
        .byte $21,$E0,$20,$FC,$FC,$FC,$29,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$2A,$FC,$FC,$FC
        .byte $22,$00,$20,$FC,$FC,$FC,$29,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$2A,$FC,$FC,$FC
        .byte $22,$20,$20,$FC,$FC,$FC,$29,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$33,$34,$35,$36,$37,$38,$39,$3A,$3B,$3C,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$2A,$FC,$FC,$FC
        .byte $22,$40,$20,$FC,$FC,$FC,$29,$FF,$FF,$FF,$FF,$FF,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4A,$4B,$4C,$4D,$4E,$FF,$FF,$FF,$FF,$FF,$2A,$FC,$FC,$FC
        .byte $22,$60,$20,$FC,$FC,$FC,$29,$FF,$FF,$FF,$FF,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5A,$5B,$5C,$5D,$5E,$5F,$FF,$FF,$FF,$FF,$2A,$FC,$FC,$FC
        .byte $22,$80,$20,$FC,$FC,$FC,$29,$FF,$FF,$FF,$FF,$60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6A,$6B,$6C,$6D,$6E,$6F,$FF,$FF,$FF,$FF,$2A,$FC,$FC,$FC
        .byte $22,$A0,$20,$FC,$FC,$FC,$29,$FF,$FF,$FF,$FF,$70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7A,$7B,$7C,$7D,$7E,$7F,$FF,$FF,$FF,$FF,$2A,$FC,$FC,$FC
        .byte $22,$C0,$20,$FC,$FC,$FC,$29,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$85,$86,$87,$88,$89,$8A,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$2A,$FC,$FC,$FC
        .byte $22,$E0,$20,$FC,$FC,$FC,$29,$FF,$FF,$FF,$FF,$FF,$91,$92,$93,$94,$95,$96,$97,$98,$99,$9A,$9B,$9C,$9D,$9E,$FF,$FF,$FF,$FF,$FF,$2A,$FC,$FC,$FC
        .byte $23,$00,$20,$FC,$FC,$FC,$29,$FF,$FF,$C2,$C3,$A0,$A1,$A2,$A3,$A4,$A5,$A6,$A7,$A8,$A9,$AA,$AB,$AC,$AD,$AE,$C4,$C5,$FF,$FF,$FF,$2A,$FC,$FC,$FC
        .byte $23,$20,$20,$FC,$FC,$FC,$29,$D0,$D1,$D2,$D3,$B0,$B1,$B2,$B3,$B4,$B5,$B6,$B7,$B8,$B9,$BA,$BB,$BC,$BD,$BE,$D4,$D5,$D6,$D7,$FF,$2A,$FC,$FC,$FC
        .byte $23,$40,$20,$FC,$FC,$FC,$2B,$2C,$2C,$2C,$2C,$2C,$2C,$2C,$2C,$2C,$2C,$2C,$2C,$2C,$2C,$2C,$2C,$2C,$2C,$2C,$2C,$2C,$2C,$2C,$2C,$2D,$FC,$FC,$FC
        .byte $23,$60,$20,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .byte $23,$80,$20,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .byte $23,$A0,$20,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .byte $23,$C0,$20,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$55,$55,$55,$55,$55,$55,$FF,$FF,$55,$55,$55,$55,$55,$55,$FF,$FF,$55,$55,$55,$55,$55,$55,$FF
        .byte $23,$E0,$20,$FF,$00,$00,$00,$00,$00,$00,$FF,$FF,$00,$00,$00,$00,$00,$00,$FF,$FF,$F0,$F0,$F0,$F0,$F0,$F0,$FF,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F
        .byte $FF

        .byte $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .byte $23,$C0,$20,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$55,$55,$55,$55,$55,$55,$FF,$FF,$55,$55,$55,$55,$55,$55,$FF,$FF,$55,$55,$55,$55,$55,$55,$FF
        .byte $23,$E0,$20,$FF,$00,$00,$00,$00,$00,$00,$FF,$FF,$00,$00,$00,$00,$00,$00,$FF,$FF,$F0,$F0,$F0

; ----------------------------------------------------------------------------
; At L9CEA, these 128 bytes are copied to $0400.
LCF00:
        .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
        .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
        .byte $D2,$FF,$FF,$FF,$D2,$FF,$D1,$D0,$D2,$D1,$FF,$FF,$FF,$FF,$FF,$FF
        .byte $D0,$FF,$D2,$FF,$D0,$D2,$D2,$FF,$FF,$FF,$D2,$D0,$FF,$FF,$FF,$FF
        .byte $FF,$D2,$FF,$FF,$D1,$D0,$FF,$D1,$FF,$FF,$D1,$FF,$D2,$D1,$D1,$D2
        .byte $D2,$D1,$D0,$D2,$D2,$FF,$D1,$D0,$D1,$FF,$FF,$FF,$FF,$D0,$D0,$D1
        .byte $FF,$D2,$D2,$D0,$D0,$D1,$FF,$D2,$D2,$D1,$FF,$D0,$FF,$D1,$D1,$FF

; ----------------------------------------------------------------------------
; Used in R8E8D
; indexed by $A7, which ranges from #$00 to #$7f.
LCF80:
        .byte $00,$00,$07,$02,$01,$05,$03,$05,$00,$06,$06,$03,$05,$00,$05,$03 ; CF80
        .byte $05,$00,$06,$06,$04,$08,$07,$02,$00,$02,$05,$00,$06,$07,$06,$04 ; CF90
        .byte $08,$06,$00,$06,$06,$04,$00,$00,$07,$03,$04,$04,$03,$00,$03,$00 ; CFA0
        .byte $00,$07,$03,$03,$00,$02,$05,$00,$05,$04,$00,$01,$01,$00,$06,$08 ; CFB0
        .byte $02,$06,$02,$00,$02,$06,$02,$01,$05,$04,$08,$06,$00,$05,$04,$08 ; CFC0
        .byte $06,$08,$03,$00,$01,$01,$01,$01,$00,$07,$02,$01,$05,$04,$08,$06 ; CFD0
        .byte $00,$06,$06,$04,$08,$07,$02,$01,$06,$06,$03,$05,$08,$02,$06,$03 ; CFE0
        .byte $04,$04,$03,$01,$05,$04,$00,$01,$00,$06,$00,$05,$04,$00,$01,$01 ; CFF0

; ----------------------------------------------------------------------------
; Addresses D000 to FEFF

.scope AUDIO
.include "audio.ca65"
.endscope

; ----------------------------------------------------------------------------
; RESET vector
LFF00:
    cld                                         ; FF00 D8
    sei                                         ; FF01 78
    ldx #$00                                    ; FF02 A2 00
    stx $2000                                   ; FF04 8E 00 20
    stx $2001                                   ; FF07 8E 01 20
    ; wait for vblank
    loop
        lda $2002                               ; FF0A AD 02 20
    while_pl                                    ; FF0D 10 FB
    loop
        lda $2002                               ; FF0F AD 02 20
    while_pl                                    ; FF12 10 FB
    dex                                         ; FF14 CA
    txs                                         ; FF15 9A
    inc LFF00                                   ; FF16 EE 00 FF
    lda #$10                                    ; FF19 A9 10
    jsr RB8CC ; Set mapper control register.    ; FF1B 20 CC B8
    lda #$02                                    ; FF1E A9 02
    jsr RB8E0 ; Set mapper CHR bank 0.          ; FF20 20 E0 B8
    lda #$03                                    ; FF23 A9 03
    jsr RB8F4 ; Set mapper CHR bank 1.          ; FF25 20 F4 B8
    lda #$00                                    ; FF28 A9 00
    jsr RB908 ; Set mapper PRG bank.            ; FF2A 20 08 B9
    jmp L8000                                   ; FF2D 4C 00 80

; ----------------------------------------------------------------------------
        .byte $00,$00,$00,$00,$00,$00,$00,$00   ; FF30 00 00 00 00 00 00 00 00
        .byte $00,$00,$00,$00,$00,$00,$00,$00   ; FF38 00 00 00 00 00 00 00 00
        .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF   ; FF40 FF FF FF FF FF FF FF FF
        .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF   ; FF48 FF FF FF FF FF FF FF FF
        .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF   ; FF50 FF FF FF FF FF FF FF FF
        .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF   ; FF58 FF FF FF FF FF FF FF FF
        .byte $00,$00,$00,$00,$00,$00,$00,$00   ; FF60 00 00 00 00 00 00 00 00
        .byte $00,$00,$00,$00,$00,$00,$00,$00   ; FF68 00 00 00 00 00 00 00 00
        .byte $00,$00,$00,$00,$00,$00,$00,$00   ; FF70 00 00 00 00 00 00 00 00
        .byte $00,$00,$00,$00,$00,$00,$00,$00   ; FF78 00 00 00 00 00 00 00 00
        .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF   ; FF80 FF FF FF FF FF FF FF FF
        .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF   ; FF88 FF FF FF FF FF FF FF FF
        .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF   ; FF90 FF FF FF FF FF FF FF FF
        .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF   ; FF98 FF FF FF FF FF FF FF FF
        .byte $00,$00,$00,$00,$00,$00,$00,$00   ; FFA0 00 00 00 00 00 00 00 00
        .byte $00,$00,$00,$00,$00,$00,$00,$00   ; FFA8 00 00 00 00 00 00 00 00
        .byte $00,$00,$00,$00,$00,$00,$00,$00   ; FFB0 00 00 00 00 00 00 00 00
        .byte $00,$00,$00,$00,$00,$00,$00,$00   ; FFB8 00 00 00 00 00 00 00 00
        .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF   ; FFC0 FF FF FF FF FF FF FF FF
        .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF   ; FFC8 FF FF FF FF FF FF FF FF
; ----------------------------------------------------------------------------
; Entry points to audio code

RFFD0:  jmp     AUDIO::LD470                    ; FFD0 4C 70 D4

RFFD3:  jmp     AUDIO::RD4E5                    ; FFD3 4C E5 D4

; called from one place
RFFD6:  jmp     AUDIO::LD2BF                    ; FFD6 4C BF D2
; ----------------------------------------------------------------------------
        .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF       ; FFD9 FF FF FF FF FF FF FF
        .byte $20,$20,$20,$20,$20,$20,$20,$20   ; FFE0 20 20 20 20 20 20 20 20
        .byte $44,$52,$2E,$4D,$41,$52,$49,$4F   ; FFE8 44 52 2E 4D 41 52 49 4F
        .byte $1C,$87,$C2,$A1,$22,$04,$01,$07   ; FFF0 1C 87 C2 A1 22 04 01 07
        .byte $01,$6E                           ; FFF8 01 6E
LFFFA:  .word   L8005                           ; FFFA 05 80
LFFFC:  .word   LFF00                           ; FFFC 00 FF
LFFFE:  .word   L8035                           ; FFFE 35 80

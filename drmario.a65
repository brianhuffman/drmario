; compilation instructions:
; ca65 -t nes -o drmario.o drmario.a65
; ld65 -C drmario.cfg -o drmario.nes drmario.o

.include "macros.a65"

; da65 V2.18 - N/A
; Created:    2020-12-19 10:34:39
; Input file: drmario.prg
; Page:       1
; da65 drmario.prg --comments 3 > drmario.ca65

        .setcpu "6502"

; ----------------------------------------------------------------------------

.segment "HEADER"
    .byte 'N','E','S',$1A ; ID
    .byte $02 ; 16k PRG chunk count
    .byte $04 ; 8k CHR chunk count
    .byte $10 ; mapper type
    .byte $00,$00,$00,$00,$00,$00,$00,$00,$00 ; padding

.segment "TILES"
    .incbin "chrrom.bin"

.segment "ZEROPAGE"

.define L00_             $00
.define L01_             $01
.define L02_             $02
.define L05_             $05
.define L06_             $06
.define L17_LFSR_0       $17
.define L18_LFSR_1       $18
.define L33_NMI_SIGNAL   $33 ; 1 means NMI has run
.define L34_UNUSED       $34 ; set to #$0E when main loop starts
.define L36_             $36
.define L37_             $37
.define L38_V1_X         $38
.define L39_V1_Y         $39
.define L3A_V2_X         $3A
.define L3B_V2_Y         $3B
.define L3C_V3_X         $3C
.define L3D_V3_Y         $3D
.define L3E_VIRUS_CYCLE  $3E
.define L42_OAM_OFFSET   $42
.define L43_CLOCK        $43
.define L44_SPRITE_X     $44
.define L45_SPRITE_Y     $45
.define L46_TOP_STATE    $46
.define L47_TEMP         $47
.define L48_TEMP         $48
.define L49_TEMP         $49
.define L4A_TEMP         $4A
.define L4B_TEMP         $4B
.define L4C_TEMP         $4C
.define L4F_UFO_X        $4F ; sprite coordinate for final cutscene
.define L50_UFO_Y        $50 ; sprite coordinate for final cutscene
.define L51_TEMP         $51
.define L52_REDRAW_FLAGS $52
.define L53_SPRITE_NUM   $53
.define L54_ENABLE_PAUSE $54 ; non-zero means START pauses the game
.define L55_ROUND_WINNER $55
.define L57_             $57
.define L58_             $58
.define L59_TEMP         $59
.define L5A_TEMP         $5A
.define L5B_INPUT_NEW    $5B
.define L5C_INPUT_OLD    $5C
.define L5D_SHOW_LEVEL   $5D ; non-zero enables display of level sprites
.define L5E_ENDING_STATE $5E ; used for sequencing of final cutscene
.define L60_SPRITE_FLAGS $60 ; argument to R893B_BCD_SPRITE routine
.define L61_             $61
.define L65_OPTION_SEL   $65 ; Selected option: 0 = level, 1 = speed, 2 = music
.define L66_PALETTE      $66
.define L68_REDRAW_OPTS  $68 ; 0 = no change, 1 = level, 2 = speed, 3 = music, +4 = level number
.define L69_DEMO_DELAY   $69
.define L70_DEMO_INPUT   $70
.define L72_V1_COUNT     $72
.define L73_V2_COUNT     $73
.define L74_V3_COUNT     $74
.define L75_V1_STATE     $75
.define L76_V2_STATE     $76
.define L77_V3_STATE     $77
.define L78_V1_TIMER     $78
.define L79_V2_TIMER     $79
.define L7A_V3_TIMER     $7A
.define L7B_VIRUS_MARCH  $7B
.define L7D_TOSS_TIMER   $7D
.define L7E_MARIO_ARM    $7E
.define L7F_CONGRATS_IDX $7F ; Index into "congratulations" message (set bit 7 to erase)

.define L80_             $80 ; 48-byte struct
.define L80_UPDATE_ROW   $80
.define L81_PILL_COLOR_0 $81
.define L82_PILL_COLOR_1 $82
.define L83_PILL_COLOR_2 $83
.define L84_PILL_COLOR_3 $84
.define L85_PILL_COLUMN  $85
.define L86_PILL_ROW     $86
.define L87_STATE        $87
.define L88_UNUSED       $88 ; set to 0
.define L89_LOST         $89
.define L8A_EXTRA_SPEED  $8A
.define L8B_SPEED        $8B
.define L8E_UNUSED       $8E ; length of cleared row/col is written but never read
.define L8F_CLEAR_COMBO  $8F
.define L90_PILL_COUNT_0 $90
.define L91_PILL_COUNT_1 $91
.define L92_DROP_TIMER   $92
.define L93_REPEAT_TIMER $93
.define L94_             $94
.define L95_UNUSED       $95 ; written but never read
.define L96_LEVEL        $96
.define L97_GAME_STATE   $97
.define L98_GARBAGE      $98
.define L9A_NEXT_COLOR_0 $9A
.define L9B_NEXT_COLOR_1 $9B
.define L9C_NEXT_COLOR_2 $9C
.define L9D_NEXT_COLOR_3 $9D
.define L9E_WINS         $9E
.define LA0_TEMP         $A0
.define LA1_CLEAR_TOTAL  $A1 ; sum of lengths of cleared rows/cols (never used)
.define LA2_NEXT_DIR     $A2
.define LA3_NEXT_SIZE    $A3
.define LA4_VIRUS_BCD    $A4
.define LA5_PILL_DIR     $A5
.define LA6_PILL_SIZE    $A6
.define LA7_PILL_INDEX   $A7
.define LA8_VIRUS_TO_ADD $A8
.define LA9_JUNK_COLOR   $A9
.define LAD_VIRUS_COMBO  $AD

.define LF1_             $F1
.define LF5_P1_INPUT_NEW $F5
.define LF6_P2_INPUT_NEW $F6
.define LF7_P1_INPUT_OLD $F7
.define LF8_P2_INPUT_OLD $F8
.define LFB_             $FB ; used in controller reading routine, but is never initialized
.define LFC_UNUSED       $FC ; set to 0
.define LFD_UNUSED       $FD ; set to 0
.define LFE_PPUMASK      $FE ; copied to $2001 (PPUMASK)
.define LFF_PPUCTRL      $FF ; copied to $2000 (PPUCTRL)

L0101 := $0101
L0120 := $0120
L0202 := $0202

.segment "OAM"
L0200_OAM := $0200

.segment "BSS"

L0300_P1 := $0300
L0380_P2 := $0380

L0300_P1_UPDATE_ROW   := $0300
L0309_P1_LOST         := $0309
L030B_P1_SPEED        := $030B
L0316_P1_LEVEL        := $0316
L0317_P1_GAME_STATE   := $0317
L0318_P1_GARBAGE      := $0318
L031A_P1_NEXT_COLOR_0 := $031A
L031B_P1_NEXT_COLOR_1 := $031B
L031C_P1_NEXT_COLOR_2 := $031C
L031D_P1_NEXT_COLOR_3 := $031D
L031E_P1_WINS         := $031E
L0324_P1_VIRUS        := $0324
L0325_P1_PILL_DIR     := $0325
L0328_P1_VIRUS_TO_ADD := $0328
L0329_P1_JUNK_COLOR_0 := $0329
L032A_P1_JUNK_COLOR_1 := $032A
L032B_P1_JUNK_COLOR_2 := $032B
L032C_P1_JUNK_COLOR_3 := $032C

L0380_P2_UPDATE_ROW   := $0380
L0389_P2_LOST         := $0389
L038B_P2_SPEED        := $038B
L0396_P2_LEVEL        := $0396
L0397_P2_GAME_STATE   := $0397
L039A_P2_NEXT_COLOR_0 := $039A
L039B_P2_NEXT_COLOR_1 := $039B
L039C_P2_NEXT_COLOR_2 := $039C
L039D_P2_NEXT_COLOR_3 := $039D
L039E_P2_WINS         := $039E
L03A4_P2_VIRUS        := $03A4
L03A5_P2_PILL_DIR     := $03A5
L03A8_P2_VIRUS_TO_ADD := $03A8

L0400_P1_PLAYFIELD    := $0400
L0500_P2_PLAYFIELD    := $0500
L0580_ := $0580

L067E_ := $067E
L067F_ := $067F
L068D_ := $068D
L06F0_ := $06F0
L06F1_ := $06F1
L06F3_ := $06F3
L06F4_ := $06F4
L06F5_ := $06F5


L0700_TOP_SCORE_0           := $0700
L0701_TOP_SCORE_1           := $0701
L0702_TOP_SCORE_2           := $0702
L0703_TOP_SCORE_3           := $0703
L0704_TOP_SCORE_4           := $0704
L0705_TOP_SCORE_5           := $0705

L0710_RESET_STRING          := $0710

L0720_UNUSED                := $0720
L0722_UNUSED                := $0722
L0723_DEBUG_DISABLE_SPEEDUP := $0723
L0724_DEBUG_DISABLE_FALLING := $0724
L0725_MAX_WINS              := $0725
L0727_NUM_PLAYERS           := $0727
L0728_INITIAL_EXTRA_SPEED   := $0728
L0729_SCORE_0 := $0729
L072A_SCORE_1 := $072A
L072B_SCORE_2 := $072B
L072C_SCORE_3 := $072C
L072D_SCORE_4 := $072D
L072E_SCORE_5 := $072E

L0731_MUSIC_CHOICE  := $0731
L0732_BACKUP_0      := $0732
L0733_BACKUP_1      := $0733
L0734_BACKUP_2      := $0734
L0735_BACKUP_3      := $0735
L0736_BACKUP_4      := $0736
L0737_BACKUP_5      := $0737
L073C_OLD_OPTIONS_0 := $073C ; previously-selected level
L073D_OLD_OPTIONS_1 := $073D ; previously-selected speed
L073E_OLD_OPTIONS_2 := $073E ; previously-selected #players
L073F_OLD_OPTIONS_3 := $073F ; previously-selected music
L0740_CHECKSUM_FAIL := $0740
L0741_DEMO_MODE     := $0741
L0760_CLOUD_DATA    := $0760 ; 10 bytes

L0780_PILL_SEQUENCE := $0780 ; 128-byte array

L2000_PPUCTRL   := $2000
L2001_PPUMASK   := $2001
L2002_PPUSTATUS := $2002
L2003_OAMADDR   := $2003
L2005_PPUSCROLL := $2005
L2006_PPUADDR   := $2006
L2007_PPUDATA   := $2007

L4014_OAMDMA     := $4014
L4016_           := $4016
L4017_           := $4017

.segment "CODE"

; ----------------------------------------------------------------------------
L8000:
    ldx #$00                                    ; 8000 A2 00
    jmp L8036                                   ; 8002 4C 36 80

; ----------------------------------------------------------------------------
; NMI vector
L8005_NMI_HANDLER:
    pha                                         ; 8005 48
        txa                                     ; 8006 8A
        pha                                     ; 8007 48
            tya                                 ; 8008 98
            pha                                 ; 8009 48
                .ifdef REV_A
                lda LFE_PPUMASK
                sta L2001_PPUMASK
                .endif
                jsr RB788_OAM_DMA               ; 800A 20 88 B7
                jsr R8393_PRINT_CHANGES         ; 800D 20 93 83
                jsr R82F7_PRINT_PLAYFIELD_ROWS  ; 8010 20 F7 82
                jsr R8661                       ; 8013 20 61 86
                lda L43_CLOCK                   ; 8016 A5 43
                add #$01                        ; 8018 18 69 01
                sta L43_CLOCK                   ; 801B 85 43
                lda #$00                        ; 801D A9 00
                sta L2005_PPUSCROLL             ; 801F 8D 05 20
                sta L2005_PPUSCROLL             ; 8022 8D 05 20
                ; signal to RB654 to continue
                lda #$01                        ; 8025 A9 01
                sta L33_NMI_SIGNAL              ; 8027 85 33
                jsr R9134                       ; 8029 20 34 91
                lda #$00                        ; 802C A9 00
                sta L42_OAM_OFFSET              ; 802E 85 42
            pla                                 ; 8030 68
            tay                                 ; 8031 A8
        pla                                     ; 8032 68
        tax                                     ; 8033 AA
    pla                                         ; 8034 68

; IRQ vector
L8035_IRQ_HANDLER:
    rti                                         ; 8035 40

; ----------------------------------------------------------------------------
; Continuation of RESET vector
L8036:
.scope
    ; zero out pages $01 to $06
    ; but preserve L0316_P1_LEVEL, L0396_P2_LEVEL, L030B_P1_SPEED, and L038B_P2_SPEED.
    lda L0316_P1_LEVEL                          ; 8036 AD 16 03
    sta L0732_BACKUP_0                          ; 8039 8D 32 07
    lda L0396_P2_LEVEL                          ; 803C AD 96 03
    sta L0733_BACKUP_1                          ; 803F 8D 33 07
    lda L030B_P1_SPEED                          ; 8042 AD 0B 03
    sta L0734_BACKUP_2                          ; 8045 8D 34 07
    lda L038B_P2_SPEED                          ; 8048 AD 8B 03
    sta L0735_BACKUP_3                          ; 804B 8D 35 07
    ldy #$06                                    ; 804E A0 06
    sty $01                                     ; 8050 84 01
    ldy #$00                                    ; 8052 A0 00
    sty $00                                     ; 8054 84 00
    lda #$00                                    ; 8056 A9 00
    loop
        loop
            sta ($00),y                         ; 8058 91 00
            dey                                 ; 805A 88
        while_ne                                ; 805B D0 FB
        dec $01                                 ; 805D C6 01
    while_pl                                    ; 805F 10 F7
    lda L0732_BACKUP_0                          ; 8061 AD 32 07
    sta L0316_P1_LEVEL                          ; 8064 8D 16 03
    lda L0733_BACKUP_1                          ; 8067 AD 33 07
    sta L0396_P2_LEVEL                          ; 806A 8D 96 03
    lda L0734_BACKUP_2                          ; 806D AD 34 07
    sta L030B_P1_SPEED                          ; 8070 8D 0B 03
    lda L0735_BACKUP_3                          ; 8073 AD 35 07
    sta L038B_P2_SPEED                          ; 8076 8D 8B 03

    ; Compare $0710-$0719 with $9FEE-$9FF7.
    ; If string matches, then jmp warm_boot.
    ; If mismatch is found, then reset top score and speed.
    ldx #$0A                                    ; 8079 A2 0A
    loop
        lda L0710_RESET_STRING-1,x              ; 807B BD 0F 07
        sta L47_TEMP                            ; 807E 85 47
        lda L9FEE-1,x                           ; 8080 BD ED 9F
        cmp L47_TEMP                            ; 8083 C5 47
        bne cold_boot                           ; 8085 D0 06
        dex                                     ; 8087 CA
    while_ne                                    ; 8088 D0 F1
    jmp warm_boot                               ; 808A 4C DC 80

cold_boot:
    ldx #$00                                    ; 808D A2 00
    .ifdef REV_A
    lda #$FF
    ldx #$07
    ldy #$07
    jsr RB894_FILL_PAGES
    .endif
    ; set top score to 1000.
    lda #$00                                    ; 808F A9 00
    sta L0700_TOP_SCORE_0                       ; 8091 8D 00 07
    sta L0701_TOP_SCORE_1                       ; 8094 8D 01 07
    sta L0702_TOP_SCORE_2                       ; 8097 8D 02 07
    sta L0704_TOP_SCORE_4                       ; 809A 8D 04 07
    sta L0705_TOP_SCORE_5                       ; 809D 8D 05 07
    lda #$01                                    ; 80A0 A9 01
    sta L0703_TOP_SCORE_3                       ; 80A2 8D 03 07
    lda #$00                                    ; 80A5 A9 00
    sta L0723_DEBUG_DISABLE_SPEEDUP             ; 80A7 8D 23 07
    sta L0724_DEBUG_DISABLE_FALLING             ; 80AA 8D 24 07
    sta L0728_INITIAL_EXTRA_SPEED               ; 80AD 8D 28 07
    sta L0316_P1_LEVEL                          ; 80B0 8D 16 03
    sta L0396_P2_LEVEL                          ; 80B3 8D 96 03
    sta L0731_MUSIC_CHOICE                      ; 80B6 8D 31 07
    lda #$01                                    ; 80B9 A9 01
    sta L0720_UNUSED                            ; 80BB 8D 20 07
    sta L0727_NUM_PLAYERS                       ; 80BE 8D 27 07
    sta L030B_P1_SPEED                          ; 80C1 8D 0B 03
    sta L038B_P2_SPEED                          ; 80C4 8D 8B 03
    lda #$02                                    ; 80C7 A9 02
    sta L0722_UNUSED                            ; 80C9 8D 22 07
    lda #$03                                    ; 80CC A9 03
    sta L0725_MAX_WINS                          ; 80CE 8D 25 07
    ; Copy string from $9FEE-$9FF7 to $0710-$0719.
    ldx #$0A                                    ; 80D1 A2 0A
    loop
        lda L9FEE-1,x                           ; 80D3 BD ED 9F
        sta L0710_RESET_STRING-1,x              ; 80D6 9D 0F 07
        dex                                     ; 80D9 CA
    while_ne                                    ; 80DA D0 F7

warm_boot:
    ; Seed LFSR in L17_LFSR_0/L18_LFSR_1.
    ldx #$89                                    ; 80DC A2 89
    stx L17_LFSR_0                              ; 80DE 86 17
    dex                                         ; 80E0 CA
    stx L18_LFSR_1                              ; 80E1 86 18
    ldy #$00                                    ; 80E3 A0 00
    sty LFD_UNUSED                              ; 80E5 84 FD
    sty L2005_PPUSCROLL                         ; 80E7 8C 05 20
    ldy #$00                                    ; 80EA A0 00
    sty LFC_UNUSED                              ; 80EC 84 FC
    sty L2005_PPUSCROLL                         ; 80EE 8C 05 20
    lda #$90                                    ; 80F1 A9 90
    sta LFF_PPUCTRL                             ; 80F3 85 FF
    sta L2000_PPUCTRL                           ; 80F5 8D 00 20
    lda #$06                                    ; 80F8 A9 06
    sta L2001_PPUMASK                           ; 80FA 8D 01 20
    .ifdef REV_A
    sta LFE_PPUMASK
    .endif
    jsr RFFD6                                   ; 80FD 20 D6 FF
    jsr RFFD3                                   ; 8100 20 D3 FF
    lda #$C0                                    ; 8103 A9 C0
    sta $0100                                   ; 8105 8D 00 01
    lda #$80                                    ; 8108 A9 80
    sta L0101                                   ; 810A 8D 01 01
    lda #$35                                    ; 810D A9 35
    sta $0103                                   ; 810F 8D 03 01
    lda #$AC                                    ; 8112 A9 AC
    sta $0104                                   ; 8114 8D 04 01
    jsr RB67C_DISABLE_VIDEO                     ; 8117 20 7C B6
    jsr RB6A2_DISABLE_NMI                       ; 811A 20 A2 B6
    lda #$20                                    ; 811D A9 20
    jsr RB6AC_INIT_NAMETABLE                    ; 811F 20 AC B6
    lda #$24                                    ; 8122 A9 24
    jsr RB6AC_INIT_NAMETABLE                    ; 8124 20 AC B6
    lda #$28                                    ; 8127 A9 28
    jsr RB6AC_INIT_NAMETABLE                    ; 8129 20 AC B6
    lda #$2C                                    ; 812C A9 2C
    jsr RB6AC_INIT_NAMETABLE                    ; 812E 20 AC B6
    lda #$00                                    ; 8131 A9 00
    sta L5D_SHOW_LEVEL                          ; 8133 85 5D
    jsr R90C9_INIT_4_5                          ; 8135 20 C9 90
    jsr RB695_ENABLE_NMI                        ; 8138 20 95 B6
    jsr RB654_NEXT_FRAME                        ; 813B 20 54 B6
    jsr RB689_ENABLE_VIDEO                      ; 813E 20 89 B6
    jsr RB654_NEXT_FRAME                        ; 8141 20 54 B6
    lda #$0E                                    ; 8144 A9 0E
    sta L34_UNUSED                              ; 8146 85 34
    loop
        jsr R8157_TOP_STATE_MACHINE             ; 8148 20 57 81
        jsr R978E_PAUSE                         ; 814B 20 8E 97
        jsr RB654_NEXT_FRAME                    ; 814E 20 54 B6
        jsr R8712 ; pad OAM with FF             ; 8151 20 12 87
    forever                                     ; 8154 4C 48 81
.endscope

; ----------------------------------------------------------------------------
; Top-level state machine.
; Current state is in L46_TOP_STATE.
; State ranges from 0 to 8.
R8157_TOP_STATE_MACHINE:
.scope
    lda L46_TOP_STATE                           ; 8157 A5 46
    jsr RB8AC_JUMP_TABLE                        ; 8159 20 AC B8
    .word L981C_TOP_0 ; title screen
    .word L9953_TOP_1 ; settings screen
    .word L816E_TOP_2 ; new game
    .word L8206_TOP_3
    .word L9B73_TOP_4
    .word L9532_TOP_5
    .word L8FEF_TOP_6
    .word L958A_TOP_7
    .word L9C91_TOP_8

; ----------------------------------------------------------------------------
; Jump table vector 2
; Start a new game.
L816E_TOP_2:
    jsr RB67C_DISABLE_VIDEO                     ; 816E 20 7C B6
    jsr RB6A2_DISABLE_NMI                       ; 8171 20 A2 B6
    lda #$02                                    ; 8174 A9 02
    jsr RB8E0 ; Set mapper CHR bank 0.          ; 8176 20 E0 B8
    lda #$03                                    ; 8179 A9 03
    jsr RB8F4 ; Set mapper CHR bank 1.          ; 817B 20 F4 B8
    lda L0727_NUM_PLAYERS                       ; 817E AD 27 07
    cmp #$01                                    ; 8181 C9 01
    if_eq                                       ; 8183 D0 06
        jsr R82D1_PRINT_LEVEL                   ; 8185 20 D1 82
    else                                        ; 8188 4C D8 81
        jsr RB6C2_PRINT                         ; 818B 20 C2 B6
        .word LC5F9 ; 2-player level screen
        ; PPU address $20EC (row 7, col 12)
        lda #$20                                ; 8190 A9 20
        sta L2006_PPUADDR                       ; 8192 8D 06 20
        lda #$EC                                ; 8195 A9 EC
        sta L2006_PPUADDR                       ; 8197 8D 06 20
        lda L030B_P1_SPEED                      ; 819A AD 0B 03
        asl a                                   ; 819D 0A
        asl a                                   ; 819E 0A
        tax                                     ; 819F AA
        lda LA23D,x                             ; 81A0 BD 3D A2
        sta L2007_PPUDATA                       ; 81A3 8D 07 20
        lda LA23D+1,x                           ; 81A6 BD 3E A2
        sta L2007_PPUDATA                       ; 81A9 8D 07 20
        lda LA23D+2,x                           ; 81AC BD 3F A2
        sta L2007_PPUDATA                       ; 81AF 8D 07 20
        ; PPU address $20F1 (row 7, col 17)
        lda #$20                                ; 81B2 A9 20
        sta L2006_PPUADDR                       ; 81B4 8D 06 20
        lda #$F1                                ; 81B7 A9 F1
        sta L2006_PPUADDR                       ; 81B9 8D 06 20
        lda L038B_P2_SPEED                      ; 81BC AD 8B 03
        asl a                                   ; 81BF 0A
        asl a                                   ; 81C0 0A
        tax                                     ; 81C1 AA
        lda LA23D,x                             ; 81C2 BD 3D A2
        sta L2007_PPUDATA                       ; 81C5 8D 07 20
        lda LA23D+1,x                           ; 81C8 BD 3E A2
        sta L2007_PPUDATA                       ; 81CB 8D 07 20
        lda LA23D+2,x                           ; 81CE BD 3F A2
        sta L2007_PPUDATA                       ; 81D1 8D 07 20
        lda #$83                                ; 81D4 A9 83
        sta L66_PALETTE                         ; 81D6 85 66
    end_if
    lda #$FF                                    ; 81D8 A9 FF
    sta L5D_SHOW_LEVEL                          ; 81DA 85 5D
    jsr RB695_ENABLE_NMI                        ; 81DC 20 95 B6
    jsr RB689_ENABLE_VIDEO                      ; 81DF 20 89 B6
    lda #$0F                                    ; 81E2 A9 0F
    sta L80_UPDATE_ROW                          ; 81E4 85 80
    jsr R90C9_INIT_4_5                          ; 81E6 20 C9 90
    lda #$00                                    ; 81E9 A9 00
    sta L0729_SCORE_0                           ; 81EB 8D 29 07
    sta L072A_SCORE_1                           ; 81EE 8D 2A 07
    sta L072B_SCORE_2                           ; 81F1 8D 2B 07
    sta L072C_SCORE_3                           ; 81F4 8D 2C 07
    sta L072D_SCORE_4                           ; 81F7 8D 2D 07
    sta L072E_SCORE_5                           ; 81FA 8D 2E 07
    sta L031E_P1_WINS                           ; 81FD 8D 1E 03
    sta L039E_P2_WINS                           ; 8200 8D 9E 03
    ; enter top-level state 3
    inc L46_TOP_STATE                           ; 8203 E6 46
    rts                                         ; 8205 60

; ----------------------------------------------------------------------------
; jump table vector 3
L8206_TOP_3:
    lda #$00                                    ; 8206 A9 00
    sta L92_DROP_TIMER                          ; 8208 85 92
    sta L57_                                    ; 820A 85 57
    sta L8F_CLEAR_COMBO                         ; 820C 85 8F
    sta LA1_CLEAR_TOTAL                         ; 820E 85 A1
    sta L98_GARBAGE                             ; 8210 85 98
    sta L97_GAME_STATE                          ; 8212 85 97
    sta L87_STATE                               ; 8214 85 87
    sta L88_UNUSED ; redundant                  ; 8216 85 88
    sta L89_LOST                                ; 8218 85 89
    sta L80_UPDATE_ROW                          ; 821A 85 80
    sta L90_PILL_COUNT_0                        ; 821C 85 90
    sta L91_PILL_COUNT_1                        ; 821E 85 91
    sta L7D_TOSS_TIMER                          ; 8220 85 7D
    sta LA7_PILL_INDEX                          ; 8222 85 A7
    sta L0728_INITIAL_EXTRA_SPEED               ; 8224 8D 28 07
    sta L75_V1_STATE                            ; 8227 85 75
    sta L76_V2_STATE                            ; 8229 85 76
    sta L77_V3_STATE                            ; 822B 85 77
    sta L78_V1_TIMER                            ; 822D 85 78
    sta L79_V2_TIMER                            ; 822F 85 79
    sta L7A_V3_TIMER                            ; 8231 85 7A
    sta L72_V1_COUNT                            ; 8233 85 72
    sta L73_V2_COUNT                            ; 8235 85 73
    sta L74_V3_COUNT                            ; 8237 85 74
    sta L7E_MARIO_ARM                           ; 8239 85 7E
    sta L61_                                    ; 823B 85 61
    sta L55_ROUND_WINNER                        ; 823D 85 55
    sta L3E_VIRUS_CYCLE                         ; 823F 85 3E
    lda #$06                                    ; 8241 A9 06
    sta L97_GAME_STATE                          ; 8243 85 97
    lda #$04                                    ; 8245 A9 04
    sta L58_                                    ; 8247 85 58
    lda #$FF                                    ; 8249 A9 FF
    sta L54_ENABLE_PAUSE                        ; 824B 85 54
    lda L0728_INITIAL_EXTRA_SPEED               ; 824D AD 28 07
    sta L8A_EXTRA_SPEED                         ; 8250 85 8A
    sta LA0_TEMP ; redundant                    ; 8252 85 A0
    jsr R82A0_INIT_780                          ; 8254 20 A0 82
    jsr R8E8D_NEW_PILL                          ; 8257 20 8D 8E
    jsr R8E8D_NEW_PILL                          ; 825A 20 8D 8E
    lda #$01                                    ; 825D A9 01
    sta L90_PILL_COUNT_0                        ; 825F 85 90
    jsr R8FA5_SAVE_STATS                        ; 8261 20 A5 8F
    jsr R90AF_SAVE_P1                           ; 8264 20 AF 90
    jsr R90BC_SAVE_P2                           ; 8267 20 BC 90
    jsr R8FCA_RESTORE_STATS                     ; 826A 20 CA 8F
    lda L0316_P1_LEVEL                          ; 826D AD 16 03
    cmp #$15                                    ; 8270 C9 15
    if_pl                                       ; 8272 30 08
        sub #$14                                ; 8274 38 E9 14
        sta L0728_INITIAL_EXTRA_SPEED           ; 8277 8D 28 07
        lda #$14                                ; 827A A9 14
    end_if
    add #$01                                    ; 827C 18 69 01
    asl a                                       ; 827F 0A
    asl a                                       ; 8280 0A
    sta L0328_P1_VIRUS_TO_ADD                   ; 8281 8D 28 03
    lda L0396_P2_LEVEL                          ; 8284 AD 96 03
    add #$01                                    ; 8287 18 69 01
    asl a                                       ; 828A 0A
    asl a                                       ; 828B 0A
    sta L03A8_P2_VIRUS_TO_ADD                   ; 828C 8D A8 03
    lda #$9F                                    ; 828F A9 9F
    sta L52_REDRAW_FLAGS                        ; 8291 85 52
    ldx L0731_MUSIC_CHOICE                      ; 8293 AE 31 07
    lda LA264,x                                 ; 8296 BD 64 A2
    sta L06F5_                                  ; 8299 8D F5 06
    jsr RB654_NEXT_FRAME                        ; 829C 20 54 B6
    rts                                         ; 829F 60

; ----------------------------------------------------------------------------
; Fill L0780_PILL_SEQUENCE with 128 random numbers from 0-8.
; Also set L46_TOP_STATE to 8.
; Called once in L8206_TOP_3.
R82A0_INIT_780:
    lda #$80                                    ; 82A0 A9 80
    sta L47_TEMP                                ; 82A2 85 47
    lda #$00                                    ; 82A4 A9 00
    sta L48_TEMP                                ; 82A6 85 48
    loop
        ldx #L17_LFSR_0                         ; 82A8 A2 17
        ldy #$02                                ; 82AA A0 02
        jsr RB771_STEP_LFSR                     ; 82AC 20 71 B7
        ldx L47_TEMP                            ; 82AF A6 47
        dex                                     ; 82B1 CA
        lda L17_LFSR_0                          ; 82B2 A5 17
        and #$0F                                ; 82B4 29 0F
        add L48_TEMP                            ; 82B6 18 65 48
        ; reduce modulo 9
        loop
            sta L48_TEMP                        ; 82B9 85 48
            cmp #$09                            ; 82BB C9 09
            bcc break                           ; 82BD 90 06
            sub #$09                            ; 82BF 38 E9 09
        forever                                 ; 82C2 4C B9 82
        sta L0780_PILL_SEQUENCE,x               ; 82C5 9D 80 07
        dec L47_TEMP                            ; 82C8 C6 47
    while_ne                                    ; 82CA D0 DC
    ; enter top-level state 8
    lda #$08                                    ; 82CC A9 08
    sta L46_TOP_STATE                           ; 82CE 85 46
    rts                                         ; 82D0 60
.endscope

; ----------------------------------------------------------------------------
; Copy the single-player level screen to the PPU.
; Also print the speed.
R82D1_PRINT_LEVEL:
    jsr RB6C2_PRINT                             ; 82D1 20 C2 B6
    .word LC198 ; level screen                  ; 82D4 98 C1
    lda #$80                                    ; 82D6 A9 80
    sta L66_PALETTE                             ; 82D8 85 66
    lda L030B_P1_SPEED                          ; 82DA AD 0B 03
    asl a                                       ; 82DD 0A
    asl a                                       ; 82DE 0A
    tax                                         ; 82DF AA
    ldy #$03                                    ; 82E0 A0 03
    ; PPU address $22DA (row 22, col 26)
    ; 1-player screen speed
    lda #$22                                    ; 82E2 A9 22
    sta L2006_PPUADDR                           ; 82E4 8D 06 20
    lda #$DA                                    ; 82E7 A9 DA
    sta L2006_PPUADDR                           ; 82E9 8D 06 20
    loop
        lda LA23D,x ; "LOW", "MED", " HI"       ; 82EC BD 3D A2
        sta L2007_PPUDATA                       ; 82EF 8D 07 20
        inx                                     ; 82F2 E8
        dey                                     ; 82F3 88
    while_ne                                    ; 82F4 D0 F6
    rts                                         ; 82F6 60

; ----------------------------------------------------------------------------
; Copy rows of playfields for both players to screen.
; Row L0300_P1_UPDATE_ROW for player 1, and L0380_P2_UPDATE_ROW for player 2.
; Called from NMI handler.
R82F7_PRINT_PLAYFIELD_ROWS:
.scope
    lda #$04                                    ; 82F7 A9 04
    sta L58_                                    ; 82F9 85 58
    lda L0300_P1_UPDATE_ROW                     ; 82FB AD 00 03
    sta L80_UPDATE_ROW                          ; 82FE 85 80
    jsr R8321_PRINT_PLAYFIELD_ROW               ; 8300 20 21 83
    lda L80_UPDATE_ROW                          ; 8303 A5 80
    sta L0300_P1_UPDATE_ROW                     ; 8305 8D 00 03
    lda L0727_NUM_PLAYERS                       ; 8308 AD 27 07
    cmp #$02                                    ; 830B C9 02
    if_eq                                       ; 830D D0 11
        lda #$05                                ; 830F A9 05
        sta L58_                                ; 8311 85 58
        lda L0380_P2_UPDATE_ROW                 ; 8313 AD 80 03
        sta L80_UPDATE_ROW                      ; 8316 85 80
        jsr R8321_PRINT_PLAYFIELD_ROW           ; 8318 20 21 83
        lda L80_UPDATE_ROW                      ; 831B A5 80
        sta L0380_P2_UPDATE_ROW                 ; 831D 8D 80 03
    end_if
    rts                                         ; 8320 60

; --------------------------------------
; Copy one row of playfield to display, and decrement row number.
; Input/output: L80_UPDATE_ROW is row number of playfield.
; Called from R82F7.
R8321_PRINT_PLAYFIELD_ROW:
    lda L80_UPDATE_ROW                          ; 8321 A5 80
    cmp #$FF                                    ; 8323 C9 FF
    if_ne                                       ; 8325 F0 6B
        lda L0727_NUM_PLAYERS                   ; 8327 AD 27 07
        cmp #$01                                ; 832A C9 01
        if_eq                                   ; 832C D0 13
            ; Rows 10-25, column 12
            lda L80_UPDATE_ROW                  ; 832E A5 80
            asl a                               ; 8330 0A
            tay                                 ; 8331 A8
            lda LA717,y                         ; 8332 B9 17 A7
            sta L2006_PPUADDR                   ; 8335 8D 06 20
            lda LA717+1,y                       ; 8338 B9 18 A7
            sta L2006_PPUADDR                   ; 833B 8D 06 20
        else                                    ; 833E 4C 6A 83
            lda L58_                            ; 8341 A5 58
            cmp #$04                            ; 8343 C9 04
            if_eq                               ; 8345 D0 13
                ; Rows 10-25, column 4
                lda L80_UPDATE_ROW              ; 8347 A5 80
                asl a                           ; 8349 0A
                tay                             ; 834A A8
                lda LA737,y                     ; 834B B9 37 A7
                sta L2006_PPUADDR               ; 834E 8D 06 20
                lda LA737+1,y                   ; 8351 B9 38 A7
                sta L2006_PPUADDR               ; 8354 8D 06 20
            else                                ; 8357 4C 6A 83
                ; Rows 10-25, column 20
                lda L80_UPDATE_ROW              ; 835A A5 80
                asl a                           ; 835C 0A
                tay                             ; 835D A8
                lda LA757,y                     ; 835E B9 57 A7
                sta L2006_PPUADDR               ; 8361 8D 06 20
                lda LA757+1,y                   ; 8364 B9 58 A7
                sta L2006_PPUADDR               ; 8367 8D 06 20
            end_if
        end_if
        lda #$00                                ; 836A A9 00
        sta L57_                                ; 836C 85 57
        lda L80_UPDATE_ROW                      ; 836E A5 80
        asl a                                   ; 8370 0A
        asl a                                   ; 8371 0A
        asl a                                   ; 8372 0A
        tay                                     ; 8373 A8
        ldx #$08                                ; 8374 A2 08
        loop
            lda ($57),y                         ; 8376 B1 57
            and #$F0                            ; 8378 29 F0
            cmp #$B0 ; marked                   ; 837A C9 B0
            if_eq                               ; 837C D0 09
                lda ($57),y                     ; 837E B1 57
                and #$0F                        ; 8380 29 0F
                ora #$F0                        ; 8382 09 F0
            else                                ; 8384 4C 89 83
                lda ($57),y                     ; 8387 B1 57
            end_if
            sta L2007_PPUDATA                   ; 8389 8D 07 20
            iny                                 ; 838C C8
            dex                                 ; 838D CA
        while_ne                                ; 838E D0 E6
        dec L80_UPDATE_ROW                      ; 8390 C6 80
    end_if
    rts                                         ; 8392 60
.endscope

; ----------------------------------------------------------------------------
; Depending on update flags, copy various data into PPU nametables:
; Palette, level number, score, top score, virus count, victory markers
; Called by NMI handler.
R8393_PRINT_CHANGES:
.scope
    lda L66_PALETTE                             ; 8393 A5 66
    if_ne                                       ; 8395 F0 03
        jmp L857A_SET_PPU_PALETTE               ; 8397 4C 7A 85
    end_if
    lda L68_REDRAW_OPTS                         ; 839A A5 68
    if_ne                                       ; 839C F0 03
        jmp R8508_PRINT_SETTINGS                ; 839E 4C 08 85
    end_if
    lda L52_REDRAW_FLAGS                        ; 83A1 A5 52
    if_eq                                       ; 83A3 D0 03
        jmp L8507 ; rts                         ; 83A5 4C 07 85
    end_if
    lda L0727_NUM_PLAYERS                       ; 83A8 AD 27 07
    cmp #$01                                    ; 83AB C9 01
    if_ne                                       ; 83AD F0 03
        jmp L846E                               ; 83AF 4C 6E 84
    end_if

    ; test bit 2 (score)
    lda L52_REDRAW_FLAGS                        ; 83B2 A5 52
    and #$04                                    ; 83B4 29 04
    if_ne                                       ; 83B6 F0 34
        ; PPU address $2162 (row 11, col 2)
        ; 1-player screen score
        lda #$21                                ; 83B8 A9 21
        sta L2006_PPUADDR                       ; 83BA 8D 06 20
        lda #$62                                ; 83BD A9 62
        sta L2006_PPUADDR                       ; 83BF 8D 06 20
        lda L072E_SCORE_5                       ; 83C2 AD 2E 07
        sta L2007_PPUDATA                       ; 83C5 8D 07 20
        lda L072D_SCORE_4                       ; 83C8 AD 2D 07
        sta L2007_PPUDATA                       ; 83CB 8D 07 20
        lda L072C_SCORE_3                       ; 83CE AD 2C 07
        sta L2007_PPUDATA                       ; 83D1 8D 07 20
        lda L072B_SCORE_2                       ; 83D4 AD 2B 07
        sta L2007_PPUDATA                       ; 83D7 8D 07 20
        lda L072A_SCORE_1                       ; 83DA AD 2A 07
        sta L2007_PPUDATA                       ; 83DD 8D 07 20
        lda L0729_SCORE_0                       ; 83E0 AD 29 07
        sta L2007_PPUDATA                       ; 83E3 8D 07 20
        ; clear bit 2
        lda L52_REDRAW_FLAGS                    ; 83E6 A5 52
        and #$FB                                ; 83E8 29 FB
        sta L52_REDRAW_FLAGS                    ; 83EA 85 52
    end_if

    ; test bit 3 (top score)
    lda L52_REDRAW_FLAGS                        ; 83EC A5 52
    and #$08                                    ; 83EE 29 08
    if_ne                                       ; 83F0 F0 34
        ; PPU address $2102 (row 8, col 2)
        ; 1-player screen top score
        lda #$21                                ; 83F2 A9 21
        sta L2006_PPUADDR                       ; 83F4 8D 06 20
        lda #$02                                ; 83F7 A9 02
        sta L2006_PPUADDR                       ; 83F9 8D 06 20
        lda L0705_TOP_SCORE_5                   ; 83FC AD 05 07
        sta L2007_PPUDATA                       ; 83FF 8D 07 20
        lda L0704_TOP_SCORE_4                   ; 8402 AD 04 07
        sta L2007_PPUDATA                       ; 8405 8D 07 20
        lda L0703_TOP_SCORE_3                   ; 8408 AD 03 07
        sta L2007_PPUDATA                       ; 840B 8D 07 20
        lda L0702_TOP_SCORE_2                   ; 840E AD 02 07
        sta L2007_PPUDATA                       ; 8411 8D 07 20
        lda L0701_TOP_SCORE_1                   ; 8414 AD 01 07
        sta L2007_PPUDATA                       ; 8417 8D 07 20
        lda L0700_TOP_SCORE_0                   ; 841A AD 00 07
        sta L2007_PPUDATA                       ; 841D 8D 07 20
        ; clear bit 3
        lda L52_REDRAW_FLAGS                    ; 8420 A5 52
        and #$F7                                ; 8422 29 F7
        sta L52_REDRAW_FLAGS                    ; 8424 85 52
    end_if

    ; test bit 4 (virus count)
    lda L52_REDRAW_FLAGS                        ; 8426 A5 52
    and #$10                                    ; 8428 29 10
    if_ne                                       ; 842A F0 23
        ; PPU address $233B (row 25, col 27)
        ; 1-player screen virus count
        lda #$23                                ; 842C A9 23
        sta L2006_PPUADDR                       ; 842E 8D 06 20
        lda #$3B                                ; 8431 A9 3B
        sta L2006_PPUADDR                       ; 8433 8D 06 20
        lda L0324_P1_VIRUS                      ; 8436 AD 24 03
        and #$F0                                ; 8439 29 F0
        lsr a                                   ; 843B 4A
        lsr a                                   ; 843C 4A
        lsr a                                   ; 843D 4A
        lsr a                                   ; 843E 4A
        sta L2007_PPUDATA                       ; 843F 8D 07 20
        lda LA4_VIRUS_BCD                       ; 8442 A5 A4
        and #$0F                                ; 8444 29 0F
        sta L2007_PPUDATA                       ; 8446 8D 07 20
        ; clear bit 4
        lda L52_REDRAW_FLAGS                    ; 8449 A5 52
        and #$EF                                ; 844B 29 EF
        sta L52_REDRAW_FLAGS                    ; 844D 85 52
    end_if

    ; test bit 1 (level number)
    lda L52_REDRAW_FLAGS                        ; 844F A5 52
    and #$02                                    ; 8451 29 02
    if_ne                                       ; 8453 F0 19
        ; PPU address $227B (row 19, col 27)
        ; 1-player screen level number
        lda #$22                                ; 8455 A9 22
        sta L2006_PPUADDR                       ; 8457 8D 06 20
        lda #$7B                                ; 845A A9 7B
        sta L2006_PPUADDR                       ; 845C 8D 06 20
        ldx L0316_P1_LEVEL                      ; 845F AE 16 03
        lda LA777,x ; BCD table 00-29           ; 8462 BD 77 A7
        jsr R864E_NYBBLES_PPUDATA               ; 8465 20 4E 86
        ; clear bit 1
        lda L52_REDRAW_FLAGS                    ; 8468 A5 52
        and #$FD                                ; 846A 29 FD
        sta L52_REDRAW_FLAGS                    ; 846C 85 52
    end_if
L846E:

    lda L0727_NUM_PLAYERS                       ; 846E AD 27 07
    cmp #$02                                    ; 8471 C9 02
    if_ne                                       ; 8473 F0 03
        jmp L8507 ; rts                         ; 8475 4C 07 85
    end_if

    ; test bit 7 (victory marker)
    lda L52_REDRAW_FLAGS                        ; 8478 A5 52
    and #$80                                    ; 847A 29 80
    if_ne_jmp                                   ; 847C D0 03 4C 07 85
        lda L031E_P1_WINS                       ; 8481 AD 1E 03
        if_ne                                   ; 8484 F0 3B
            ; look up PPU address from LA396
            ; save a copy in L47_TEMP/L48_TEMP
            asl a                               ; 8486 0A
            tax                                 ; 8487 AA
            dex                                 ; 8488 CA
            dex                                 ; 8489 CA
            lda LA396,x                         ; 848A BD 96 A3
            sta L2006_PPUADDR                   ; 848D 8D 06 20
            sta L48_TEMP                        ; 8490 85 48
            lda LA396+1,x                       ; 8492 BD 97 A3
            sta L2006_PPUADDR                   ; 8495 8D 06 20
            sta L47_TEMP                        ; 8498 85 47
            lda #$5C                            ; 849A A9 5C
            sta L2007_PPUDATA                   ; 849C 8D 07 20
            lda #$5D                            ; 849F A9 5D
            sta L2007_PPUDATA                   ; 84A1 8D 07 20
            ; L47_TEMP/L48_TEMP += #$0020
            ; set PPU address one row down
            lda L47_TEMP                        ; 84A4 A5 47
            add #$20                            ; 84A6 18 69 20
            sta L47_TEMP                        ; 84A9 85 47
            lda #$00                            ; 84AB A9 00
            adc L48_TEMP                        ; 84AD 65 48
            sta L2006_PPUADDR                   ; 84AF 8D 06 20
            lda L47_TEMP                        ; 84B2 A5 47
            sta L2006_PPUADDR                   ; 84B4 8D 06 20
            lda #$6C                            ; 84B7 A9 6C
            sta L2007_PPUDATA                   ; 84B9 8D 07 20
            lda #$6D                            ; 84BC A9 6D
            sta L2007_PPUDATA                   ; 84BE 8D 07 20
        end_if
        lda L039E_P2_WINS                       ; 84C1 AD 9E 03
        if_ne                                   ; 84C4 F0 3B
            ; look up PPU address from LA39C
            ; save a copy in L47/L48
            asl a                               ; 84C6 0A
            tax                                 ; 84C7 AA
            dex                                 ; 84C8 CA
            dex                                 ; 84C9 CA
            lda LA39C,x                         ; 84CA BD 9C A3
            sta L2006_PPUADDR                   ; 84CD 8D 06 20
            sta L48_TEMP                        ; 84D0 85 48
            lda LA39C+1,x                       ; 84D2 BD 9D A3
            sta L2006_PPUADDR                   ; 84D5 8D 06 20
            sta L47_TEMP                        ; 84D8 85 47
            lda #$5C                            ; 84DA A9 5C
            sta L2007_PPUDATA                   ; 84DC 8D 07 20
            lda #$5D                            ; 84DF A9 5D
            sta L2007_PPUDATA                   ; 84E1 8D 07 20
            ; L47_TEMP/L48_TEMP += #$0020
            ; set PPU address one row down
            lda L47_TEMP                        ; 84E4 A5 47
            add #$20                            ; 84E6 18 69 20
            sta L47_TEMP                        ; 84E9 85 47
            lda #$00                            ; 84EB A9 00
            adc L48_TEMP                        ; 84ED 65 48
            sta L2006_PPUADDR                   ; 84EF 8D 06 20
            lda L47_TEMP                        ; 84F2 A5 47
            sta L2006_PPUADDR                   ; 84F4 8D 06 20
            lda #$6C                            ; 84F7 A9 6C
            sta L2007_PPUDATA                   ; 84F9 8D 07 20
            lda #$6D                            ; 84FC A9 6D
            sta L2007_PPUDATA                   ; 84FE 8D 07 20
        end_if
        ; clear bit 7
        lda L52_REDRAW_FLAGS                    ; 8501 A5 52
        and $7F ; typo in original?             ; 8503 25 7F
        sta L52_REDRAW_FLAGS                    ; 8505 85 52
    end_if
L8507:
    rts                                         ; 8507 60
.endscope

; ----------------------------------------------------------------------------
; Write settings screen info to PPU nametables.
; Input in L68_REDRAW_OPTS.
R8508_PRINT_SETTINGS:
    begin
        lda L68_REDRAW_OPTS                     ; 8508 A5 68
        and #$FC                                ; 850A 29 FC
        if_eq                                   ; 850C D0 32
            lda L68_REDRAW_OPTS                 ; 850E A5 68
            cmp #$01                            ; 8510 C9 01
            if_eq                               ; 8512 D0 0C
                jsr RB6C2_PRINT                 ; 8514 20 C2 B6
                .word LA2B8 ; attribute data
                lda #$00
                sta L68_REDRAW_OPTS             ; 851B 85 68
                jmp break                       ; 851D 4C 79 85
            end_if
            cmp #$02                            ; 8520 C9 02
            if_eq                               ; 8522 D0 0C
                jsr RB6C2_PRINT                 ; 8524 20 C2 B6
                .word LA2FF ; attribute data    ; 8527 FF A2
                lda #$00                        ; 8529 A9 00
                sta L68_REDRAW_OPTS             ; 852B 85 68
                jmp break                       ; 852D 4C 79 85
            end_if
            cmp #$03                            ; 8530 C9 03
            bne break                           ; 8532 D0 45
            jsr RB6C2_PRINT                     ; 8534 20 C2 B6
            .word LA346 ; attribute data        ; 8537 46 A3
            lda #$00                            ; 8539 A9 00
            sta L68_REDRAW_OPTS                 ; 853B 85 68
            jmp break                           ; 853D 4C 79 85
        end_if
        lda L68_REDRAW_OPTS                     ; 8540 A5 68
        and #$04 ; test bit 2                   ; 8542 29 04
        if_ne                                   ; 8544 F0 33
            lda L68_REDRAW_OPTS                 ; 8546 A5 68
            and #$FB ; clear bit 2              ; 8548 29 FB
            sta L68_REDRAW_OPTS                 ; 854A 85 68
            ; PPU address $2157
            ; row 10, column 23
            ; (virus level on settings screen)
            lda #$21                            ; 854C A9 21
            sta L2006_PPUADDR                   ; 854E 8D 06 20
            lda #$57                            ; 8551 A9 57
            sta L2006_PPUADDR                   ; 8553 8D 06 20
            ldx L0316_P1_LEVEL                  ; 8556 AE 16 03
            lda LA777,x ; BCD table 00-29       ; 8559 BD 77 A7
            jsr R864E_NYBBLES_PPUDATA           ; 855C 20 4E 86
            lda L0727_NUM_PLAYERS               ; 855F AD 27 07
            cmp #$02                            ; 8562 C9 02
            if_eq                               ; 8564 D0 13
                ; PPU address $21B7
                ; row 13, column 23
                ; (P2 virus level on settings screen)
                lda #$21                        ; 8566 A9 21
                sta L2006_PPUADDR               ; 8568 8D 06 20
                lda #$B7                        ; 856B A9 B7
                sta L2006_PPUADDR               ; 856D 8D 06 20
                ldx L0396_P2_LEVEL              ; 8570 AE 96 03
                lda LA777,x ; BCD table 00-29   ; 8573 BD 77 A7
                jsr R864E_NYBBLES_PPUDATA       ; 8576 20 4E 86
            end_if
        end_if
    end
    rts                                         ; 8579 60

; ----------------------------------------------------------------------------
; Copy palette data to PPU palette ram ($3F00-$3F1F), based on L66_PALETTE.
; This is a big switch statement, with cases for #$80 to #$8B.
; case L66_PALETTE of
; #$80: RB6C2(LA56B) : jsr R8617_SPEED_PALETTE
; #$81: RB6C2(LA58F)
; #$82: RB6C2(LA5B3)
; #$83: RB6C2(LA5D7) : jsr R8617_SPEED_PALETTE
; #$84: RB6C2(LA5FB)
; #$85: RB6C2(LA61F)
; #$86: RB6C2(LA643)
; #$87: RB6C2(LA667)
; #$88: RB6C2(LA67B)
; #$89: RB6C2(LA69F)
; #$8A: RB6C2(LA6C3)
; #$8B: RB6C2(LA6E7)
; afterward set L66_PALETTE to 0.
; Called once from R8393_PRINT_CHANGES.
L857A_SET_PPU_PALETTE:
    begin ; switch L66_PALETTE
        lda L66_PALETTE                         ; 857A A5 66
        cmp #$80                                ; 857C C9 80
        if_eq                                   ; 857E D0 0B
            jsr RB6C2_PRINT                     ; 8580 20 C2 B6
            .word LA56B                         ; 8583 6B A5
            jsr R8617_SPEED_PALETTE
            jmp break
        end_if
        cmp #$81                                ; 858B C9 81
        if_eq                                   ; 858D D0 08
            jsr RB6C2_PRINT                     ; 858F 20 C2 B6
            .word LA58F                         ; 8592 8F A5
            jmp break                           ; 8594 4C 12 86
        end_if
        cmp #$82                                ; 8597 C9 82
        if_eq                                   ; 8599 D0 08
            jsr RB6C2_PRINT                     ; 859B 20 C2 B6
            .word LA5B3                         ; 859E B3 A5
            jmp break                           ; 859F 4C 12 86
        end_if
        cmp #$83                                ; 85A3 C9 83
        if_eq                                   ; 85A5 D0 0B
            jsr RB6C2_PRINT                     ; 85A7 20 C2 B6
            .word LA5D7                         ; 85AA D7 A5
            jsr R8617_SPEED_PALETTE             ; 85AC 20 17 86
            jmp break                           ; 85AF 4C 12 86
        end_if
        cmp #$84                                ; 85B2 C9 84
        if_eq                                   ; 85B4 D0 08
            jsr RB6C2_PRINT                     ; 85B6 20 C2 B6
            .word LA5FB                         ; 85B9 FB A5
            jmp break                           ; 85BB 4C 12 86
        end_if
        cmp #$85                                ; 85BE C9 85
        if_eq                                   ; 85C0 D0 08
            jsr RB6C2_PRINT                     ; 85C2 20 C2 B6
            .word LA61F                         ; 85C5 1F A6
            jmp break                           ; 85C7 4C 12 86
        end_if
        cmp #$86                                ; 85CA C9 86
        if_eq                                   ; 85CC D0 08
            jsr RB6C2_PRINT                     ; 85CE 20 C2 B6
            .word LA643                         ; 85D1 43 A6
            jmp break                           ; 85D3 4C 12 86
        end_if
        cmp #$87                                ; 85D6 C9 87
        if_eq                                   ; 85D8 D0 08
            jsr RB6C2_PRINT                     ; 85DA 20 C2 B6
            .word LA667                         ; 85DD 67 A6
            jmp break                           ; 85DF 4C 12 86
        end_if
        cmp #$88                                ; 85E2 C9 88
        if_eq                                   ; 85E4 D0 08
            jsr RB6C2_PRINT                     ; 85E6 20 C2 B6
            .word LA67B                         ; 85E9 7B A6
            jmp break                           ; 85EB 4C 12 86
        end_if
        cmp #$89                                ; 85EE C9 89
        if_eq                                   ; 85F0 D0 08
            jsr RB6C2_PRINT                     ; 85F2 20 C2 B6
            .word LA69F                         ; 85F5 9F A6
            jmp break                           ; 85F7 4C 12 86
        end_if
        cmp #$8A                                ; 85FA C9 8A
        if_eq                                   ; 85FC D0 08
            jsr RB6C2_PRINT                     ; 85FE 20 C2 B6
            .word LA6C3                         ; 8601 C3 A6
            jmp break                           ; 8603 4C 12 86
        end_if
        cmp #$8B                                ; 8606 C9 8B
        if_eq                                   ; 8608 D0 08
            jsr RB6C2_PRINT                     ; 860A 20 C2 B6
            .word LA6E7                         ; 860D E7 A6
            jmp break                           ; 860F 4C 12 86
        end_if
    end
    lda #$00                                    ; 8612 A9 00
    sta L66_PALETTE                             ; 8614 85 66
    rts                                         ; 8616 60

; ----------------------------------------------------------------------------
; Set palette color 3 to green, purple, or gray based on L8B_SPEED.
R8617_SPEED_PALETTE:
    ; PPU address $3F03
    ; Background palette 0, color 3
    lda #$3F                            ; 8617 A9 3F
    sta L2006_PPUADDR                   ; 8619 8D 06 20
    lda #$03                            ; 861C A9 03
    sta L2006_PPUADDR                   ; 861E 8D 06 20
    ldx L8B_SPEED                       ; 8621 A6 8B
    lda LA22A,x                         ; 8623 BD 2A A2
    sta L2007_PPUDATA                   ; 8626 8D 07 20
    ; PPU address $3F07
    ; Background palette 1, color 3
    lda #$3F                            ; 8629 A9 3F
    sta L2006_PPUADDR                   ; 862B 8D 06 20
    lda #$07                            ; 862E A9 07
    sta L2006_PPUADDR                   ; 8630 8D 06 20
    ldx L8B_SPEED                       ; 8633 A6 8B
    lda LA22A,x                         ; 8635 BD 2A A2
    sta L2007_PPUDATA                   ; 8638 8D 07 20
    ; PPU address $3F0F
    ; Background palette 3, color 3
    lda #$3F                            ; 863B A9 3F
    sta L2006_PPUADDR                   ; 863D 8D 06 20
    lda #$0F                            ; 8640 A9 0F
    sta L2006_PPUADDR                   ; 8642 8D 06 20
    ldx L8B_SPEED                       ; 8645 A6 8B
    lda LA22A,x                         ; 8647 BD 2A A2
    sta L2007_PPUDATA                   ; 864A 8D 07 20
    rts                                 ; 864D 60

; ----------------------------------------------------------------------------
; Input A
; Write high nybble then low nybble of A to $2007.
R864E_NYBBLES_PPUDATA:
    sta L47_TEMP                                ; 864E 85 47
    and #$F0                                    ; 8650 29 F0
    lsr a                                       ; 8652 4A
    lsr a                                       ; 8653 4A
    lsr a                                       ; 8654 4A
    lsr a                                       ; 8655 4A
    sta L2007_PPUDATA                           ; 8656 8D 07 20
    lda L47_TEMP                                ; 8659 A5 47
    and #$0F                                    ; 865B 29 0F
    sta L2007_PPUDATA                           ; 865D 8D 07 20
    rts                                         ; 8660 60

; ----------------------------------------------------------------------------
; Display congratulations message.
; Called by NMI handler.
R8661:
.scope
    lda L7F_CONGRATS_IDX                        ; 8661 A5 7F
    if_ne                                       ; 8663 F0 2D
        cmp #$80                                ; 8665 C9 80
        bcs erase_message                       ; 8667 B0 64
        ; display new char once per 8 frames
        lda L43_CLOCK                           ; 8669 A5 43
        and #$07                                ; 866B 29 07
        if_eq                                   ; 866D D0 23
            lda L7F_CONGRATS_IDX                ; 866F A5 7F
            tax                                 ; 8671 AA
            lda #$01                            ; 8672 A9 01
            sta L06F1_                          ; 8674 8D F1 06
            lda #$21                            ; 8677 A9 21
            sta L2006_PPUADDR                   ; 8679 8D 06 20
            lda LA098,x                         ; 867C BD 98 A0
            sta L2006_PPUADDR                   ; 867F 8D 06 20
            lda LA0BB,x                         ; 8682 BD BB A0
            jsr print_char                      ; 8685 20 93 86
            inc L7F_CONGRATS_IDX                ; 8688 E6 7F
            cmp #$FF                            ; 868A C9 FF
            if_eq                               ; 868C D0 04
                lda #$00                        ; 868E A9 00
                sta L7F_CONGRATS_IDX            ; 8690 85 7F
            end_if
        end_if
    end_if
    rts                                         ; 8692 60

; 0 = print level (2 chars)
; 1 = print speed (3 chars)
; other = print single char
print_char:
    if_eq                                       ; 8693 D0 18
        ; output "LOW" "MED" or " HI" to $2007
        lda L8B_SPEED                           ; 8695 A5 8B
        asl a                                   ; 8697 0A
        asl a                                   ; 8698 0A
        tax                                     ; 8699 AA
        lda LA249,x                             ; 869A BD 49 A2
        sta L2007_PPUDATA                       ; 869D 8D 07 20
        lda LA249+1,x                           ; 86A0 BD 4A A2
        sta L2007_PPUDATA                       ; 86A3 8D 07 20
        lda LA249+2,x                           ; 86A6 BD 4B A2
        sta L2007_PPUDATA                       ; 86A9 8D 07 20
        rts                                     ; 86AC 60
    end_if
    cmp #$01                                    ; 86AD C9 01
    if_eq                                       ; 86AF D0 18
        ldx L96_LEVEL                           ; 86B1 A6 96
        dex                                     ; 86B3 CA
        lda LA777,x ; BCD table 00-29           ; 86B4 BD 77 A7
        and #$F0                                ; 86B7 29 F0
        lsr a                                   ; 86B9 4A
        lsr a                                   ; 86BA 4A
        lsr a                                   ; 86BB 4A
        lsr a                                   ; 86BC 4A
        sta L2007_PPUDATA                       ; 86BD 8D 07 20
        lda LA777,x ; BCD table 00-29           ; 86C0 BD 77 A7
        and #$0F                                ; 86C3 29 0F
        sta L2007_PPUDATA                       ; 86C5 8D 07 20
        rts                                     ; 86C8 60
    end_if
    sta L2007_PPUDATA                           ; 86C9 8D 07 20
    rts                                         ; 86CC 60

erase_message:
    lda L7F_CONGRATS_IDX                        ; 86CD A5 7F
    and #$7F                                    ; 86CF 29 7F
    tax                                         ; 86D1 AA
    lda #$21                                    ; 86D2 A9 21
    sta L2006_PPUADDR                           ; 86D4 8D 06 20
    lda LA098,x                                 ; 86D7 BD 98 A0
    sta L2006_PPUADDR                           ; 86DA 8D 06 20
    lda LA0BB,x                                 ; 86DD BD BB A0
    jsr erase_char                              ; 86E0 20 F1 86
    inc L7F_CONGRATS_IDX                        ; 86E3 E6 7F
    lda LA0BB,x                                 ; 86E5 BD BB A0
    cmp #$FF                                    ; 86E8 C9 FF
    if_eq                                       ; 86EA D0 04
        lda #$00                                ; 86EC A9 00
        sta L7F_CONGRATS_IDX                    ; 86EE 85 7F
    end_if
    rts                                         ; 86F0 60

; 0 = erase level (2 chars)
; 1 = erase speed (3 chars)
; other = erase single char
erase_char:
    if_eq                                       ; 86F1 D0 0C
        lda #$FF                                ; 86F3 A9 FF
        sta L2007_PPUDATA                       ; 86F5 8D 07 20
        sta L2007_PPUDATA                       ; 86F8 8D 07 20
        sta L2007_PPUDATA                       ; 86FB 8D 07 20
        rts                                     ; 86FE 60
    end_if
    cmp #$01                                    ; 86FF C9 01
    if_eq                                       ; 8701 D0 09
        lda #$FF                                ; 8703 A9 FF
        sta L2007_PPUDATA                       ; 8705 8D 07 20
        sta L2007_PPUDATA                       ; 8708 8D 07 20
        rts                                     ; 870B 60
    end_if
    lda #$FF                                    ; 870C A9 FF
    sta L2007_PPUDATA                           ; 870E 8D 07 20
    rts                                         ; 8711 60
.endscope

; ----------------------------------------------------------------------------
; Pad remainder of sprite attribute table with FF.
R8712:
    ldx L42_OAM_OFFSET                          ; 8712 A6 42
    if_ne                                       ; 8714 F0 08
        lda #$FF                                ; 8716 A9 FF
        loop
            sta L0200_OAM,x                     ; 8718 9D 00 02
            inx                                 ; 871B E8
        while_ne                                ; 871C D0 FA
    end_if
    rts                                         ; 871E 60

; ----------------------------------------------------------------------------
; Add sprite for the current pill to the OAM.
R871F_THIS_PILL_SPRITE:
    lda L0727_NUM_PLAYERS                       ; 871F AD 27 07
    sub #$01                                    ; 8722 38 E9 01
    asl a                                       ; 8725 0A
    sta L47_TEMP                                ; 8726 85 47
    lda L58_                                    ; 8728 A5 58
    sub #$04                                    ; 872A 38 E9 04
    add L47_TEMP                                ; 872D 18 65 47
    tay                                         ; 8730 A8
    lda LA6FB,y                                 ; 8731 B9 FB A6
    ; a = coordinate of left edge of playfield
    sta L47_TEMP                                ; 8734 85 47
    lda L85_PILL_COLUMN                         ; 8736 A5 85
    asl a                                       ; 8738 0A
    asl a                                       ; 8739 0A
    asl a                                       ; 873A 0A
    add L47_TEMP                                ; 873B 18 65 47
    sta L44_SPRITE_X                            ; 873E 85 44
    ldx L86_PILL_ROW                            ; 8740 A6 86
    lda LA484,x                                 ; 8742 BD 84 A4
    sta L45_SPRITE_Y                            ; 8745 85 45
; from this point, similar to R88CB_NEXT_PILL_SPRITE
    ldy L42_OAM_OFFSET                          ; 8747 A4 42
    lda LA6_PILL_SIZE                           ; 8749 A5 A6
    asl a                                       ; 874B 0A
    asl a                                       ; 874C 0A
    add LA5_PILL_DIR                            ; 874D 18 65 A5
    tax                                         ; 8750 AA
    lda LA494,x                                 ; 8751 BD 94 A4
    tax                                         ; 8754 AA
    lda L81_PILL_COLOR_0                        ; 8755 A5 81
    sta L47_TEMP                                ; 8757 85 47
    jsr R8772_PILL_SPRITE                       ; 8759 20 72 87
    lda L82_PILL_COLOR_1                        ; 875C A5 82
    sta L47_TEMP                                ; 875E 85 47
    jsr R8772_PILL_SPRITE                       ; 8760 20 72 87
    lda L83_PILL_COLOR_2                        ; 8763 A5 83
    sta L47_TEMP                                ; 8765 85 47
    jsr R8772_PILL_SPRITE                       ; 8767 20 72 87
    lda L84_PILL_COLOR_3                        ; 876A A5 84
    sta L47_TEMP                                ; 876C 85 47
    jsr R8772_PILL_SPRITE                       ; 876E 20 72 87
    rts                                         ; 8771 60

; ----------------------------------------------------------------------------
; Input: X = Pill sprite data index from LA494 (based on orientation).
; Input: Y = L42_OAM_OFFSET (required as precondition)
; Input: L47_TEMP = pill color (0 = yellow, 1 = red, 2 = blue)
; Input: L44_SPRITE_X L45_SPRITE_Y (screen position of pill)
; Increment x and y by 4.
; Add L45_SPRITE_Y to 1st byte (Y coordinate).
; Add L44_SPRITE_X to 4th byte (X coordinate).
; Add L47_TEMP to 2nd byte (Tile index number).
R8772_PILL_SPRITE:
    lda LA4A0,x                                 ; 8772 BD A0 A4
    cmp #$FF                                    ; 8775 C9 FF
    if_ne                                       ; 8777 F0 28
        add L45_SPRITE_Y                        ; 8779 18 65 45
        sta L0200_OAM,y                         ; 877C 99 00 02
        inx                                     ; 877F E8
        iny                                     ; 8780 C8
        lda LA4A0,x                             ; 8781 BD A0 A4
        add L47_TEMP                            ; 8784 18 65 47
        sta L0200_OAM,y                         ; 8787 99 00 02
        inx                                     ; 878A E8
        iny                                     ; 878B C8
        lda LA4A0,x                             ; 878C BD A0 A4
        sta L0200_OAM,y                         ; 878F 99 00 02
        inx                                     ; 8792 E8
        iny                                     ; 8793 C8
        lda LA4A0,x                             ; 8794 BD A0 A4
        add L44_SPRITE_X                        ; 8797 18 65 44
        sta L0200_OAM,y                         ; 879A 99 00 02
        inx                                     ; 879D E8
        iny                                     ; 879E C8
        sty L42_OAM_OFFSET                      ; 879F 84 42
    end_if
    rts                                         ; 87A1 60

; ----------------------------------------------------------------------------
; Display sprites on level screen (Mario, pills, viruses, level and virus counters)
; Called once in RB654_NEXT_FRAME.
R87A2_LEVEL_SPRITES:
    begin
        jsr R89C9_BLINK_CHR_BANK                ; 87A2 20 C9 89
        lda L0727_NUM_PLAYERS                   ; 87A5 AD 27 07
        cmp #$01                                ; 87A8 C9 01
        if_eq                                   ; 87AA D0 26
            jsr R89D4_VIRUS_SPRITES             ; 87AC 20 D4 89
            lda L0309_P1_LOST                   ; 87AF AD 09 03
            if_ne                               ; 87B2 F0 12
                lda #$C0                        ; 87B4 A9 C0
                sta L44_SPRITE_X                ; 87B6 85 44
                lda #$4B                        ; 87B8 A9 4B
                sta L45_SPRITE_Y                ; 87BA 85 45
                lda #$32                        ; 87BC A9 32
                sta L53_SPRITE_NUM              ; 87BE 85 53
                jsr R88F6_SPRITE                ; 87C0 20 F6 88
                ; Shrugging Mario
                jmp break                       ; 87C3 4C 6B 88
            end_if
            jsr R9075_LOAD_P1                   ; 87C6 20 75 90
            jsr R89B6_MARIO_SPRITE              ; 87C9 20 B6 89
            jsr R88B1_TOSSED_PILL_SPRITE        ; 87CC 20 B1 88
        else                                    ; 87CF 4C 6B 88
            lda L61_                            ; 87D2 A5 61
            if_eq                               ; 87D4 D0 4C
                lda L55_ROUND_WINNER            ; 87D6 A5 55
                if_eq                           ; 87D8 D0 48
                    lda L031A_P1_NEXT_COLOR_0   ; 87DA AD 1A 03
                    sta L9A_NEXT_COLOR_0        ; 87DD 85 9A
                    lda L031B_P1_NEXT_COLOR_1   ; 87DF AD 1B 03
                    sta L9B_NEXT_COLOR_1        ; 87E2 85 9B
                    lda L031C_P1_NEXT_COLOR_2   ; 87E4 AD 1C 03
                    sta L9C_NEXT_COLOR_2        ; 87E7 85 9C
                    lda L031D_P1_NEXT_COLOR_3   ; 87E9 AD 1D 03
                    sta L9D_NEXT_COLOR_3        ; 87EC 85 9D
                    lda L0325_P1_PILL_DIR       ; 87EE AD 25 03
                    sta LA5_PILL_DIR            ; 87F1 85 A5
                    lda #$38                    ; 87F3 A9 38
                    sta L44_SPRITE_X            ; 87F5 85 44
                    lda #$33                    ; 87F7 A9 33
                    sta L45_SPRITE_Y            ; 87F9 85 45
                    jsr R88CB_NEXT_PILL_SPRITE  ; 87FB 20 CB 88

                    lda L039A_P2_NEXT_COLOR_0   ; 87FE AD 9A 03
                    sta L9A_NEXT_COLOR_0        ; 8801 85 9A
                    lda L039B_P2_NEXT_COLOR_1   ; 8803 AD 9B 03
                    sta L9B_NEXT_COLOR_1        ; 8806 85 9B
                    lda L039C_P2_NEXT_COLOR_2   ; 8808 AD 9C 03
                    sta L9C_NEXT_COLOR_2        ; 880B 85 9C
                    lda L039D_P2_NEXT_COLOR_3   ; 880D AD 9D 03
                    sta L9D_NEXT_COLOR_3        ; 8810 85 9D
                    lda L03A5_P2_PILL_DIR       ; 8812 AD A5 03
                    sta LA5_PILL_DIR            ; 8815 85 A5
                    lda #$B8                    ; 8817 A9 B8
                    sta L44_SPRITE_X            ; 8819 85 44
                    lda #$33                    ; 881B A9 33
                    sta L45_SPRITE_Y            ; 881D 85 45
                    jsr R88CB_NEXT_PILL_SPRITE  ; 881F 20 CB 88
                end_if
            end_if
            lda #$2B                            ; 8822 A9 2B
            sta L45_SPRITE_Y                    ; 8824 85 45
            lda #$01                            ; 8826 A9 01
            sta L60_SPRITE_FLAGS                ; 8828 85 60
            lda #$6D                            ; 882A A9 6D
            sta L44_SPRITE_X                    ; 882C 85 44
            ldx L0316_P1_LEVEL                  ; 882E AE 16 03
            lda LA777,x ; BCD table 00-29       ; 8831 BD 77 A7
            sta L53_SPRITE_NUM                  ; 8834 85 53
            jsr R893B_BCD_SPRITE                ; 8836 20 3B 89
            lda #$84                            ; 8839 A9 84
            sta L44_SPRITE_X                    ; 883B 85 44
            ldx L0396_P2_LEVEL                  ; 883D AE 96 03
            lda LA777,x ; BCD table 00-29       ; 8840 BD 77 A7
            sta L53_SPRITE_NUM                  ; 8843 85 53
            jsr R893B_BCD_SPRITE                ; 8845 20 3B 89
            lda #$BF                            ; 8848 A9 BF
            sta L45_SPRITE_Y                    ; 884A 85 45
            lda #$6E                            ; 884C A9 6E
            sta L44_SPRITE_X                    ; 884E 85 44
            lda L0324_P1_VIRUS                  ; 8850 AD 24 03
            sta L53_SPRITE_NUM                  ; 8853 85 53
            jsr R893B_BCD_SPRITE                ; 8855 20 3B 89
            lda #$83                            ; 8858 A9 83
            sta L44_SPRITE_X                    ; 885A 85 44
            lda L03A4_P2_VIRUS                  ; 885C AD A4 03
            sta L53_SPRITE_NUM                  ; 885F 85 53
            jsr R893B_BCD_SPRITE                ; 8861 20 3B 89
            lda #$00                            ; 8864 A9 00
            sta L60_SPRITE_FLAGS                ; 8866 85 60
            jsr R886C                           ; 8868 20 6C 88
        end_if
    end
    rts                                         ; 886B 60

; ----------------------------------------------------------------------------
R886C:
    lda L55_ROUND_WINNER                        ; 886C A5 55
    if_ne                                       ; 886E F0 1C
        tax                                     ; 8870 AA
        lda LA10B,x ; $00,$34,$B4               ; 8871 BD 0B A1
        sta L44_SPRITE_X                        ; 8874 85 44
        lda #$A7                                ; 8876 A9 A7
        sta L45_SPRITE_Y                        ; 8878 85 45
        lda L43_CLOCK                           ; 887A A5 43
        and #$08                                ; 887C 29 08
        lsr a                                   ; 887E 4A
        lsr a                                   ; 887F 4A
        lsr a                                   ; 8880 4A
        add #$08                                ; 8881 18 69 08
        sta L53_SPRITE_NUM                      ; 8884 85 53
        jsr R88F6_SPRITE                        ; 8886 20 F6 88
        ; Open-mouth fist-pumping Mario
    else                                        ; 8889 4C B0 88
        lda L61_                                ; 888C A5 61
        if_ne                                   ; 888E F0 20
            tax                                 ; 8890 AA
            lda LA108,x ; $00,$34,$B4           ; 8891 BD 08 A1
            sta L44_SPRITE_X                    ; 8894 85 44
            lda #$B7                            ; 8896 A9 B7
            sta L45_SPRITE_Y                    ; 8898 85 45
            lda #$07                            ; 889A A9 07
            sta L53_SPRITE_NUM                  ; 889C 85 53
            jsr R88F6_SPRITE                    ; 889E 20 F6 88
            ; Big "X" sprite
            lda L43_CLOCK                       ; 88A1 A5 43
            and #$04                            ; 88A3 29 04
            lsr a                               ; 88A5 4A
            lsr a                               ; 88A6 4A
            tax                                 ; 88A7 AA
            lda LA10E,x ; $06,$11               ; 88A8 BD 0E A1
            sta L53_SPRITE_NUM                  ; 88AB 85 53
            jsr R88F6_SPRITE                    ; 88AD 20 F6 88
            ; Red virus sprite
        end_if
    end_if
    rts                                         ; 88B0 60

; ----------------------------------------------------------------------------
; Adds 4 entries to the sprite attribute table.
; L44_SPRITE_X = LA401,L7D_TOSS_TIMER + (LA2_NEXT_DIR & #$01 × #4)
; L45_SPRITE_Y (Y-coord) = LA41B,L7D_TOSS_TIMER + (LA2_NEXT_DIR & #$01 × #4)
R88B1_TOSSED_PILL_SPRITE:
    lda LA2_NEXT_DIR                            ; 88B1 A5 A2
    and #$01                                    ; 88B3 29 01
    asl a                                       ; 88B5 0A
    asl a                                       ; 88B6 0A
    sta L47_TEMP                                ; 88B7 85 47
    ldx L7D_TOSS_TIMER                          ; 88B9 A6 7D
    lda LA401,x                                 ; 88BB BD 01 A4
    add L47_TEMP                                ; 88BE 18 65 47
    sta L44_SPRITE_X                            ; 88C1 85 44
    lda LA41B,x                                 ; 88C3 BD 1B A4
    add L47_TEMP                                ; 88C6 18 65 47
    sta L45_SPRITE_Y                            ; 88C9 85 45
; Adds 4 entries to the sprite attribute table.
; Inputs:
; L44_SPRITE_X L45_SPRITE_Y
; L9A_NEXT_COLOR_0 L9B_NEXT_COLOR_1 L9C_NEXT_COLOR_2 L9D_NEXT_COLOR_3: 4 pill colors (0-2)
; 4×LA3_NEXT_SIZE+LA2_NEXT_DIR used as index to LA494.
; called from R87A2
R88CB_NEXT_PILL_SPRITE:
    ldy L42_OAM_OFFSET                          ; 88CB A4 42
    lda LA3_NEXT_SIZE                           ; 88CD A5 A3
    asl a                                       ; 88CF 0A
    asl a                                       ; 88D0 0A
    add LA2_NEXT_DIR                            ; 88D1 18 65 A2
    tax                                         ; 88D4 AA
    lda LA494,x                                 ; 88D5 BD 94 A4
    tax                                         ; 88D8 AA
    lda L9A_NEXT_COLOR_0                        ; 88D9 A5 9A
    sta L47_TEMP                                ; 88DB 85 47
    jsr R8772_PILL_SPRITE                       ; 88DD 20 72 87
    lda L9B_NEXT_COLOR_1                        ; 88E0 A5 9B
    sta L47_TEMP                                ; 88E2 85 47
    jsr R8772_PILL_SPRITE                       ; 88E4 20 72 87
    lda L9C_NEXT_COLOR_2                        ; 88E7 A5 9C
    sta L47_TEMP                                ; 88E9 85 47
    jsr R8772_PILL_SPRITE                       ; 88EB 20 72 87
    lda L9D_NEXT_COLOR_3                        ; 88EE A5 9D
    sta L47_TEMP                                ; 88F0 85 47
    jsr R8772_PILL_SPRITE                       ; 88F2 20 72 87
    rts                                         ; 88F5 60

; ----------------------------------------------------------------------------
; input L53_SPRITE_NUM: index to a table of pointers at $A8C2
; input L42_OAM_OFFSET: target address in page $02
; input L44_SPRITE_X: offset to add to 4th byte (x position)
; input L45_SPRITE_Y: offset to add to first byte (y position)
; copy 4 bytes at a time until #$80 is seen.
;
; 4 bytes of sprite attributes:
; - Y position of top of sprite
; - Tile index number
; - Attribute flags: v-flip, h-flip, priority, palette
; - X position of left side of sprite

R88F6_SPRITE:
    clc                                         ; 88F6 18
    lda L53_SPRITE_NUM                          ; 88F7 A5 53
    rol a                                       ; 88F9 2A
    tax                                         ; 88FA AA
    lda LA8C2,x                                 ; 88FB BD C2 A8
    sta L47_TEMP                                ; 88FE 85 47
    inx                                         ; 8900 E8
    lda LA8C2,x                                 ; 8901 BD C2 A8
    sta L48_TEMP                                ; 8904 85 48
    ldx L42_OAM_OFFSET                          ; 8906 A6 42
    ldy #$00                                    ; 8908 A0 00
    loop
        lda (L47_TEMP),y                        ; 890A B1 47
        cmp #$80                                ; 890C C9 80
        beq break                               ; 890E F0 2A
        add L45_SPRITE_Y                        ; 8910 18 65 45
        sta L0200_OAM,x                         ; 8913 9D 00 02
        inx                                     ; 8916 E8
        iny                                     ; 8917 C8
        lda (L47_TEMP),y                        ; 8918 B1 47
        sta L0200_OAM,x                         ; 891A 9D 00 02
        inx                                     ; 891D E8
        iny                                     ; 891E C8
        lda (L47_TEMP),y                        ; 891F B1 47
        sta L0200_OAM,x                         ; 8921 9D 00 02
        inx                                     ; 8924 E8
        iny                                     ; 8925 C8
        lda (L47_TEMP),y                        ; 8926 B1 47
        add L44_SPRITE_X                        ; 8928 18 65 44
        sta L0200_OAM,x                         ; 892B 9D 00 02
        inx                                     ; 892E E8
        iny                                     ; 892F C8
        lda #$04                                ; 8930 A9 04
        add L42_OAM_OFFSET                      ; 8932 18 65 42
        sta L42_OAM_OFFSET                      ; 8935 85 42
    forever                                     ; 8937 4C 0A 89
    rts                                         ; 893A 60

; ----------------------------------------------------------------------------
; Add two sprites to sprite attribute table for 2-digit number.
; At coordinates (L44_SPRITE_X, L45_SPRITE_Y), (L44_SPRITE_X+8, L45_SPRITE_Y).
; The tile indexes come from high and low nybbles of L53_SPRITE_NUM.
; Both have same flags (L60_SPRITE_FLAGS).
R893B_BCD_SPRITE:
    ldx L42_OAM_OFFSET                          ; 893B A6 42
    lda L45_SPRITE_Y                            ; 893D A5 45
    sta L0200_OAM,x                             ; 893F 9D 00 02
    lda L53_SPRITE_NUM                          ; 8942 A5 53
    lsr a                                       ; 8944 4A
    lsr a                                       ; 8945 4A
    lsr a                                       ; 8946 4A
    lsr a                                       ; 8947 4A
    sta L0200_OAM+1,x                           ; 8948 9D 01 02
    lda L60_SPRITE_FLAGS                        ; 894B A5 60
    sta L0200_OAM+2,x                           ; 894D 9D 02 02
    lda L44_SPRITE_X                            ; 8950 A5 44
    sta L0200_OAM+3,x                           ; 8952 9D 03 02
    lda L45_SPRITE_Y                            ; 8955 A5 45
    sta L0200_OAM+4,x                           ; 8957 9D 04 02
    lda L53_SPRITE_NUM                          ; 895A A5 53
    and #$0F                                    ; 895C 29 0F
    sta L0200_OAM+5,x                           ; 895E 9D 05 02
    lda L60_SPRITE_FLAGS                        ; 8961 A5 60
    sta L0200_OAM+6,x                           ; 8963 9D 06 02
    lda L44_SPRITE_X                            ; 8966 A5 44
    add #$08                                    ; 8968 18 69 08
    sta L0200_OAM+7,x                           ; 896B 9D 07 02
    lda L42_OAM_OFFSET                          ; 896E A5 42
    add #$08                                    ; 8970 18 69 08
    sta L42_OAM_OFFSET                          ; 8973 85 42
    rts                                         ; 8975 60

; ----------------------------------------------------------------------------
; unreachable?
    lda L0727_NUM_PLAYERS                       ; 8976 AD 27 07
    cmp #$02                                    ; 8979 C9 02
    bne L89B5                                   ; 897B D0 38
    lda #$27                                    ; 897D A9 27
    sta L45_SPRITE_Y                            ; 897F 85 45
    lda #$6C                                    ; 8981 A9 6C
    sta L44_SPRITE_X                            ; 8983 85 44
    lda L0725_MAX_WINS                          ; 8985 AD 25 07
    sta L53_SPRITE_NUM                          ; 8988 85 53
    lda #$00                                    ; 898A A9 00
    sta L60_SPRITE_FLAGS                        ; 898C 85 60
    jsr R893B_BCD_SPRITE                        ; 898E 20 3B 89
    lda #$3F                                    ; 8991 A9 3F
    sta L45_SPRITE_Y                            ; 8993 85 45
    lda #$6C                                    ; 8995 A9 6C
    sta L44_SPRITE_X                            ; 8997 85 44
    lda L031E_P1_WINS                           ; 8999 AD 1E 03
    sta L53_SPRITE_NUM                          ; 899C 85 53
    lda #$00                                    ; 899E A9 00
    sta L60_SPRITE_FLAGS                        ; 89A0 85 60
    jsr R893B_BCD_SPRITE                        ; 89A2 20 3B 89
    lda #$84                                    ; 89A5 A9 84
    sta L44_SPRITE_X                            ; 89A7 85 44
    lda L039E_P2_WINS                           ; 89A9 AD 9E 03
    sta L53_SPRITE_NUM                          ; 89AC 85 53
    lda #$00                                    ; 89AE A9 00
    sta L60_SPRITE_FLAGS                        ; 89B0 85 60
    jsr R893B_BCD_SPRITE                        ; 89B2 20 3B 89
L89B5:
    rts                                         ; 89B5 60

; ----------------------------------------------------------------------------
; Load sprite number L7E_MARIO_ARM + #10 at (192,75)
; Pill-tossing mario sprites
; Called once in R87A2.
R89B6_MARIO_SPRITE:
    lda #$C0                                    ; 89B6 A9 C0
    sta L44_SPRITE_X                            ; 89B8 85 44
    lda #$4B                                    ; 89BA A9 4B
    sta L45_SPRITE_Y                            ; 89BC 85 45
    lda L7E_MARIO_ARM                           ; 89BE A5 7E
    add #$0A                                    ; 89C0 18 69 0A
    sta L53_SPRITE_NUM                          ; 89C3 85 53
    jsr R88F6_SPRITE                            ; 89C5 20 F6 88
    ; Mario sprite
    rts                                         ; 89C8 60

; ----------------------------------------------------------------------------
; Set mapper CHR bank 1 to L43_CLOCK bit 3.
; Toggle CHR bank 1 between 0 and 1 every 8 frames.
; Called once in R87A2_LEVEL_SPRITES.
R89C9_BLINK_CHR_BANK:
    lda L43_CLOCK                               ; 89C9 A5 43
    and #$08                                    ; 89CB 29 08
    lsr a                                       ; 89CD 4A
    lsr a                                       ; 89CE 4A
    lsr a                                       ; 89CF 4A
    jsr RB8F4 ; Set mapper CHR bank 1.          ; 89D0 20 F4 B8
    rts                                         ; 89D3 60

; ----------------------------------------------------------------------------
; Display virus sprites
; No register inputs
; READS $43 L72_V1_COUNT L73_V2_COUNT L74_V3_COUNT L89_LOST L067e
R89D4_VIRUS_SPRITES:
.scope
    lda L89_LOST                                ; 89D4 A5 89
    if_ne                                       ; 89D6 F0 03
        jmp L8C28                               ; 89D8 4C 28 8C
    end_if

    begin
        lda L067E_                              ; 89DB AD 7E 06
        cmp L067F_                              ; 89DE CD 7F 06
        if_cc                                   ; 89E1 B0 34
            ; increment MARCH mod 4
            inc L7B_VIRUS_MARCH                 ; 89E3 E6 7B
            lda L7B_VIRUS_MARCH                 ; 89E5 A5 7B
            and #$03                            ; 89E7 29 03
            sta L7B_VIRUS_MARCH                 ; 89E9 85 7B
            lda #$00                            ; 89EB A9 00
            sta L067F_                          ; 89ED 8D 7F 06
            ldx L75_V1_STATE                    ; 89F0 A6 75
            lda LA11A,x                         ; 89F2 BD 1A A1
            bne break                           ; 89F5 D0 40
            ldx L76_V2_STATE                    ; 89F7 A6 76
            lda LA11A,x                         ; 89F9 BD 1A A1
            bne break                           ; 89FC D0 39
            ldx L77_V3_STATE                    ; 89FE A6 77
            lda LA11A,x                         ; 8A00 BD 1A A1
            bne break                           ; 8A03 D0 32
            lda L7B_VIRUS_MARCH                 ; 8A05 A5 7B
            and #$01                            ; 8A07 29 01
            bne break                           ; 8A09 D0 2C
            ; increment CYCLE mod 64
            inc L3E_VIRUS_CYCLE                 ; 8A0B E6 3E
            lda L3E_VIRUS_CYCLE                 ; 8A0D A5 3E
            cmp #$40                            ; 8A0F C9 40
            if_eq                               ; 8A11 D0 04
                lda #$00                        ; 8A13 A9 00
                sta L3E_VIRUS_CYCLE             ; 8A15 85 3E
            end_if
        end_if
        ldx L3E_VIRUS_CYCLE                     ; 8A17 A6 3E
        lda LA11F,x                             ; 8A19 BD 1F A1
        sta L38_V1_X                            ; 8A1C 85 38
        lda LA19F,x                             ; 8A1E BD 9F A1
        sta L39_V1_Y                            ; 8A21 85 39
        lda LA11F+21,x                          ; 8A23 BD 34 A1
        sta L3A_V2_X                            ; 8A26 85 3A
        lda LA19F+21,x                          ; 8A28 BD B4 A1
        sta L3B_V2_Y                            ; 8A2B 85 3B
        lda LA11F+42,x                          ; 8A2D BD 49 A1
        sta L3C_V3_X                            ; 8A30 85 3C
        lda LA19F+42,x                          ; 8A32 BD C9 A1
        sta L3D_V3_Y                            ; 8A35 85 3D
    end

    lda L38_V1_X                                ; 8A37 A5 38
    sta L44_SPRITE_X                            ; 8A39 85 44
    lda L39_V1_Y                                ; 8A3B A5 39
    sta L45_SPRITE_Y                            ; 8A3D 85 45

    begin ; switch L75_V1_STATE
        lda L75_V1_STATE                        ; 8A3F A5 75
        if_eq                                   ; 8A41 D0 11
            ldx L7B_VIRUS_MARCH                 ; 8A43 A6 7B
            lda LA25D,x ; $29,$2A,$29,$2B       ; 8A45 BD 5D A2
            sta L53_SPRITE_NUM                  ; 8A48 85 53
            jsr R88F6_SPRITE                    ; 8A4A 20 F6 88
            ; Yellow virus marching
            lda #$00                            ; 8A4D A9 00
            sta L78_V1_TIMER                    ; 8A4F 85 78
            jmp break                           ; 8A51 4C C6 8A
        end_if

        cmp #$01                                ; 8A54 C9 01
        if_eq                                   ; 8A56 D0 22
            inc L78_V1_TIMER                    ; 8A58 E6 78
            lda #$30                            ; 8A5A A9 30
            sta L53_SPRITE_NUM                  ; 8A5C 85 53
            ldx L78_V1_TIMER                    ; 8A5E A6 78
            lda LA231,x                         ; 8A60 BD 31 A2
            add L39_V1_Y                        ; 8A63 18 65 39
            sta L45_SPRITE_Y                    ; 8A66 85 45
            jsr R88F6_SPRITE                    ; 8A68 20 F6 88
            ; Yellow virus fussy
            lda L45_SPRITE_Y                    ; 8A6B A5 45
            cmp L39_V1_Y                        ; 8A6D C5 39
            bne break                           ; 8A6F D0 55
            inc L75_V1_STATE                    ; 8A71 E6 75
            lda #$00                            ; 8A73 A9 00
            sta L78_V1_TIMER                    ; 8A75 85 78
            jmp break                           ; 8A77 4C C6 8A
        end_if

        cmp #$02                                ; 8A7A C9 02
        if_eq                                   ; 8A7C D0 33
            inc L78_V1_TIMER                    ; 8A7E E6 78
            lda L78_V1_TIMER                    ; 8A80 A5 78
            cmp #$A0                            ; 8A82 C9 A0
            if_eq                               ; 8A84 D0 15
                lda #$00                        ; 8A86 A9 00
                sta L75_V1_STATE                ; 8A88 85 75
                lda L72_V1_COUNT                ; 8A8A A5 72
                if_eq                           ; 8A8C D0 0D
                    lda #$09                    ; 8A8E A9 09
                    sta L06F1_                  ; 8A90 8D F1 06
                    lda #$03                    ; 8A93 A9 03
                    sta L75_V1_STATE            ; 8A95 85 75
                    lda #$00                    ; 8A97 A9 00
                    sta L78_V1_TIMER            ; 8A99 85 78
                end_if
            end_if
            lda #$03                            ; 8A9B A9 03
            sta L06F0_                          ; 8A9D 8D F0 06
            lda L43_CLOCK                       ; 8AA0 A5 43
            and #$04                            ; 8AA2 29 04
            lsr a                               ; 8AA4 4A
            lsr a                               ; 8AA5 4A
            add #$30                            ; 8AA6 18 69 30
            sta L53_SPRITE_NUM                  ; 8AA9 85 53
            jsr R88F6_SPRITE                    ; 8AAB 20 F6 88
            ; Yellow virus fussy animation
            jmp break                           ; 8AAE 4C C6 8A
        end_if

        cmp #$03                                ; 8AB1 C9 03
        if_eq                                   ; 8AB3 D0 11
            lda #$33                            ; 8AB5 A9 33
            sta L53_SPRITE_NUM                  ; 8AB7 85 53
            jsr R88F6_SPRITE                    ; 8AB9 20 F6 88
            ; 8-way pop lines
            inc L78_V1_TIMER                    ; 8ABC E6 78
            lda L78_V1_TIMER                    ; 8ABE A5 78
            cmp #$05                            ; 8AC0 C9 05
            if_cs                               ; 8AC2 90 02
                inc L75_V1_STATE                ; 8AC4 E6 75
            end_if
        end_if
    end

    lda L3A_V2_X                                ; 8AC6 A5 3A
    sta L44_SPRITE_X                            ; 8AC8 85 44
    lda L3B_V2_Y                                ; 8ACA A5 3B
    sta L45_SPRITE_Y                            ; 8ACC 85 45

    begin ; switch L76_V2_STATE
        lda L76_V2_STATE                        ; 8ACE A5 76
        if_eq                                   ; 8AD0 D0 11
            ldx L7B_VIRUS_MARCH                 ; 8AD2 A6 7B
            lda LA255,x ; $23,$24,$23,$25       ; 8AD4 BD 55 A2
            sta L53_SPRITE_NUM                  ; 8AD7 85 53
            jsr R88F6_SPRITE                    ; 8AD9 20 F6 88
            ; Red virus marching
            lda #$00                            ; 8ADC A9 00
            sta L79_V2_TIMER                    ; 8ADE 85 79
            jmp break                           ; 8AE0 4C 55 8B
        end_if

        cmp #$01                                ; 8AE3 C9 01
        if_eq                                   ; 8AE5 D0 22
            inc L79_V2_TIMER                    ; 8AE7 E6 79
            lda #$2C                            ; 8AE9 A9 2C
            sta L53_SPRITE_NUM                  ; 8AEB 85 53
            ldx L79_V2_TIMER                    ; 8AED A6 79
            lda LA231,x                         ; 8AEF BD 31 A2
            add L3B_V2_Y                        ; 8AF2 18 65 3B
            sta L45_SPRITE_Y                    ; 8AF5 85 45
            jsr R88F6_SPRITE                    ; 8AF7 20 F6 88
            ; Red virus fussy
            lda L45_SPRITE_Y                    ; 8AFA A5 45
            cmp L3B_V2_Y                        ; 8AFC C5 3B
            bne break                           ; 8AFE D0 55
            inc L76_V2_STATE                    ; 8B00 E6 76
            lda #$00                            ; 8B02 A9 00
            sta L79_V2_TIMER                    ; 8B04 85 79
            jmp break                           ; 8B06 4C 55 8B
        end_if

        cmp #$02                                ; 8B09 C9 02
        if_eq                                   ; 8B0B D0 33
            inc L79_V2_TIMER                    ; 8B0D E6 79
            lda L79_V2_TIMER                    ; 8B0F A5 79
            cmp #$A0                            ; 8B11 C9 A0
            if_eq                               ; 8B13 D0 15
                lda #$00                        ; 8B15 A9 00
                sta L76_V2_STATE                ; 8B17 85 76
                lda L73_V2_COUNT                ; 8B19 A5 73
                if_eq                           ; 8B1B D0 0D
                    lda #$09                    ; 8B1D A9 09
                    sta L06F1_                  ; 8B1F 8D F1 06
                    lda #$03                    ; 8B22 A9 03
                    sta L76_V2_STATE            ; 8B24 85 76
                    lda #$00                    ; 8B26 A9 00
                    sta L79_V2_TIMER            ; 8B28 85 79
                end_if
            end_if
            lda #$03                            ; 8B2A A9 03
            sta L06F0_                          ; 8B2C 8D F0 06
            lda L43_CLOCK                       ; 8B2F A5 43
            and #$04                            ; 8B31 29 04
            lsr a                               ; 8B33 4A
            lsr a                               ; 8B34 4A
            add #$2C                            ; 8B35 18 69 2C
            sta L53_SPRITE_NUM                  ; 8B38 85 53
            jsr R88F6_SPRITE                    ; 8B3A 20 F6 88
            ; Red virus fussy animated
            jmp break                           ; 8B3D 4C 55 8B
        end_if

        cmp #$03                                ; 8B40 C9 03
        if_eq                                   ; 8B42 D0 11
            lda #$33                            ; 8B44 A9 33
            sta L53_SPRITE_NUM                  ; 8B46 85 53
            jsr R88F6_SPRITE                    ; 8B48 20 F6 88
            ; 8-way pop
            inc L79_V2_TIMER                    ; 8B4B E6 79
            lda L79_V2_TIMER                    ; 8B4D A5 79
            cmp #$05                            ; 8B4F C9 05
            if_cs                               ; 8B51 90 02
                inc L76_V2_STATE                ; 8B53 E6 76
            end_if
        end_if
    end

    lda L3C_V3_X                                ; 8B55 A5 3C
    sta L44_SPRITE_X                            ; 8B57 85 44
    lda L3D_V3_Y                                ; 8B59 A5 3D
    sta L45_SPRITE_Y                            ; 8B5B 85 45
    begin ; switch L77_V3_STATE
        lda L77_V3_STATE                        ; 8B5D A5 77
        if_eq                                   ; 8B5F D0 11
            ldx L7B_VIRUS_MARCH                 ; 8B61 A6 7B
            lda LA259,x ; $26,$27,$26,$28       ; 8B63 BD 59 A2
            sta L53_SPRITE_NUM                  ; 8B66 85 53
            jsr R88F6_SPRITE                    ; 8B68 20 F6 88
            ; Blue virus marching
            lda #$00                            ; 8B6B A9 00
            sta L7A_V3_TIMER                    ; 8B6D 85 7A
            jmp break                           ; 8B6F 4C E4 8B
        end_if

        cmp #$01                                ; 8B72 C9 01
        if_eq                                   ; 8B74 D0 22
            inc L7A_V3_TIMER                    ; 8B76 E6 7A
            lda #$2E                            ; 8B78 A9 2E
            sta L53_SPRITE_NUM                  ; 8B7A 85 53
            ldx L7A_V3_TIMER                    ; 8B7C A6 7A
            lda LA231,x                         ; 8B7E BD 31 A2
            add L3D_V3_Y                        ; 8B81 18 65 3D
            sta L45_SPRITE_Y                    ; 8B84 85 45
            jsr R88F6_SPRITE                    ; 8B86 20 F6 88
            ; Blue virus fussy
            lda L45_SPRITE_Y                    ; 8B89 A5 45
            cmp L3D_V3_Y                        ; 8B8B C5 3D
            bne break                           ; 8B8D D0 55
            inc L77_V3_STATE                    ; 8B8F E6 77
            lda #$00                            ; 8B91 A9 00
            sta L7A_V3_TIMER                    ; 8B93 85 7A
            jmp break                           ; 8B95 4C E4 8B
        end_if

        cmp #$02                                ; 8B98 C9 02
        if_eq                                   ; 8B9A D0 33
            inc L7A_V3_TIMER                    ; 8B9C E6 7A
            lda L7A_V3_TIMER                    ; 8B9E A5 7A
            cmp #$A0                            ; 8BA0 C9 A0
            if_eq                               ; 8BA2 D0 15
                lda #$00                        ; 8BA4 A9 00
                sta L77_V3_STATE                ; 8BA6 85 77
                lda L74_V3_COUNT                ; 8BA8 A5 74
                if_eq                           ; 8BAA D0 0D
                    lda #$09                    ; 8BAC A9 09
                    sta L06F1_                  ; 8BAE 8D F1 06
                    lda #$03                    ; 8BB1 A9 03
                    sta L77_V3_STATE            ; 8BB3 85 77
                    lda #$00                    ; 8BB5 A9 00
                    sta L7A_V3_TIMER            ; 8BB7 85 7A
                end_if
            end_if
            lda #$03                            ; 8BB9 A9 03
            sta L06F0_                          ; 8BBB 8D F0 06
            lda L43_CLOCK                       ; 8BBE A5 43
            and #$04                            ; 8BC0 29 04
            lsr a                               ; 8BC2 4A
            lsr a                               ; 8BC3 4A
            add #$2E                            ; 8BC4 18 69 2E
            sta L53_SPRITE_NUM                  ; 8BC7 85 53
            jsr R88F6_SPRITE                    ; 8BC9 20 F6 88
            jmp break                           ; 8BCC 4C E4 8B
        end_if

        cmp #$03                                ; 8BCF C9 03
        if_eq                                   ; 8BD1 D0 11
            lda #$33                            ; 8BD3 A9 33
            sta L53_SPRITE_NUM                  ; 8BD5 85 53
            jsr R88F6_SPRITE                    ; 8BD7 20 F6 88
            ; 8-way pop
            inc L7A_V3_TIMER                    ; 8BDA E6 7A
            lda L7A_V3_TIMER                    ; 8BDC A5 7A
            cmp #$05                            ; 8BDE C9 05
            if_cs                               ; 8BE0 90 02
                inc L77_V3_STATE                ; 8BE2 E6 77
            end_if
        end_if
    end
    rts                                         ; 8BE4 60
.endscope

; ----------------------------------------------------------------------------
; Display all sprites used on the title screen.
R8BE5_TITLE_SPRITES:
    lda L067E_                                  ; 8BE5 AD 7E 06
    cmp L067F_                                  ; 8BE8 CD 7F 06
    ; if L067E_ < L067F_
    if_cc                                       ; 8BEB B0 0D
        inc L7B_VIRUS_MARCH                     ; 8BED E6 7B
        lda L7B_VIRUS_MARCH                     ; 8BEF A5 7B
        and #$03                                ; 8BF1 29 03
        sta L7B_VIRUS_MARCH                     ; 8BF3 85 7B
        lda #$00                                ; 8BF5 A9 00
        sta L067F_                              ; 8BF7 8D 7F 06
    end_if
    lda #$C0                                    ; 8BFA A9 C0
    sta L44_SPRITE_X                            ; 8BFC 85 44
    lda #$B0                                    ; 8BFE A9 B0
    sta L45_SPRITE_Y                            ; 8C00 85 45
    ldx L7B_VIRUS_MARCH                         ; 8C02 A6 7B
    lda LA259,x ; $26,$27,$26,$28               ; 8C04 BD 59 A2
    sta L53_SPRITE_NUM                          ; 8C07 85 53
    jsr R88F6_SPRITE                            ; 8C09 20 F6 88
    ; Blue virus marching
    lda #$2C                                    ; 8C0C A9 2C
    sta L44_SPRITE_X                            ; 8C0E 85 44
    lda #$A7                                    ; 8C10 A9 A7
    sta L45_SPRITE_Y                            ; 8C12 85 45
    lda #$48                                    ; 8C14 A9 48
    sta L53_SPRITE_NUM                          ; 8C16 85 53
    ; Foot-tapping Mario
    jsr R88F6_SPRITE                            ; 8C18 20 F6 88
    lda L7B_VIRUS_MARCH                         ; 8C1B A5 7B
    and #$01                                    ; 8C1D 29 01
    add #$49                                    ; 8C1F 18 69 49
    sta L53_SPRITE_NUM                          ; 8C22 85 53
    jsr R88F6_SPRITE                            ; 8C24 20 F6 88
    ; Tapping foot
    rts                                         ; 8C27 60

; ----------------------------------------------------------------------------
; Jump from R89D4_VIRUS_SPRITES
L8C28:
    lda L38_V1_X                                ; 8C28 A5 38
    sta L44_SPRITE_X                            ; 8C2A 85 44
    lda L39_V1_Y                                ; 8C2C A5 39
    sta L45_SPRITE_Y                            ; 8C2E 85 45
    lda L43_CLOCK                               ; 8C30 A5 43
    and #$04                                    ; 8C32 29 04
    lsr a                                       ; 8C34 4A
    lsr a                                       ; 8C35 4A
    tax                                         ; 8C36 AA
    lda LA0FF,x ; $29,$14                       ; 8C37 BD FF A0
    sta L53_SPRITE_NUM                          ; 8C3A 85 53
    jsr R88F6_SPRITE                            ; 8C3C 20 F6 88
    lda L3A_V2_X                                ; 8C3F A5 3A
    sta L44_SPRITE_X                            ; 8C41 85 44
    lda L3B_V2_Y                                ; 8C43 A5 3B
    sta L45_SPRITE_Y                            ; 8C45 85 45
    lda L43_CLOCK                               ; 8C47 A5 43
    and #$08                                    ; 8C49 29 08
    lsr a                                       ; 8C4B 4A
    lsr a                                       ; 8C4C 4A
    lsr a                                       ; 8C4D 4A
    tax                                         ; 8C4E AA
    lda LA101,x ; #$23 or #$13                  ; 8C4F BD 01 A1
    sta L53_SPRITE_NUM                          ; 8C52 85 53
    jsr R88F6_SPRITE                            ; 8C54 20 F6 88
    lda L3C_V3_X                                ; 8C57 A5 3C
    sta L44_SPRITE_X                            ; 8C59 85 44
    lda L3D_V3_Y                                ; 8C5B A5 3D
    sta L45_SPRITE_Y                            ; 8C5D 85 45
    lda L43_CLOCK                               ; 8C5F A5 43
    and #$04                                    ; 8C61 29 04
    lsr a                                       ; 8C63 4A
    lsr a                                       ; 8C64 4A
    tax                                         ; 8C65 AA
    lda LA103,x ; #$26 or #$15                  ; 8C66 BD 03 A1
    sta L53_SPRITE_NUM                          ; 8C69 85 53
    jsr R88F6_SPRITE                            ; 8C6B 20 F6 88
    rts                                         ; 8C6E 60

; ----------------------------------------------------------------------------
; R9BB9_GAME_STATE_MACHINE routine 1.
L8C6F_GAME_STATE_1:
.scope
    jsr R8C73                                   ; 8C6F 20 73 8C
    rts                                         ; 8C72 60

; --------------------------------------
; Jump to one of 9 subroutines based on L87_STATE.
; This is the sequence of stuff that needs to get done once a pill is placed.
R8C73:
    lda L87_STATE                               ; 8C73 A5 87
    jsr RB8AC_JUMP_TABLE                        ; 8C75 20 AC B8
    .word L8C8A_0 ; 0: reset combo count, state 1
    .word L8C91_1 ; 1: state 2
    .word L8C91_2 ; 2: state 3
    .word L8C94_3_TILES_FALL ; to state 2 if tiles fell, state 4 if none fell
    .word L9413_4 ; L94_ = 0, state 5.
    .word L91FB_5_CHECK_HORIZONTAL_CLEAR ; to state 6 (possibly after delay)
    .word L9469_6_CHECK_VERTICAL_CLEAR ; to state 7
    .word L92DB_7_FIX_SPLIT_PILLS ; to state 8 if L94_ = 0, else state 1.
    .word L8D4F_8

; --------------------------------------
; R8C73 routine 0.
; Reset combo count. Go to state 1.
L8C8A_0:
    lda #$00
    sta LAD_VIRUS_COMBO                         ; 8C8C 85 AD
    inc L87_STATE                               ; 8C8E E6 87
    rts                                         ; 8C90 60

; --------------------------------------
; R8C73 routine 1 and 2.
; Go to state 2 and 3 (respectively).
L8C91_1:
L8C91_2:
    inc L87_STATE                               ; 8C91 E6 87
    rts                                         ; 8C93 60

; --------------------------------------
; R8C73 routine 3.
; Make tiles fall down.
; TODO: What is L06F1_ used for? (Probably music/sound effects.)
L8C94_3_TILES_FALL:
    lda L80_UPDATE_ROW                          ; 8C94 A5 80
    cmp #$FF                                    ; 8C96 C9 FF
    if_eq_jmp                                   ; 8C98 F0 03 4C 4E 8D
        lda #$00                                ; 8C9D A9 00
        sta L47_TEMP                            ; 8C9F 85 47
        sta L57_                                ; 8CA1 85 57
        ; loop from 127 down to 0 (bottom to top)
        ldy #$7F                                ; 8CA3 A0 7F
        sty L49_TEMP                            ; 8CA5 84 49
        loop
            ldy L49_TEMP                        ; 8CA7 A4 49
            lda ($57),y                         ; 8CA9 B1 57
            cmp #$F0                            ; 8CAB C9 F0
            if_cc ; if < #$F0                   ; 8CAD B0 03
                jmp next                        ; 8CAF 4C 34 8D
            end_if
            lda #$FF                            ; 8CB2 A9 FF
            sta ($57),y                         ; 8CB4 91 57
            sta L48_TEMP                        ; 8CB6 85 48
            lda L0724_DEBUG_DISABLE_FALLING     ; 8CB8 AD 24 07
            bne next                            ; 8CBB D0 77
            sty L49_TEMP ; redundant            ; 8CBD 84 49
            tya                                 ; 8CBF 98
            sub #$08                            ; 8CC0 38 E9 08
            tay                                 ; 8CC3 A8
            ; consider tile 1 row above
            lda ($57),y                         ; 8CC4 B1 57
            cmp #$A0 ; left-right tile (unused) ; 8CC6 C9 A0
            bcs next ; doesn't fall             ; 8CC8 B0 6A
            and #$F0                            ; 8CCA 29 F0
            cmp #$60 ; open-right tile          ; 8CCC C9 60
            beq next ; doesn't fall             ; 8CCE F0 64
            cmp #$A0 ; left-right tile          ; 8CD0 C9 A0
            beq next ; doesn't fall             ; 8CD2 F0 60
            cmp #$70 ; open-left tile           ; 8CD4 C9 70
            if_eq                               ; 8CD6 D0 40
                ; check whether entire left-right
                ; pill is unsupported underneath
                sty L4A_TEMP ; row above        ; 8CD8 84 4A
                sty L4C_TEMP ; row above        ; 8CDA 84 4C
                lda L49_TEMP ; this row         ; 8CDC A5 49
                sta L4B_TEMP ; this row         ; 8CDE 85 4B
                loop
                    dec L4A_TEMP                ; 8CE0 C6 4A
                    dec L4B_TEMP                ; 8CE2 C6 4B
                    ldy L4B_TEMP                ; 8CE4 A4 4B
                    lda ($57),y ; this row      ; 8CE6 B1 57
                    cmp #$F0                    ; 8CE8 C9 F0
                    bcc next                    ; 8CEA 90 48
                    ldy L4A_TEMP                ; 8CEC A4 4A
                    lda ($57),y ; row above     ; 8CEE B1 57
                    and #$F0                    ; 8CF0 29 F0
                    cmp #$60 ; open-right tile  ; 8CF2 C9 60
                while_ne                        ; 8CF4 D0 EA
                loop
                    ; make entire pill fall
                    ldy L4C_TEMP                ; 8CF6 A4 4C
                    lda ($57),y ; row above     ; 8CF8 B1 57
                    ldy L49_TEMP                ; 8CFA A4 49
                    sta ($57),y ; this row      ; 8CFC 91 57
                    lda #$FF                    ; 8CFE A9 FF
                    ldy L4C_TEMP                ; 8D00 A4 4C
                    sta ($57),y ; row above     ; 8D02 91 57
                    lda L49_TEMP                ; 8D04 A5 49
                    cmp L4B_TEMP                ; 8D06 C5 4B
                    beq next                    ; 8D08 F0 2A
                    dec L49_TEMP                ; 8D0A C6 49
                    dec L4C_TEMP                ; 8D0C C6 4C
                    inc L47_TEMP                ; 8D0E E6 47
                    lda #$07                    ; 8D10 A9 07
                    sta L06F1_                  ; 8D12 8D F1 06
                forever                         ; 8D15 4C F6 8C
            end_if
            ; any other tile type should fall
            ldy L49_TEMP                        ; 8D18 A4 49
            tya                                 ; 8D1A 98
            sub #$08 ; duplicated work          ; 8D1B 38 E9 08
            tay                                 ; 8D1E A8
            lda ($57),y ; row above             ; 8D1F B1 57
            sta L48_TEMP                        ; 8D21 85 48
            lda #$FF                            ; 8D23 A9 FF
            sta ($57),y                         ; 8D25 91 57
            ldy L49_TEMP                        ; 8D27 A4 49
            lda L48_TEMP                        ; 8D29 A5 48
            sta ($57),y                         ; 8D2B 91 57
            inc L47_TEMP                        ; 8D2D E6 47
            lda #$07                            ; 8D2F A9 07
            sta L06F1_                          ; 8D31 8D F1 06
        next:
            dec L49_TEMP                        ; 8D34 C6 49
            ldy L49_TEMP                        ; 8D36 A4 49
            cpy #$FF                            ; 8D38 C0 FF
            beq break                           ; 8D3A F0 03
        forever                                 ; 8D3C 4C A7 8C
        lda #$0F                                ; 8D3F A9 0F
        sta L80_UPDATE_ROW                      ; 8D41 85 80
        ; did anything fall?
        lda L47_TEMP                            ; 8D43 A5 47
        if_ne                                   ; 8D45 F0 05
            ; if so, go to state 2
            dec L87_STATE                       ; 8D47 C6 87
        else                                    ; 8D49 4C 4E 8D
            ; if not, go to state 4
            inc L87_STATE                       ; 8D4C E6 87
        end_if
    end_if
    rts                                         ; 8D4E 60

; --------------------------------------
; R8C73 routine 8.
; Go to state 0, L97_GAME_STATE to 2.
L8D4F_8:
    lda #$00                                    ; 8D4F A9 00
    sta L87_STATE                               ; 8D51 85 87
    inc L97_GAME_STATE                          ; 8D53 E6 97
    rts                                         ; 8D55 60

.endscope

; ----------------------------------------------------------------------------
; R9BB9_GAME_STATE_MACHINE routine 0.
L8D56_GAME_STATE_0:
.scope
    lda LA8_VIRUS_TO_ADD                        ; 8D56 A5 A8
    if_ne ; this never happens, does it?        ; 8D58 F0 05
        inc L97_GAME_STATE                      ; 8D5A E6 97
    else                                        ; 8D5C 4C 6F 8D
        lda #$00                                ; 8D5F A9 00
        sta LA1_CLEAR_TOTAL                     ; 8D61 85 A1
        jsr R871F_THIS_PILL_SPRITE              ; 8D63 20 1F 87
        jsr R8D70_DROP_PILL ; may go to state 1 ; 8D66 20 70 8D
        jsr R8DBF_PILL_MOVE                     ; 8D69 20 BF 8D
        jsr R8E2B_PILL_ROTATE                   ; 8D6C 20 2B 8E
    end_if
    rts                                         ; 8D6F 60

; --------------------------------------
; Called once, in L8D56.
R8D70_DROP_PILL:
    begin
        lda L43_CLOCK                           ; 8D70 A5 43
        and #$01                                ; 8D72 29 01
        beq L8D7E                               ; 8D74 F0 08
        lda L5C_INPUT_OLD                       ; 8D76 A5 5C
        and #$0F                                ; 8D78 29 0F
        cmp #$04 ; "down"                       ; 8D7A C9 04
        beq L8D94                               ; 8D7C F0 16
    L8D7E:
        inc L92_DROP_TIMER                      ; 8D7E E6 92
        lda L8A_EXTRA_SPEED                     ; 8D80 A5 8A
        sta LA0_TEMP ; redundant copy           ; 8D82 85 A0
        ldx L8B_SPEED                           ; 8D84 A6 8B
        lda LA38D,x ; $0F,$19,$1F               ; 8D86 BD 8D A3
        add LA0_TEMP                            ; 8D89 18 65 A0
        tax                                     ; 8D8C AA
        lda LA795,x ; drop timer threshold      ; 8D8D BD 95 A7
        cmp L92_DROP_TIMER                      ; 8D90 C5 92
        bcs break                               ; 8D92 B0 2A
    L8D94:
        dec L86_PILL_ROW                        ; 8D94 C6 86
        lda #$00                                ; 8D96 A9 00
        sta L92_DROP_TIMER                      ; 8D98 85 92
        jsr R90D3_COLLISION                     ; 8D9A 20 D3 90
        if_eq                                   ; 8D9D D0 06
            lda L86_PILL_ROW                    ; 8D9F A5 86
            cmp #$FF                            ; 8DA1 C9 FF
            bne break                           ; 8DA3 D0 19
        end_if
        inc L86_PILL_ROW                        ; 8DA5 E6 86
        lda #$07                                ; 8DA7 A9 07
        sta L06F1_                              ; 8DA9 8D F1 06
        jsr R8F52_PLACE_PILL                    ; 8DAC 20 52 8F
        ; make the program crash if L0740_CHECKSUM_FAIL is nonzero
        lda L0740_CHECKSUM_FAIL                 ; 8DAF AD 40 07
        if_ne                                   ; 8DB2 F0 05
            lda L53_SPRITE_NUM                  ; 8DB4 A5 53
            pha                                 ; 8DB6 48
            pha                                 ; 8DB7 48
            pha                                 ; 8DB8 48
        end_if
        inc L97_GAME_STATE                      ; 8DB9 E6 97
        jmp break                               ; 8DBB 4C BE 8D
    end
    rts                                         ; 8DBE 60

; --------------------------------------
; Increment or decrement pill column based on controller input.
; Repeat every 6 frames after holding for 16.
R8DBF_PILL_MOVE:
    begin
        lda L5B_INPUT_NEW                       ; 8DBF A5 5B
        and #$03 ; left or right                ; 8DC1 29 03
        if_eq                                   ; 8DC3 D0 15
            lda L5C_INPUT_OLD                   ; 8DC5 A5 5C
            and #$03 ; left or right            ; 8DC7 29 03
            beq break                           ; 8DC9 F0 5F
            inc L93_REPEAT_TIMER                ; 8DCB E6 93
            lda L93_REPEAT_TIMER                ; 8DCD A5 93
            cmp #$10                            ; 8DCF C9 10
            bmi break                           ; 8DD1 30 57
            lda #$0A                            ; 8DD3 A9 0A
            sta L93_REPEAT_TIMER                ; 8DD5 85 93
        else                                    ; 8DD7 4C E3 8D
            lda #$00                            ; 8DDA A9 00
            sta L93_REPEAT_TIMER                ; 8DDC 85 93
            lda #$03                            ; 8DDE A9 03
            sta L06F1_                          ; 8DE0 8D F1 06
        end_if
        lda L5C_INPUT_OLD                       ; 8DE3 A5 5C
        and #$01 ; "right"                      ; 8DE5 29 01
        if_ne                                   ; 8DE7 F0 20
            lda LA5_PILL_DIR                    ; 8DE9 A5 A5
            and #$01 ; 1 = U/D, 0 = L/R         ; 8DEB 29 01
            add #$06                            ; 8DED 18 69 06
            cmp L85_PILL_COLUMN                 ; 8DF0 C5 85
            if_ne                               ; 8DF2 F0 15
                inc L85_PILL_COLUMN             ; 8DF4 E6 85
                jsr R90D3_COLLISION             ; 8DF6 20 D3 90
                if_eq                           ; 8DF9 D0 08
                    lda #$03                    ; 8DFB A9 03
                    sta L06F1_                  ; 8DFD 8D F1 06
                else                            ; 8E00 4C 09 8E
                    dec L85_PILL_COLUMN         ; 8E03 C6 85
                    lda #$0F                    ; 8E05 A9 0F
                    sta L93_REPEAT_TIMER        ; 8E07 85 93
                end_if
            end_if
        end_if
        lda L5C_INPUT_OLD                       ; 8E09 A5 5C
        and #$02 ; "left"                       ; 8E0B 29 02
        if_ne                                   ; 8E0D F0 1B
            lda L85_PILL_COLUMN                 ; 8E0F A5 85
            cmp #$00                            ; 8E11 C9 00
            if_ne                               ; 8E13 F0 15
                dec L85_PILL_COLUMN             ; 8E15 C6 85
                jsr R90D3_COLLISION             ; 8E17 20 D3 90
                if_eq                           ; 8E1A D0 08
                    lda #$03                    ; 8E1C A9 03
                    sta L06F1_                  ; 8E1E 8D F1 06
                else                            ; 8E21 4C 2A 8E
                    inc L85_PILL_COLUMN         ; 8E24 E6 85
                    lda #$0F                    ; 8E26 A9 0F
                    sta L93_REPEAT_TIMER        ; 8E28 85 93
                end_if
            end_if
        end_if
    end
    rts                                         ; 8E2A 60

; --------------------------------------
; Increment or decrement LA5_PILL_DIR (mod 4) depending on controller input.
R8E2B_PILL_ROTATE:
    lda LA5_PILL_DIR                            ; 8E2B A5 A5
    sta L4A_TEMP                                ; 8E2D 85 4A
    lda L85_PILL_COLUMN                         ; 8E2F A5 85
    sta L4B_TEMP                                ; 8E31 85 4B
    lda L5B_INPUT_NEW                           ; 8E33 A5 5B
    and #$80 ; "A"                              ; 8E35 29 80
    if_ne                                       ; 8E37 F0 10
        lda #$05                                ; 8E39 A9 05
        sta L06F1_                              ; 8E3B 8D F1 06
        dec LA5_PILL_DIR                        ; 8E3E C6 A5
        lda LA5_PILL_DIR                        ; 8E40 A5 A5
        and #$03                                ; 8E42 29 03
        sta LA5_PILL_DIR                        ; 8E44 85 A5
        jsr R8E60_CHECK_ROTATE                  ; 8E46 20 60 8E
    end_if
    lda L5B_INPUT_NEW                           ; 8E49 A5 5B
    and #$40 ; "B"                              ; 8E4B 29 40
    if_ne                                       ; 8E4D F0 10
        lda #$05                                ; 8E4F A9 05
        sta L06F1_                              ; 8E51 8D F1 06
        inc LA5_PILL_DIR                        ; 8E54 E6 A5
        lda LA5_PILL_DIR                        ; 8E56 A5 A5
        and #$03                                ; 8E58 29 03
        sta LA5_PILL_DIR                        ; 8E5A 85 A5
        jsr R8E60_CHECK_ROTATE                  ; 8E5C 20 60 8E
    end_if
    rts                                         ; 8E5F 60

; --------------------------------------
; Adjust or undo pill rotation if there are collisions.
; Previous DIR and COLUMN values are passed in L4A_TEMP/L4B_TEMP.
R8E60_CHECK_ROTATE:
    begin
        lda LA5_PILL_DIR                        ; 8E60 A5 A5
        and #$01 ; 1 = U/D, 0 = L/R             ; 8E62 29 01
        if_eq                                   ; 8E64 D0 19
            jsr R90D3_COLLISION                 ; 8E66 20 D3 90
            if_eq                               ; 8E69 D0 12
                lda L5C_INPUT_OLD               ; 8E6B A5 5C
                and #$02 ; "left"               ; 8E6D 29 02
                beq break                       ; 8E6F F0 1B
                dec L85_PILL_COLUMN             ; 8E71 C6 85
                jsr R90D3_COLLISION             ; 8E73 20 D3 90
                beq break                       ; 8E76 F0 14
                inc L85_PILL_COLUMN             ; 8E78 E6 85
                jmp break                       ; 8E7A 4C 8C 8E
            end_if
            dec L85_PILL_COLUMN                 ; 8E7D C6 85
        end_if
        jsr R90D3_COLLISION                     ; 8E7F 20 D3 90
        beq break                               ; 8E82 F0 08

        lda L4A_TEMP                            ; 8E84 A5 4A
        sta LA5_PILL_DIR                        ; 8E86 85 A5
        lda L4B_TEMP                            ; 8E88 A5 4B
        sta L85_PILL_COLUMN                     ; 8E8A 85 85
    end
    rts                                         ; 8E8C 60

.endscope ;L8D56

; ----------------------------------------------------------------------------
R8E8D_NEW_PILL:
; L81_PILL_COLOR_0 <- L9A_NEXT_COLOR_0
; L82_PILL_COLOR_1 <- L9B_NEXT_COLOR_1
; L83_PILL_COLOR_2 <- L9C_NEXT_COLOR_2
; L84_PILL_COLOR_3 <- L9D_NEXT_COLOR_3
; LA5_PILL_DIR <- #$00
; LA6_PILL_SIZE <- LA3_NEXT_SIZE
; if L0741_DEMO_MODE > 0 then x <- LCF80,LA7_PILL_INDEX else x <- L0780_PILL_SEQUENCE,LA7_PILL_INDEX
; L9A_NEXT_COLOR_0 <- LA7FD,x
; L9B_NEXT_COLOR_1 <- LA806,x
; inc LA7_PILL_INDEX
; LA7_PILL_INDEX &= #$7F
; L7D_TOSS_TIMER <- #$00
; LA2_NEXT_DIR <- #$00
; LA3_NEXT_SIZE <- #$02
; L85_PILL_COLUMN <- #$03
; L86_PILL_ROW <- #$0F
; inc L90_PILL_COUNT_0
; if L90_PILL_COUNT_0 & #$0F >= #$0A then L90_PILL_COUNT_0+=#$06
; if L90_PILL_COUNT_0 & #$F0 >= #$A0 then L90_PILL_COUNT_0+=#$60; L91_PILL_COUNT_1++
; if L91_PILL_COUNT_1 & #$0F >= #$0A then L91_PILL_COUNT_1+=#$06
; if L91_PILL_COUNT_1 & #$F0 >= #$A0 then L91_PILL_COUNT_1+=#$60; L90_PILL_COUNT_0 <- #$99; L91_PILL_COUNT_1 <- #$99
; if (L0723_DEBUG_DISABLE_SPEEDUP == 0) {
;     if (L90_PILL_COUNT_0 == 0 || L90_PILL_COUNT_0 & #$0F == 0) {
;         if (L8A_EXTRA_SPEED != #$31) {
;             inc L8A_EXTRA_SPEED
;             L06F1_ <- #$06
;             L52_REDRAW_FLAGS |= #$12
;         }
;     }
; }
; L8F_CLEAR_COMBO <- #$00
; L52_REDRAW_FLAGS |= #$01
.scope
    lda L9A_NEXT_COLOR_0                        ; 8E8D A5 9A
    sta L81_PILL_COLOR_0                        ; 8E8F 85 81
    lda L9B_NEXT_COLOR_1                        ; 8E91 A5 9B
    sta L82_PILL_COLOR_1                        ; 8E93 85 82
    lda L9C_NEXT_COLOR_2                        ; 8E95 A5 9C
    sta L83_PILL_COLOR_2                        ; 8E97 85 83
    lda L9D_NEXT_COLOR_3                        ; 8E99 A5 9D
    sta L84_PILL_COLOR_3                        ; 8E9B 85 84
    lda #$00                                    ; 8E9D A9 00
    sta LA5_PILL_DIR                            ; 8E9F 85 A5
    lda LA3_NEXT_SIZE                           ; 8EA1 A5 A3
    sta LA6_PILL_SIZE                           ; 8EA3 85 A6
    lda L0741_DEMO_MODE                         ; 8EA5 AD 41 07
    if_ne                                       ; 8EA8 F0 09
        ldx LA7_PILL_INDEX                      ; 8EAA A6 A7
        lda LCF80,x                             ; 8EAC BD 80 CF
        tax                                     ; 8EAF AA
    else                                        ; 8EB0 4C B9 8E
        ldx LA7_PILL_INDEX                      ; 8EB3 A6 A7
        lda L0780_PILL_SEQUENCE,x               ; 8EB5 BD 80 07
        tax                                     ; 8EB8 AA
    end_if
    lda LA7FD,x                                 ; 8EB9 BD FD A7
    sta L9A_NEXT_COLOR_0                        ; 8EBC 85 9A
    lda LA806,x                                 ; 8EBE BD 06 A8
    sta L9B_NEXT_COLOR_1                        ; 8EC1 85 9B
    inc LA7_PILL_INDEX                          ; 8EC3 E6 A7
    lda LA7_PILL_INDEX                          ; 8EC5 A5 A7
    and #$7F                                    ; 8EC7 29 7F
    sta LA7_PILL_INDEX                          ; 8EC9 85 A7
    lda #$00                                    ; 8ECB A9 00
    sta L7D_TOSS_TIMER                          ; 8ECD 85 7D
    sta LA2_NEXT_DIR                            ; 8ECF 85 A2
    lda #$02                                    ; 8ED1 A9 02
    sta LA3_NEXT_SIZE                           ; 8ED3 85 A3
    lda #$03                                    ; 8ED5 A9 03
    sta L85_PILL_COLUMN                         ; 8ED7 85 85
    lda #$0F                                    ; 8ED9 A9 0F
    sta L86_PILL_ROW                            ; 8EDB 85 86
    inc L90_PILL_COUNT_0                        ; 8EDD E6 90
    lda L90_PILL_COUNT_0                        ; 8EDF A5 90
    and #$0F                                    ; 8EE1 29 0F
    cmp #$0A                                    ; 8EE3 C9 0A
    if_cs                                       ; 8EE5 90 07
        lda L90_PILL_COUNT_0                    ; 8EE7 A5 90
        add #$06                                ; 8EE9 18 69 06
        sta L90_PILL_COUNT_0                    ; 8EEC 85 90
    end_if
    lda L90_PILL_COUNT_0                        ; 8EEE A5 90
    and #$F0                                    ; 8EF0 29 F0
    cmp #$A0                                    ; 8EF2 C9 A0
    if_cs                                       ; 8EF4 90 09
        lda L90_PILL_COUNT_0                    ; 8EF6 A5 90
        add #$60                                ; 8EF8 18 69 60
        sta L90_PILL_COUNT_0                    ; 8EFB 85 90
        inc L91_PILL_COUNT_1                    ; 8EFD E6 91
    end_if
    lda L91_PILL_COUNT_1                        ; 8EFF A5 91
    and #$0F                                    ; 8F01 29 0F
    cmp #$0A                                    ; 8F03 C9 0A
    if_cs                                       ; 8F05 90 07
        lda L91_PILL_COUNT_1                    ; 8F07 A5 91
        add #$06                                ; 8F09 18 69 06
        sta L91_PILL_COUNT_1                    ; 8F0C 85 91
    end_if
    lda L91_PILL_COUNT_1                        ; 8F0E A5 91
    and #$F0                                    ; 8F10 29 F0
    cmp #$A0                                    ; 8F12 C9 A0
    if_cs                                       ; 8F14 90 0B
        lda L91_PILL_COUNT_1                    ; 8F16 A5 91
        add #$60                                ; 8F18 18 69 60
        lda #$99                                ; 8F1B A9 99
        sta L90_PILL_COUNT_0                    ; 8F1D 85 90
        sta L91_PILL_COUNT_1                    ; 8F1F 85 91
    end_if
    lda L0723_DEBUG_DISABLE_SPEEDUP             ; 8F21 AD 23 07
    if_eq                                       ; 8F24 D0 21
        lda L90_PILL_COUNT_0                    ; 8F26 A5 90
        cmp #$00                                ; 8F28 C9 00
        beq L8F32                               ; 8F2A F0 06
        and #$0F                                ; 8F2C 29 0F
        cmp #$00                                ; 8F2E C9 00
        bne L8F47                               ; 8F30 D0 15
    L8F32:
        lda L8A_EXTRA_SPEED                     ; 8F32 A5 8A
        cmp #$31                                ; 8F34 C9 31
        if_ne                                   ; 8F36 F0 0F
            inc L8A_EXTRA_SPEED                 ; 8F38 E6 8A
            lda #$06                            ; 8F3A A9 06
            sta L06F1_                          ; 8F3C 8D F1 06
            ; redraw level# and virus#
            lda L52_REDRAW_FLAGS                ; 8F3F A5 52
            ora #$12                            ; 8F41 09 12
            ora #$02                            ; 8F43 09 02
            sta L52_REDRAW_FLAGS                ; 8F45 85 52
        end_if
    L8F47:
    end_if
    lda #$00                                    ; 8F47 A9 00
    sta L8F_CLEAR_COMBO                         ; 8F49 85 8F
    ; bit 0: redraw pill count (unused)
    lda L52_REDRAW_FLAGS                        ; 8F4B A5 52
    ora #$01                                    ; 8F4D 09 01
    sta L52_REDRAW_FLAGS                        ; 8F4F 85 52
    rts                                         ; 8F51 60
.endscope

; ----------------------------------------------------------------------------
; Place a pill into the playfield.
R8F52_PLACE_PILL:
    ldx L86_PILL_ROW                            ; 8F52 A6 86
    lda LA474,x                                 ; 8F54 BD 74 A4
    add L85_PILL_COLUMN                         ; 8F57 18 65 85
    sta L47_TEMP                                ; 8F5A 85 47
    ; L47_TEMP is playfield offset for pill
    lda LA6_PILL_SIZE                           ; 8F5C A5 A6
    sub #$02                                    ; 8F5E 38 E9 02
    asl a                                       ; 8F61 0A
    asl a                                       ; 8F62 0A
    asl a                                       ; 8F63 0A
    asl a                                       ; 8F64 0A
    sta L48_TEMP                                ; 8F65 85 48
    ; shape is always 2, so L48_TEMP = 0.
    lda LA5_PILL_DIR                            ; 8F67 A5 A5
    asl a                                       ; 8F69 0A
    asl a                                       ; 8F6A 0A
    add L48_TEMP                                ; 8F6B 18 65 48
    tax                                         ; 8F6E AA
    lda #$00                                    ; 8F6F A9 00
    sta L49_TEMP                                ; 8F71 85 49
    loop
        lda LA4DC,x                             ; 8F73 BD DC A4
        cmp #$63                                ; 8F76 C9 63
        beq break                               ; 8F78 F0 24
        add L47_TEMP                            ; 8F7A 18 65 47
        sta L57_                                ; 8F7D 85 57
        ; check that we are within playfield
        cmp #$80                                ; 8F7F C9 80
        if_cc                                   ; 8F81 B0 12
            ; get tile number
            lda LA50C,x                         ; 8F83 BD 0C A5
            clc                                 ; 8F86 18
            sta L4A_TEMP                        ; 8F87 85 4A
            ldy L49_TEMP                        ; 8F89 A4 49
            lda L81_PILL_COLOR_0,y              ; 8F8B B9 81 00
            add L4A_TEMP                        ; 8F8E 18 65 4A
            ldy #$00                            ; 8F91 A0 00
            sta ($57),y                         ; 8F93 91 57
        end_if
        inx                                     ; 8F95 E8
        inc L49_TEMP                            ; 8F96 E6 49
        lda L49_TEMP                            ; 8F98 A5 49
        cmp #$04                                ; 8F9A C9 04
    while_ne                                    ; 8F9C D0 D5
    ; L80_UPDATE_ROW counts from 0 at the top,
    ; while L86_PILL_ROW counts from 0 at the
    ; bottom, so exclusive-OR to reverse order.
    lda L86_PILL_ROW                            ; 8F9E A5 86
    eor #$0F                                    ; 8FA0 49 0F
    sta L80_UPDATE_ROW                          ; 8FA2 85 80
    rts                                         ; 8FA4 60

; ----------------------------------------------------------------------------
; Copy L031E_P1_WINS L039E_P2_WINS L0316_P1_LEVEL L0396_P2_LEVEL L030B_P1_SPEED L038B_P2_SPEED
; to  L0732_BACKUP_0 - L0737_BACKUP_5
; Called in L8206_TOP_3 and L9C91_TOP_8.
R8FA5_SAVE_STATS:
    lda L031E_P1_WINS                           ; 8FA5 AD 1E 03
    sta L0732_BACKUP_0                          ; 8FA8 8D 32 07
    lda L039E_P2_WINS                           ; 8FAB AD 9E 03
    sta L0733_BACKUP_1                          ; 8FAE 8D 33 07
    lda L0316_P1_LEVEL                          ; 8FB1 AD 16 03
    sta L0734_BACKUP_2                          ; 8FB4 8D 34 07
    lda L0396_P2_LEVEL                          ; 8FB7 AD 96 03
    sta L0735_BACKUP_3                          ; 8FBA 8D 35 07
    lda L030B_P1_SPEED                          ; 8FBD AD 0B 03
    sta L0736_BACKUP_4                          ; 8FC0 8D 36 07
    lda L038B_P2_SPEED                          ; 8FC3 AD 8B 03
    sta L0737_BACKUP_5                          ; 8FC6 8D 37 07
    rts                                         ; 8FC9 60

; ----------------------------------------------------------------------------
; Copy L0732_BACKUP_0 - L0737_BACKUP_5
; to   L031E_P1_WINS L039E_P2_WINS L0316_P1_LEVEL L0396_P2_LEVEL L030B_P1_SPEED L038B_P2_SPEED
; Called in L8206_TOP_3 and L9C91_TOP_8.
R8FCA_RESTORE_STATS:
    lda L0732_BACKUP_0                          ; 8FCA AD 32 07
    sta L031E_P1_WINS                           ; 8FCD 8D 1E 03
    lda L0733_BACKUP_1                          ; 8FD0 AD 33 07
    sta L039E_P2_WINS                           ; 8FD3 8D 9E 03
    lda L0734_BACKUP_2                          ; 8FD6 AD 34 07
    sta L0316_P1_LEVEL                          ; 8FD9 8D 16 03
    lda L0735_BACKUP_3                          ; 8FDC AD 35 07
    sta L0396_P2_LEVEL                          ; 8FDF 8D 96 03
    lda L0736_BACKUP_4                          ; 8FE2 AD 36 07
    sta L030B_P1_SPEED                          ; 8FE5 8D 0B 03
    lda L0737_BACKUP_5                          ; 8FE8 AD 37 07
    sta L038B_P2_SPEED                          ; 8FEB 8D 8B 03
    rts                                         ; 8FEE 60

; ----------------------------------------------------------------------------
; jump table vector 6
; enter top-level state 4
L8FEF_TOP_6:
    lda #$04                                    ; 8FEF A9 04
    sta L46_TOP_STATE                           ; 8FF1 85 46
    rts                                         ; 8FF3 60

; ----------------------------------------------------------------------------
; Add value to score, with streak multiplier
; Input: L8B_SPEED+1 is amount to add to score (10s place)
; Input: LAD_VIRUS_COMBO is streak length (index for score multiplier)
R8FF4_INCREMENT_SCORE:
.scope
    lda L0727_NUM_PLAYERS                       ; 8FF4 AD 27 07
    cmp #$01                                    ; 8FF7 C9 01
    if_eq                                       ; 8FF9 D0 20
        ldx LAD_VIRUS_COMBO                     ; 8FFB A6 AD
        lda LA21F,x                             ; 8FFD BD 1F A2
        tax                                     ; 9000 AA
        loop
            lda L8B_SPEED                       ; 9001 A5 8B
            add L072A_SCORE_1                   ; 9003 18 6D 2A 07
            sta L072A_SCORE_1                   ; 9007 8D 2A 07
            inc L072A_SCORE_1                   ; 900A EE 2A 07
            jsr R901C_NORMALIZE_SCORE           ; 900D 20 1C 90
            dex                                 ; 9010 CA
        while_ne                                ; 9011 D0 EE
        ; set bit 2 (update score)
        lda L52_REDRAW_FLAGS                    ; 9013 A5 52
        ora #$04                                ; 9015 09 04
        sta L52_REDRAW_FLAGS                    ; 9017 85 52
        inc LAD_VIRUS_COMBO                     ; 9019 E6 AD
    end_if
    rts                                         ; 901B 60

; --------------------------------------
; Normalize score.
R901C_NORMALIZE_SCORE:
    lda L0729_SCORE_0                           ; 901C AD 29 07
    cmp #$0A                                    ; 901F C9 0A
    if_pl                                       ; 9021 30 09
        sub #$0A                                ; 9023 38 E9 0A
        sta L0729_SCORE_0                       ; 9026 8D 29 07
        inc L072A_SCORE_1                       ; 9029 EE 2A 07
    end_if
    lda L072A_SCORE_1                           ; 902C AD 2A 07
    cmp #$0A                                    ; 902F C9 0A
    if_pl                                       ; 9031 30 09
        sub #$0A                                ; 9033 38 E9 0A
        sta L072A_SCORE_1                       ; 9036 8D 2A 07
        inc L072B_SCORE_2                       ; 9039 EE 2B 07
    end_if
    lda L072B_SCORE_2                           ; 903C AD 2B 07
    cmp #$0A                                    ; 903F C9 0A
    if_pl                                       ; 9041 30 09
        sub #$0A                                ; 9043 38 E9 0A
        sta L072B_SCORE_2                       ; 9046 8D 2B 07
        inc L072C_SCORE_3                       ; 9049 EE 2C 07
    end_if
    lda L072C_SCORE_3                           ; 904C AD 2C 07
    cmp #$0A                                    ; 904F C9 0A
    if_eq                                       ; 9051 D0 08
        lda #$00                                ; 9053 A9 00
        sta L072C_SCORE_3                       ; 9055 8D 2C 07
        inc L072D_SCORE_4                       ; 9058 EE 2D 07
    end_if
    lda L072D_SCORE_4                           ; 905B AD 2D 07
    cmp #$0A                                    ; 905E C9 0A
    if_eq                                       ; 9060 D0 08
        lda #$00                                ; 9062 A9 00
        sta L072D_SCORE_4                       ; 9064 8D 2D 07
        inc L072E_SCORE_5                       ; 9067 EE 2E 07
    end_if
    lda L072E_SCORE_5                           ; 906A AD 2E 07
    cmp #$0A                                    ; 906D C9 0A
    if_eq                                       ; 906F D0 03
        dec L072E_SCORE_5                       ; 9071 CE 2E 07
    end_if
    rts                                         ; 9074 60

.endscope

; ----------------------------------------------------------------------------
; Load P1 state into zero page
; Copy 48 bytes from L0300_P1 to $80-$AF
; LF5_P1_INPUT_NEW -> L5B_INPUT_NEW (controller 1 edge)
; LF7_P1_INPUT_OLD -> L5C_INPUT_OLD (controller 1 state)
; L0400_P1_PLAYFIELD -> L57_/L58_
R9075_LOAD_P1:
    ; copy $0300-$032F to $80-$AF
    ldx #$00                                    ; 9075 A2 00
    loop
        lda L0300_P1,x                          ; 9077 BD 00 03
        sta L80_,x                              ; 907A 95 80
        inx                                     ; 907C E8
        cpx #$30                                ; 907D E0 30
    while_ne                                    ; 907F D0 F6
    lda LF5_P1_INPUT_NEW                        ; 9081 A5 F5
    sta L5B_INPUT_NEW                           ; 9083 85 5B
    lda LF7_P1_INPUT_OLD                        ; 9085 A5 F7
    sta L5C_INPUT_OLD                           ; 9087 85 5C
    lda #$00                                    ; 9089 A9 00
    sta L57_                                    ; 908B 85 57
    lda #$04                                    ; 908D A9 04
    sta L58_                                    ; 908F 85 58
    rts                                         ; 9091 60

; ----------------------------------------------------------------------------
; Load P2 state into zero page
; Copy 48 bytes from L0380_P2 to $80-$AF
; LF6_P2_INPUT_NEW -> L5B_INPUT_NEW (controller 2 edge)
; LF8_P2_INPUT_OLD -> L5C_INPUT_OLD (controller 2 state)
; L0500_P2_PLAYFIELD -> L57/L58
R9092_LOAD_P2:
    ldx #$00                                    ; 9092 A2 00
    loop
        lda L0380_P2,x                          ; 9094 BD 80 03
        sta L80_,x                              ; 9097 95 80
        inx                                     ; 9099 E8
        cpx #$30                                ; 909A E0 30
    while_ne                                    ; 909C D0 F6
    lda LF6_P2_INPUT_NEW                        ; 909E A5 F6
    sta L5B_INPUT_NEW                           ; 90A0 85 5B
    lda LF8_P2_INPUT_OLD                        ; 90A2 A5 F8
    sta L5C_INPUT_OLD                           ; 90A4 85 5C
    lda #$00                                    ; 90A6 A9 00
    sta L57_                                    ; 90A8 85 57
    lda #$05                                    ; 90AA A9 05
    sta L58_                                    ; 90AC 85 58
    rts                                         ; 90AE 60

; ----------------------------------------------------------------------------
; Save P1 state from zero page
; Copy 48 bytes from $80-$AF to L0300_P1
R90AF_SAVE_P1:
    ldx #$00                                    ; 90AF A2 00
    loop
        lda L80_,x                               ; 90B1 B5 80
        sta L0300_P1,x                          ; 90B3 9D 00 03
        inx                                     ; 90B6 E8
        cpx #$30                                ; 90B7 E0 30
    while_ne                                    ; 90B9 D0 F6
    rts                                         ; 90BB 60

; ----------------------------------------------------------------------------
; Save P2 state from zero page
; Copy 48 bytes from $80-$AF to L0380_P2
R90BC_SAVE_P2:
    ldx #$00                                    ; 90BC A2 00
    loop
        lda L80_,x                               ; 90BE B5 80
        sta L0380_P2,x                          ; 90C0 9D 80 03
        inx                                     ; 90C3 E8
        cpx #$30                                ; 90C4 E0 30
    while_ne                                    ; 90C6 D0 F6
    rts                                         ; 90C8 60

; ----------------------------------------------------------------------------
; Fill pages 4 and 5 with #$FF.
R90C9_INIT_4_5:
    lda #$FF                                    ; 90C9 A9 FF
    ldx #$04                                    ; 90CB A2 04
    ldy #$05                                    ; 90CD A0 05
    jsr RB894_FILL_PAGES                        ; 90CF 20 94 B8
    rts                                         ; 90D2 60

; ----------------------------------------------------------------------------
; Pill collision detection.
; Returns A = 0, Z set for no collision.
; Returns A = FF, Z clear for collision.
R90D3_COLLISION:
.scope
    ldx LA6_PILL_SIZE                           ; 90D3 A6 A6
    dex                                         ; 90D5 CA
    dex                                         ; 90D6 CA
    lda LA5_PILL_DIR                            ; 90D7 A5 A5
    and #$01 ; 1 = U/D, 0 = L/R                 ; 90D9 29 01
    if_eq                                       ; 90DB D0 13
        lda LA455,x ; $00,$FF,$FF               ; 90DD BD 55 A4
        add L85_PILL_COLUMN                     ; 90E0 18 65 85
        bmi collision                           ; 90E3 30 4C
        lda LA458,x ; $F9,$F9,$FA               ; 90E5 BD 58 A4
        add L85_PILL_COLUMN                     ; 90E8 18 65 85
        bpl collision                           ; 90EB 10 44
    else                                        ; 90ED 4C F8 90
        lda LA45B,x                             ; 90F0 BD 5B A4
        add L86_PILL_ROW                        ; 90F3 18 65 86
        bmi collision                           ; 90F6 30 39
    end_if
    lda #$00                                    ; 90F8 A9 00
    sta L57_                                    ; 90FA 85 57
    ldx L86_PILL_ROW                            ; 90FC A6 86
    lda LA474,x                                 ; 90FE BD 74 A4
    add L85_PILL_COLUMN                         ; 9101 18 65 85
    sta L47_TEMP                                ; 9104 85 47
    lda LA6_PILL_SIZE                           ; 9106 A5 A6
    sub #$02                                    ; 9108 38 E9 02
    asl a                                       ; 910B 0A
    sta L49_TEMP                                ; 910C 85 49
    ; L49_TEMP = LA6_PILL_SIZE - 2
    lda LA5_PILL_DIR                            ; 910E A5 A5
    and #$01 ; 1 = U/D, 0 = L/R                 ; 9110 29 01
    add L49_TEMP                                ; 9112 18 65 49
    asl a                                       ; 9115 0A
    asl a                                       ; 9116 0A
    tax                                         ; 9117 AA
    ; x = ((LA5_PILL_DIR & #1) + L49_TEMP) << 2
    lda #$04                                    ; 9118 A9 04
    sta L48_TEMP                                ; 911A 85 48
    loop
        lda LA4C4,x                             ; 911C BD C4 A4
        add L47_TEMP                            ; 911F 18 65 47
        tay                                     ; 9122 A8
        lda ($57),y                             ; 9123 B1 57
        cmp #$FF                                ; 9125 C9 FF
        bne collision                           ; 9127 D0 08
        inx                                     ; 9129 E8
        dec L48_TEMP                            ; 912A C6 48
    while_ne                                    ; 912C D0 EE
    lda #$00                                    ; 912E A9 00
    rts                                         ; 9130 60

collision:
    lda #$FF                                    ; 9131 A9 FF
    rts                                         ; 9133 60
.endscope

; ----------------------------------------------------------------------------
; Called by NMI handler.
R9134:
.scope
    lda L0741_DEMO_MODE                         ; 9134 AD 41 07
    if_eq                                       ; 9137 D0 04
        jsr RB7C7_GET_INPUT                     ; 9139 20 C7 B7
        rts                                     ; 913C 60
    end_if
    lda L0741_DEMO_MODE                         ; 913D AD 41 07
    cmp #$FF                                    ; 9140 C9 FF
    if_ne                                       ; 9142 F0 4C
        jsr RB7C7_GET_INPUT                     ; 9144 20 C7 B7
        lda LF5_P1_INPUT_NEW                    ; 9147 A5 F5
        cmp #$10 ; "start"                      ; 9149 C9 10
        if_ne                                   ; 914B F0 3E
            lda L69_DEMO_DELAY                  ; 914D A5 69
            if_ne                               ; 914F F0 05
                dec L69_DEMO_DELAY              ; 9151 C6 69
            else                                ; 9153 4C 7D 91
                ldx #$00                        ; 9156 A2 00
                lda ($36,x)                     ; 9158 A1 36
                sta L47_TEMP                    ; 915A 85 47
                jsr R91C2_INCREMENT_L36         ; 915C 20 C2 91
                lda L70_DEMO_INPUT              ; 915F A5 70
                eor L47_TEMP                    ; 9161 45 47
                and L47_TEMP                    ; 9163 25 47
                sta LF5_P1_INPUT_NEW            ; 9165 85 F5
                lda L47_TEMP                    ; 9167 A5 47
                sta L70_DEMO_INPUT              ; 9169 85 70
                ldx #$00                        ; 916B A2 00
                lda ($36,x)                     ; 916D A1 36
                sta L69_DEMO_DELAY              ; 916F 85 69
                jsr R91C2_INCREMENT_L36         ; 9171 20 C2 91
                lda L37_                        ; 9174 A5 37
                cmp #>LD200                     ; 9176 C9 D2
                beq L9186                       ; 9178 F0 0C
                jmp L9181                       ; 917A 4C 81 91
            end_if
            lda #$00                            ; 917D A9 00
            sta LF5_P1_INPUT_NEW                ; 917F 85 F5
        L9181:
            lda L70_DEMO_INPUT                  ; 9181 A5 70
            sta LF7_P1_INPUT_OLD                ; 9183 85 F7
            rts                                 ; 9185 60

        ; enter top-level state 0.
        L9186:
            lda #$00                            ; 9186 A9 00
            sta L46_TOP_STATE                   ; 9188 85 46
            rts                                 ; 918A 60
        end_if
        lda #>LD000                             ; 918B A9 D0
        sta L37_                                ; 918D 85 37
        rts                                     ; 918F 60
    end_if

.scope
    jsr RB7C7_GET_INPUT                         ; 9190 20 C7 B7
    lda LF7_P1_INPUT_OLD                        ; 9193 A5 F7
    cmp L70_DEMO_INPUT                          ; 9195 C5 70
    beq L91B8                                   ; 9197 F0 1F
    ldx #$00                                    ; 9199 A2 00
    lda L70_DEMO_INPUT                          ; 919B A5 70
    sta ($36,x)                                 ; 919D 81 36
    jsr R91C2_INCREMENT_L36                     ; 919F 20 C2 91
    lda L69_DEMO_DELAY                          ; 91A2 A5 69
    sta ($36,x)                                 ; 91A4 81 36
    jsr R91C2_INCREMENT_L36                     ; 91A6 20 C2 91
    lda L37_                                    ; 91A9 A5 37
    cmp #>LD200                                 ; 91AB C9 D2
    beq L91BB                                   ; 91AD F0 0C
    lda LF7_P1_INPUT_OLD                        ; 91AF A5 F7
    sta L70_DEMO_INPUT                          ; 91B1 85 70
    lda #$00                                    ; 91B3 A9 00
    sta L69_DEMO_DELAY                          ; 91B5 85 69
    rts                                         ; 91B7 60
L91B8:
    inc L69_DEMO_DELAY                          ; 91B8 E6 69
    rts                                         ; 91BA 60
L91BB:
    lda #$00                                    ; 91BB A9 00
    sta L36_                                    ; 91BD 85 36
    ; enter top-level state 0.
    sta L46_TOP_STATE                           ; 91BF 85 46
    rts                                         ; 91C1 60
.endscope

; Called by NMI handler.
; Increment 16-bit value in L36_/L37_.
R91C2_INCREMENT_L36:
    lda L36_                                    ; 91C2 A5 36
    add #$01                                    ; 91C4 18 69 01
    sta L36_                                    ; 91C7 85 36
    lda #$00                                    ; 91C9 A9 00
    adc L37_                                    ; 91CB 65 37
    sta L37_                                    ; 91CD 85 37
    rts                                         ; 91CF 60
.endscope

; ----------------------------------------------------------------------------
; Compute checksum of all bytes from $b900 to $bdff.
; Set L0740_CHECKSUM_FAIL to #$ff if the sum is not #$C1, else #$00.
; Called once in L981C_TOP_0.
R91D0_CHECKSUM:
    lda #$B9                                    ; 91D0 A9 B9
    sta L48_TEMP                                ; 91D2 85 48
    ldy #$00                                    ; 91D4 A0 00
    sty L47_TEMP                                ; 91D6 84 47
    sty L49_TEMP                                ; 91D8 84 49
    sty L0740_CHECKSUM_FAIL                     ; 91DA 8C 40 07
    loop
        loop
            lda (L47_TEMP),y                    ; 91DD B1 47
            add L49_TEMP                        ; 91DF 18 65 49
            sta L49_TEMP                        ; 91E2 85 49
            iny                                 ; 91E4 C8
        while_ne                                ; 91E5 D0 F6
        inc L48_TEMP                            ; 91E7 E6 48
        lda L48_TEMP                            ; 91E9 A5 48
        cmp #$BE                                ; 91EB C9 BE
    while_ne                                    ; 91ED D0 EE
    lda L49_TEMP                                ; 91EF A5 49
    .ifdef REV_A
    cmp #$98
    .else
    cmp #$C1                                    ; 91F1 C9 C1
    .endif
    if_ne                                       ; 91F3 F0 05
        lda #$FF                                ; 91F5 A9 FF
        sta L0740_CHECKSUM_FAIL                 ; 91F7 8D 40 07
    end_if
    rts                                         ; 91FA 60

; ----------------------------------------------------------------------------
; R8C73 routine 5.
; This routine is very similar to L9469_6.
; Check for horizontal clears.
; Return immediately if L94_ is nonzero and rows are still being updated.
; Otherwise, go to state 6 when done.
L91FB_5_CHECK_HORIZONTAL_CLEAR:
.scope
    lda L94_                                    ; 91FB A5 94
    if_ne                                       ; 91FD F0 09
        ; does this ever happen?
        lda L80_UPDATE_ROW                      ; 91FF A5 80
        cmp #$FF                                ; 9201 C9 FF
        if_ne                                   ; 9203 F0 03
            jmp L92DA ; rts                     ; 9205 4C DA 92
        end_if
    end_if

    ; local variables:
    ; L59_TEMP = Playfield position (0 to 127, top to bottom, left to right)
    ; L5A_TEMP = Advance position (to the right)
    ; L47_TEMP = Length of consecutive run - 1
    ; L48_TEMP = Color to match
    ; L48_TEMP is also input to R944B.
    lda #$00                                    ; 9208 A9 00
    sta L59_TEMP                                ; 920A 85 59
    loop
        loop
            lda L59_TEMP                        ; 920C A5 59
            sta L5A_TEMP                        ; 920E 85 5A
            lda #$00                            ; 9210 A9 00
            sta L47_TEMP                        ; 9212 85 47
            ldy L59_TEMP                        ; 9214 A4 59
            lda ($57),y                         ; 9216 B1 57
            sta L48_TEMP                        ; 9218 85 48
            cmp #$F0                            ; 921A C9 F0
            if_cc_jmp                           ; 921C 90 03 4C AD 92
                lda L48_TEMP                    ; 9221 A5 48
                and #$0F                        ; 9223 29 0F
                sta L48_TEMP                    ; 9225 85 48
                loop
                    inc L5A_TEMP                ; 9227 E6 5A
                    lda L5A_TEMP                ; 9229 A5 5A
                    and #$07                    ; 922B 29 07
                    beq break ; end of row      ; 922D F0 0F
                    ldy L5A_TEMP                ; 922F A4 5A
                    lda ($57),y                 ; 9231 B1 57
                    and #$0F ; ignore shape     ; 9233 29 0F
                    cmp L48_TEMP                ; 9235 C5 48
                    bne break ; wrong color     ; 9237 D0 05
                    inc L47_TEMP                ; 9239 E6 47
                forever                         ; 923B 4C 27 92
                lda L47_TEMP                    ; 923E A5 47
                cmp #$03                        ; 9240 C9 03
                if_pl ; at least 4-in-a-row     ; 9242 30 62
                    ; record cleared color
                    inc L8F_CLEAR_COMBO         ; 9244 E6 8F
                    sta L8E_UNUSED              ; 9246 85 8E
                    jsr R944B_CLEARED_COLOR     ; 9248 20 4B 94
                    lda LA1_CLEAR_TOTAL         ; 924B A5 A1
                    add L47_TEMP                ; 924D 18 65 47
                    sta LA1_CLEAR_TOTAL         ; 9250 85 A1
                    inc LA1_CLEAR_TOTAL         ; 9252 E6 A1
                    lda L59_TEMP                ; 9254 A5 59
                    and #$78                    ; 9256 29 78
                    lsr a                       ; 9258 4A
                    lsr a                       ; 9259 4A
                    lsr a                       ; 925A 4A
                    sta L95_UNUSED              ; 925B 85 95
                    lda L5A_TEMP                ; 925D A5 5A
                    sta L49_TEMP                ; 925F 85 49
                    lda L59_TEMP                ; 9261 A5 59
                    sta L5A_TEMP                ; 9263 85 5A
                    loop
                        ldy L5A_TEMP            ; 9265 A4 5A
                        lda ($57),y             ; 9267 B1 57
                        and #$F0                ; 9269 29 F0
                        cmp #$80                ; 926B C9 80
                        if_eq                   ; 926D D0 00
                        end_if
                        lda #$02                ; 926F A9 02
                        sta L06F1_              ; 9271 8D F1 06
                        lda ($57),y             ; 9274 B1 57
                        and #$F0                ; 9276 29 F0
                        cmp #$D0 ; virus        ; 9278 C9 D0
                        if_eq                   ; 927A D0 14
                            lda #$04            ; 927C A9 04
                            sta L06F1_          ; 927E 8D F1 06
                            jsr R941A_KILL_VIRUS; 9281 20 1A 94
                            ; set bit 4 (virus#)
                            lda #$10            ; 9284 A9 10
                            ora L52_REDRAW_FLAGS; 9286 05 52
                            sta L52_REDRAW_FLAGS; 9288 85 52
                            lda LA4_VIRUS_BCD   ; 928A A5 A4
                            if_eq               ; 928C D0 02
                                inc L9E_WINS    ; 928E E6 9E
                            end_if
                        end_if
                        lda ($57),y             ; 9290 B1 57
                        and #$0F                ; 9292 29 0F
                        ora #$B0 ; marked       ; 9294 09 B0
                        sta ($57),y             ; 9296 91 57
                        inc L5A_TEMP            ; 9298 E6 5A
                        ldy L5A_TEMP            ; 929A A4 5A
                        cpy L49_TEMP            ; 929C C4 49
                    while_ne                    ; 929E D0 C5
                    inc L94_                    ; 92A0 E6 94
                    lda L49_TEMP                ; 92A2 A5 49
                    sta L5A_TEMP                ; 92A4 85 5A
                end_if
                lda L5A_TEMP                    ; 92A6 A5 5A
                sta L59_TEMP                    ; 92A8 85 59
            else                                ; 92AA 4C AF 92
                inc L59_TEMP                    ; 92AD E6 59
            end_if
            lda L59_TEMP                        ; 92AF A5 59
            and #$07                            ; 92B1 29 07
            beq break                           ; 92B3 F0 07
            cmp #$05                            ; 92B5 C9 05
            bpl break                           ; 92B7 10 03
        forever                                 ; 92B9 4C 0C 92

        lda L59_TEMP                            ; 92BC A5 59
        cmp #$80                                ; 92BE C9 80
        beq break                               ; 92C0 F0 16
        and #$07                                ; 92C2 29 07
        if_ne                                   ; 92C4 F0 09
            lda L59_TEMP                        ; 92C6 A5 59
            and #$78                            ; 92C8 29 78
            add #$08                            ; 92CA 18 69 08
            sta L59_TEMP                        ; 92CD 85 59
        end_if
        lda L59_TEMP                            ; 92CF A5 59
        cmp #$80                                ; 92D1 C9 80
        beq break                               ; 92D3 F0 03
    forever                                     ; 92D5 4C 0C 92

    inc L87_STATE                               ; 92D8 E6 87
L92DA:
    rts                                         ; 92DA 60
.endscope ;L91FB

; ----------------------------------------------------------------------------
; R8C73 routine 7.
; Loop over playfield from bottom to top, right to left.
; If any pill is disconnected from its neighbor,
; replace it with a more rounded pill shape.
; If L94_ = 0 then state 8, else state 1.
L92DB_7_FIX_SPLIT_PILLS:
    ldy #$7F                                    ; 92DB A0 7F
    sty L47_TEMP                                ; 92DD 84 47
    loop
        begin
            ldy L47_TEMP                        ; 92DF A4 47
            lda ($57),y                         ; 92E1 B1 57
            and #$F0 ; ignore color             ; 92E3 29 F0
            cmp #$B0 ; marked                   ; 92E5 C9 B0
            if_eq                               ; 92E7 D0 09
                lda ($57),y                     ; 92E9 B1 57
                ora #$F0 ; empty pill           ; 92EB 09 F0
                sta ($57),y                     ; 92ED 91 57
                jmp break                       ; 92EF 4C F9 93
            end_if
            cmp #$40 ; top half                 ; 92F2 C9 40
            if_eq                               ; 92F4 D0 1F
                ; consider tile below
                lda L47_TEMP                    ; 92F6 A5 47
                add #$08                        ; 92F8 18 69 08
                tay                             ; 92FB A8
                lda ($57),y                     ; 92FC B1 57
                and #$F0                        ; 92FE 29 F0
                cmp #$90 ; mid-vertical         ; 9300 C9 90
                if_ne                           ; 9302 F0 0E
                    cmp #$50 ; bottom half      ; 9304 C9 50
                    if_ne                       ; 9306 F0 0A
                        ldy L47_TEMP            ; 9308 A4 47
                        lda ($57),y             ; 930A B1 57
                        and #$0F                ; 930C 29 0F
                        ora #$80 ; small round  ; 930E 09 80
                        sta ($57),y             ; 9310 91 57
                    end_if
                end_if
                jmp break                       ; 9312 4C F9 93
            end_if
            cmp #$50 ; bottom half              ; 9315 C9 50
            if_eq                               ; 9317 D0 1F
                ; consider tile above
                lda L47_TEMP                    ; 9319 A5 47
                sub #$08                        ; 931B 38 E9 08
                tay                             ; 931E A8
                lda ($57),y                     ; 931F B1 57
                and #$F0                        ; 9321 29 F0
                cmp #$90 ; mid-vertical         ; 9323 C9 90
                if_ne                           ; 9325 F0 0E
                    cmp #$40 ; top half         ; 9327 C9 40
                    if_ne                       ; 9329 F0 0A
                        ldy L47_TEMP            ; 932B A4 47
                        lda ($57),y             ; 932D B1 57
                        and #$0F                ; 932F 29 0F
                        ora #$80 ; small round  ; 9331 09 80
                        sta ($57),y             ; 9333 91 57
                    end_if
                end_if
                jmp break                       ; 9335 4C F9 93
            end_if
            cmp #$60 ; left half                ; 9338 C9 60
            if_eq                               ; 933A D0 1F
                ; consider tile to right
                lda L47_TEMP                    ; 933C A5 47
                add #$01                        ; 933E 18 69 01
                tay                             ; 9341 A8
                lda ($57),y                     ; 9342 B1 57
                and #$F0                        ; 9344 29 F0
                cmp #$A0 ; mid-horizontal       ; 9346 C9 A0
                if_ne                           ; 9348 F0 0E
                    cmp #$70 ; right half       ; 934A C9 70
                    if_ne                       ; 934C F0 0A
                        ldy L47_TEMP            ; 934E A4 47
                        lda ($57),y             ; 9350 B1 57
                        and #$0F                ; 9352 29 0F
                        ora #$80 ; small round  ; 9354 09 80
                        sta ($57),y             ; 9356 91 57
                    end_if
                end_if
                jmp break                       ; 9358 4C F9 93
            end_if
            cmp #$70 ; right half               ; 935B C9 70
            if_eq                               ; 935D D0 1F
                ; consider tile to left
                lda L47_TEMP                    ; 935F A5 47
                sub #$01                        ; 9361 38 E9 01
                tay                             ; 9364 A8
                lda ($57),y                     ; 9365 B1 57
                and #$F0                        ; 9367 29 F0
                cmp #$A0 ; mid-horizontal       ; 9369 C9 A0
                if_ne                           ; 936B F0 0E
                    cmp #$60 ; left half        ; 936D C9 60
                    if_ne                       ; 936F F0 0A
                        ldy L47_TEMP            ; 9371 A4 47
                        lda ($57),y             ; 9373 B1 57
                        and #$0F                ; 9375 29 0F
                        ora #$80 ; small round  ; 9377 09 80
                        sta ($57),y             ; 9379 91 57
                    end_if
                end_if
                jmp break                       ; 937B 4C F9 93
            end_if
            cmp #$90 ; mid-vertical             ; 937E C9 90
            if_eq                               ; 9380 D0 3B
                ; consider tile above
                lda L47_TEMP                    ; 9382 A5 47
                sub #$08                        ; 9384 38 E9 08
                tay                             ; 9387 A8
                lda ($57),y                     ; 9388 B1 57
                and #$F0                        ; 938A 29 F0
                cmp #$90 ; mid-vertical         ; 938C C9 90
                if_ne                           ; 938E F0 0E
                    cmp #$40 ; top half         ; 9390 C9 40
                    if_ne                       ; 9392 F0 0A
                        ldy L47_TEMP            ; 9394 A4 47
                        lda ($57),y             ; 9396 B1 57
                        and #$0F                ; 9398 29 0F
                        ora #$40 ; top half     ; 939A 09 40
                        sta ($57),y             ; 939C 91 57
                    end_if
                end_if
                ; consider tile below
                lda L47_TEMP                    ; 939E A5 47
                add #$08                        ; 93A0 18 69 08
                tay                             ; 93A3 A8
                lda ($57),y                     ; 93A4 B1 57
                and #$F0                        ; 93A6 29 F0
                cmp #$90 ; mid-vertical         ; 93A8 C9 90
                if_ne                           ; 93AA F0 0E
                    cmp #$50 ; bottom half      ; 93AC C9 50
                    if_ne                       ; 93AE F0 0A
                        ldy L47_TEMP            ; 93B0 A4 47
                        lda ($57),y             ; 93B2 B1 57
                        and #$0F                ; 93B4 29 0F
                        ora #$50 ; bottom half  ; 93B6 09 50
                        sta ($57),y             ; 93B8 91 57
                    end_if
                end_if
                jmp break                       ; 93BA 4C F9 93
            end_if
            cmp #$A0 ; mid-horizontal           ; 93BD C9 A0
            if_eq                               ; 93BF D0 38
                ; consider tile to left
                lda L47_TEMP                    ; 93C1 A5 47
                sub #$01                        ; 93C3 38 E9 01
                tay                             ; 93C6 A8
                lda ($57),y                     ; 93C7 B1 57
                and #$F0                        ; 93C9 29 F0
                cmp #$A0 ; mid-horizontal       ; 93CB C9 A0
                if_ne                           ; 93CD F0 0E
                    cmp #$60 ; left half        ; 93CF C9 60
                    if_ne                       ; 93D1 F0 0A
                        ldy L47_TEMP            ; 93D3 A4 47
                        lda ($57),y             ; 93D5 B1 57
                        and #$0F                ; 93D7 29 0F
                        ora #$60 ; left half    ; 93D9 09 60
                        sta ($57),y             ; 93DB 91 57
                    end_if
                end_if
                ; consider tile to right
                lda L47_TEMP                    ; 93DD A5 47
                add #$01                        ; 93DF 18 69 01
                tay                             ; 93E2 A8
                lda ($57),y                     ; 93E3 B1 57
                and #$F0                        ; 93E5 29 F0
                cmp #$A0 ; mid-horizontal       ; 93E7 C9 A0
                if_ne                           ; 93E9 F0 0E
                    cmp #$70 ; right half       ; 93EB C9 70
                    if_ne                       ; 93ED F0 0A
                        ldy L47_TEMP            ; 93EF A4 47
                        lda ($57),y             ; 93F1 B1 57
                        and #$0F                ; 93F3 29 0F
                        ora #$70 ; right half   ; 93F5 09 70
                        sta ($57),y             ; 93F7 91 57
                    end_if
                end_if
            end_if
        end
        dec L47_TEMP                            ; 93F9 C6 47
        lda L47_TEMP                            ; 93FB A5 47
        cmp #$FF                                ; 93FD C9 FF
        beq break                               ; 93FF F0 03
    forever                                     ; 9401 4C DF 92
    inc L87_STATE                               ; 9404 E6 87
    lda #$0F                                    ; 9406 A9 0F
    sta L80_UPDATE_ROW                          ; 9408 85 80
    lda L94_                                    ; 940A A5 94
    if_ne                                       ; 940C F0 04
        lda #$01                                ; 940E A9 01
        sta L87_STATE                           ; 9410 85 87
    end_if
    rts                                         ; 9412 60

; ----------------------------------------------------------------------------
; R8C73 routine 4.
; L94_ = 0.
; Go to state 5.
L9413_4:
    lda #$00                                    ; 9413 A9 00
    sta L94_                                    ; 9415 85 94
    inc L87_STATE                               ; 9417 E6 87
    rts                                         ; 9419 60

; ----------------------------------------------------------------------------
; Called once in L91FB.
; Input: ($57),Y
; ($57),Y should point at byte with virus color in low nybble
R941A_KILL_VIRUS:
    lda ($57),y                                 ; 941A B1 57
    and #$0F                                    ; 941C 29 0F
    tax                                         ; 941E AA
    ; put virus sprite in state 1 (falling)
    lda #$01                                    ; 941F A9 01
    sta L75_V1_STATE,x                          ; 9421 95 75
    lda #$00                                    ; 9423 A9 00
    sta L78_V1_TIMER,x                          ; 9425 95 78
    ; decrement individual virus count
    lda L72_V1_COUNT,x                          ; 9427 B5 72
    sub #$01                                    ; 9429 38 E9 01
    sta L72_V1_COUNT,x                          ; 942C 95 72
    jsr R8FF4_INCREMENT_SCORE                   ; 942E 20 F4 8F
    ; decrement total virus count
    lda LA4_VIRUS_BCD                           ; 9431 A5 A4
    if_ne                                       ; 9433 F0 11
        dec LA4_VIRUS_BCD                       ; 9435 C6 A4
        lda LA4_VIRUS_BCD                       ; 9437 A5 A4
        and #$0F                                ; 9439 29 0F
        cmp #$0F                                ; 943B C9 0F
        if_eq                                   ; 943D D0 07
            lda LA4_VIRUS_BCD                   ; 943F A5 A4
            sub #$06                            ; 9441 38 E9 06
            sta LA4_VIRUS_BCD                   ; 9444 85 A4
        end_if
    end_if
    lda #$0F                                    ; 9446 A9 0F
    sta L80_UPDATE_ROW                          ; 9448 85 80
    rts                                         ; 944A 60

; ----------------------------------------------------------------------------
; Record colors of up to 4 clears.
; Inputs: L48_TEMP, L8F_CLEAR_COMBO.
; If L8F_CLEAR_COMBO == #$01, LA9_JUNK_COLOR+0 = L48_TEMP.
; If L8F_CLEAR_COMBO == #$02, LAA_JUNK_COLOR+1 = L48_TEMP.
; If L8F_CLEAR_COMBO == #$03, LAB_JUNK_COLOR+2 = L48_TEMP.
; If L8F_CLEAR_COMBO == #$04, LAC_JUNK_COLOR+3 = L48_TEMP.
R944B_CLEARED_COLOR:
    lda L8F_CLEAR_COMBO                         ; 944B A5 8F
    if_ne                                       ; 944D F0 0A
        cmp #$05                                ; 944F C9 05
        if_cc                                   ; 9451 B0 06
            tax                                 ; 9453 AA
            dex                                 ; 9454 CA
            lda L48_TEMP                        ; 9455 A5 48
            sta LA9_JUNK_COLOR,x                ; 9457 95 A9
        end_if
    end_if
    rts                                         ; 9459 60

; ----------------------------------------------------------------------------
; unreachable?
    lda L8F_CLEAR_COMBO                         ; 945A A5 8F
    cmp #$02                                    ; 945C C9 02
    if_eq                                       ; 945E D0 08
        lda $58                                 ; 9460 A5 58
        sub #$03                                ; 9462 38 E9 03
        sta L06F4_                              ; 9465 8D F4 06
    end_if
    rts                                         ; 9468 60

; ----------------------------------------------------------------------------
; R8C73 routine 6.
; Check for vertical clears.
; Go to state 7.
L9469_6_CHECK_VERTICAL_CLEAR:
    lda #$00                                    ; 9469 A9 00
    sta L59_TEMP                                ; 946B 85 59
    begin
        lda L59_TEMP                            ; 946D A5 59
        sta L5A_TEMP                            ; 946F 85 5A
        lda #$00                                ; 9471 A9 00
        sta L47_TEMP                            ; 9473 85 47
        ldy L59_TEMP                            ; 9475 A4 59
        lda ($57),y                             ; 9477 B1 57
        sta L48_TEMP ; color to match           ; 9479 85 48
        cmp #$F0                                ; 947B C9 F0
        if_cc_jmp                               ; 947D 90 03 4C 10 95
            lda L48_TEMP                        ; 9482 A5 48
            and #$0F                            ; 9484 29 0F
            sta L48_TEMP                        ; 9486 85 48
            loop
                lda L5A_TEMP                    ; 9488 A5 5A
                add #$08                        ; 948A 18 69 08
                sta L5A_TEMP                    ; 948D 85 5A
                lda L5A_TEMP                    ; 948F A5 5A
                and #$F8                        ; 9491 29 F8
                beq break                       ; 9493 F0 0F
                ldy L5A_TEMP                    ; 9495 A4 5A
                lda ($57),y                     ; 9497 B1 57
                and #$0F                        ; 9499 29 0F
                cmp L48_TEMP                    ; 949B C5 48
                bne break                       ; 949D D0 05
                inc L47_TEMP                    ; 949F E6 47
            forever

            lda L47_TEMP                        ; 94A4 A5 47
            cmp #$03                            ; 94A6 C9 03
            if_pl                               ; 94A8 30 5F
                inc L8F_CLEAR_COMBO             ; 94AA E6 8F
                sta L8E_UNUSED                  ; 94AC 85 8E
                jsr R944B_CLEARED_COLOR         ; 94AE 20 4B 94
                lda LA1_CLEAR_TOTAL             ; 94B1 A5 A1
                add L47_TEMP                    ; 94B3 18 65 47
                sta LA1_CLEAR_TOTAL             ; 94B6 85 A1
                inc LA1_CLEAR_TOTAL             ; 94B8 E6 A1
                lda L59_TEMP                    ; 94BA A5 59
                and #$78                        ; 94BC 29 78
                lsr a                           ; 94BE 4A
                lsr a                           ; 94BF 4A
                lsr a                           ; 94C0 4A
                sta L95_UNUSED                  ; 94C1 85 95
                lda L5A_TEMP                    ; 94C3 A5 5A
                sta L49_TEMP                    ; 94C5 85 49
                lda L59_TEMP                    ; 94C7 A5 59
                sta L5A_TEMP                    ; 94C9 85 5A
                loop
                    lda #$02                    ; 94CB A9 02
                    sta L06F1_                  ; 94CD 8D F1 06
                    ldy L5A_TEMP                ; 94D0 A4 5A
                    lda ($57),y                 ; 94D2 B1 57
                    and #$F0                    ; 94D4 29 F0
                    cmp #$D0 ; virus            ; 94D6 C9 D0
                    if_eq                       ; 94D8 D0 14
                        lda #$04                ; 94DA A9 04
                        sta L06F1_              ; 94DC 8D F1 06
                        jsr R941A_KILL_VIRUS    ; 94DF 20 1A 94
                        ; set bit 4 (virus#)
                        lda #$10                ; 94E2 A9 10
                        ora L52_REDRAW_FLAGS    ; 94E4 05 52
                        sta L52_REDRAW_FLAGS    ; 94E6 85 52
                        lda LA4_VIRUS_BCD       ; 94E8 A5 A4
                        if_eq                   ; 94EA D0 02
                            inc L9E_WINS        ; 94EC E6 9E
                        end_if
                    end_if
                    lda ($57),y                 ; 94EE B1 57
                    and #$0F                    ; 94F0 29 0F
                    ora #$B0 ; marked           ; 94F2 09 B0
                    sta ($57),y                 ; 94F4 91 57
                    lda L5A_TEMP                ; 94F6 A5 5A
                    add #$08                    ; 94F8 18 69 08
                    sta L5A_TEMP                ; 94FB 85 5A
                    ldy L5A_TEMP                ; 94FD A4 5A
                    cpy L49_TEMP                ; 94FF C4 49
                while_ne                        ; 9501 D0 C8
                inc L94_                        ; 9503 E6 94
                lda L49_TEMP                    ; 9505 A5 49
                sta L5A_TEMP                    ; 9507 85 5A
            end_if
            lda L5A_TEMP                        ; 9509 A5 5A
            sta L59_TEMP                        ; 950B 85 59
        else                                    ; 950D 4C 17 95
            lda L59_TEMP                        ; 9510 A5 59
            add #$08                            ; 9512 18 69 08
            sta L59_TEMP                        ; 9515 85 59
        end_if
        lda L59_TEMP                            ; 9517 A5 59
        cmp #$68                                ; 9519 C9 68
        if_cc                                   ; 951B B0 03
            jmp continue                        ; 951D 4C 6D 94
        end_if
        inc L59_TEMP                            ; 9520 E6 59
        lda L59_TEMP                            ; 9522 A5 59
        and #$07                                ; 9524 29 07
        sta L59_TEMP                            ; 9526 85 59
        lda L59_TEMP                            ; 9528 A5 59
        if_ne                                   ; 952A F0 03
            jmp continue                        ; 952C 4C 6D 94
        end_if
    end
    inc L87_STATE                               ; 952F E6 87
    rts                                         ; 9531 60

; ----------------------------------------------------------------------------
; jump table vector 5
L9532_TOP_5:
.scope
    lda #$00                                    ; 9532 A9 00
    sta L54_ENABLE_PAUSE                        ; 9534 85 54
    sta L0732_BACKUP_0                          ; 9536 8D 32 07
    lda #$04                                    ; 9539 A9 04
    sta L58_                                    ; 953B 85 58
    lda L0309_P1_LOST                           ; 953D AD 09 03
    if_eq                                       ; 9540 D0 06
        inc L031E_P1_WINS                       ; 9542 EE 1E 03
    else                                        ; 9545 4C 56 95
        lda L0727_NUM_PLAYERS                   ; 9548 AD 27 07
        cmp #$01                                ; 954B C9 01
        beq L9585                               ; 954D F0 36
        jsr R96C0 ; clear lower playfield       ; 954F 20 C0 96
        lda #$01                                ; 9552 A9 01
        sta L61_                                ; 9554 85 61
    end_if
    lda L80_UPDATE_ROW                          ; 9556 A5 80
    sta L0300_P1_UPDATE_ROW                     ; 9558 8D 00 03
    lda #$05                                    ; 955B A9 05
    sta L58_                                    ; 955D 85 58
    lda L0389_P2_LOST                           ; 955F AD 89 03
    if_eq                                       ; 9562 D0 06
        inc L039E_P2_WINS                       ; 9564 EE 9E 03
    else                                        ; 9567 4C 80 95
        lda L0309_P1_LOST                       ; 956A AD 09 03
        if_ne                                   ; 956D F0 0A
            jsr R9682_DRAW_GAME                 ; 956F 20 82 96
            lda #$00                            ; 9572 A9 00
            sta L61_                            ; 9574 85 61
        else                                    ; 9576 4C 80 95
            jsr R96C0 ; clear lower playfield   ; 9579 20 C0 96
            lda #$02                            ; 957C A9 02
            sta L61_                            ; 957E 85 61
        end_if
    end_if
    lda L80_UPDATE_ROW                          ; 9580 A5 80
    sta L0380_P2_UPDATE_ROW                     ; 9582 8D 80 03
L9585:
    ; enter top-level state 7.
    lda #$07                                    ; 9585 A9 07
    sta L46_TOP_STATE                           ; 9587 85 46
    rts                                         ; 9589 60
.endscope

; ----------------------------------------------------------------------------
; jump table vector 7
L958A_TOP_7:
.scope
    lda #$40                                    ; 958A A9 40
    jsr R9701_SLEEP                             ; 958C 20 01 97
    ; set bit 7 (victory marker)
    lda #$80                                    ; 958F A9 80
    ora L52_REDRAW_FLAGS                        ; 9591 05 52
    sta L52_REDRAW_FLAGS                        ; 9593 85 52
    lda L0727_NUM_PLAYERS                       ; 9595 AD 27 07
    cmp #$02                                    ; 9598 C9 02
    if_eq                                       ; 959A D0 2D
        lda L031E_P1_WINS                       ; 959C AD 1E 03
        cmp L0725_MAX_WINS                      ; 959F CD 25 07
        if_ne                                   ; 95A2 F0 14
            lda L039E_P2_WINS                   ; 95A4 AD 9E 03
            cmp L0725_MAX_WINS                  ; 95A7 CD 25 07
            if_ne                               ; 95AA F0 0C
                ldx L0731_MUSIC_CHOICE          ; 95AC AE 31 07
                lda LA261,x                     ; 95AF BD 61 A2
                sta L06F5_                      ; 95B2 8D F5 06
                jmp L9646                       ; 95B5 4C 46 96
            end_if
        end_if
        lda #$05                                ; 95B8 A9 05
        sta L06F5_                              ; 95BA 8D F5 06
        lda L0727_NUM_PLAYERS                   ; 95BD AD 27 07
        cmp #$02                                ; 95C0 C9 02
        if_eq                                   ; 95C2 D0 05
            lda #$0B                            ; 95C4 A9 0B
            sta L06F5_                          ; 95C6 8D F5 06
        end_if
    end_if
    lda #$80                                    ; 95C9 A9 80
    jsr R9701_SLEEP                             ; 95CB 20 01 97
    lda #$FF                                    ; 95CE A9 FF
    ldx #$04                                    ; 95D0 A2 04
    ldy #$05                                    ; 95D2 A0 05
    jsr RB894_FILL_PAGES ; fill 4-5 with FF     ; 95D4 20 94 B8
    lda #$04                                    ; 95D7 A9 04
    sta L58_                                    ; 95D9 85 58
    jsr R96D4_GAME_OVER                         ; 95DB 20 D4 96
    lda #$0F                                    ; 95DE A9 0F
    sta L0300_P1_UPDATE_ROW                     ; 95E0 8D 00 03
    lda #$05                                    ; 95E3 A9 05
    sta L58_                                    ; 95E5 85 58
    jsr R96D4_GAME_OVER                         ; 95E7 20 D4 96
    lda #$0F                                    ; 95EA A9 0F
    sta L0380_P2_UPDATE_ROW                     ; 95EC 8D 80 03
    lda #$0F                                    ; 95EF A9 0F
    sta L80_UPDATE_ROW                          ; 95F1 85 80
    lda #$00                                    ; 95F3 A9 00
    sta L61_                                    ; 95F5 85 61
    lda #$01                                    ; 95F7 A9 01
    sta L55_ROUND_WINNER                        ; 95F9 85 55
    lda L031E_P1_WINS                           ; 95FB AD 1E 03
    cmp L0725_MAX_WINS                          ; 95FE CD 25 07
    if_ne                                       ; 9601 F0 04
        lda #$02                                ; 9603 A9 02
        sta L55_ROUND_WINNER                    ; 9605 85 55
    end_if
    loop
        lda L43_CLOCK                           ; 9607 A5 43
        and #$08                                ; 9609 29 08
        if_ne                                   ; 960B F0 13
            lda #$6D                            ; 960D A9 6D
            sta L44_SPRITE_X                    ; 960F 85 44
            ldx L0727_NUM_PLAYERS               ; 9611 AE 27 07
            lda LA105,x                         ; 9614 BD 05 A1
            sta L45_SPRITE_Y                    ; 9617 85 45
            lda #$10                            ; 9619 A9 10
            sta L53_SPRITE_NUM                  ; 961B 85 53
            jsr R88F6_SPRITE                    ; 961D 20 F6 88
            ; "START" sprite
        end_if
        jsr RB654_NEXT_FRAME                    ; 9620 20 54 B6
        ; wait for button press
        lda LF5_P1_INPUT_NEW                    ; 9623 A5 F5
        and #$10 ; "start"                      ; 9625 29 10
    while_eq                                    ; 9627 F0 DE
    lda #$FE                                    ; 9629 A9 FE
    ldx #$04                                    ; 962B A2 04
    ldy #$05                                    ; 962D A0 05
    jsr RB894_FILL_PAGES ; fill page 4-5 (FE)   ; 962F 20 94 B8
    ; enter top-level state 1.
    lda #$01                                    ; 9632 A9 01
    sta L46_TOP_STATE                           ; 9634 85 46
    lda #$00                                    ; 9636 A9 00
    sta L89_LOST                                ; 9638 85 89
    jsr R9721_UPDATE_TOP_SCORE                  ; 963A 20 21 97
    lda #$00                                    ; 963D A9 00
    sta LF5_P1_INPUT_NEW                        ; 963F 85 F5
    lda #$FF                                    ; 9641 A9 FF
    sta L54_ENABLE_PAUSE                        ; 9643 85 54
    rts                                         ; 9645 60

L9646:
    ; 2-player game not over
    jsr R96ED_WAIT_UPDATE_ALL_ROWS              ; 9646 20 ED 96
    loop
        lda L43_CLOCK                           ; 9649 A5 43
        and #$08                                ; 964B 29 08
        if_ne                                   ; 964D F0 13
            lda #$6D                            ; 964F A9 6D
            sta L44_SPRITE_X                    ; 9651 85 44
            ldx L0727_NUM_PLAYERS               ; 9653 AE 27 07
            lda LA105,x                         ; 9656 BD 05 A1
            sta L45_SPRITE_Y                    ; 9659 85 45
            lda #$10                            ; 965B A9 10
            sta L53_SPRITE_NUM                  ; 965D 85 53
            jsr R88F6_SPRITE                    ; 965F 20 F6 88
            ; "START" sprite
        end_if
        jsr RB654_NEXT_FRAME                    ; 9662 20 54 B6
        lda LF5_P1_INPUT_NEW                    ; 9665 A5 F5
        cmp #$10 ; "start"                      ; 9667 C9 10
    while_ne                                    ; 9669 D0 DE
    jsr R90C9_INIT_4_5                          ; 966B 20 C9 90
    jsr R96ED_WAIT_UPDATE_ALL_ROWS              ; 966E 20 ED 96
    ; enter top-level state 3.
    lda #$03                                    ; 9671 A9 03
    sta L46_TOP_STATE                           ; 9673 85 46
    lda #$00                                    ; 9675 A9 00
    sta L89_LOST                                ; 9677 85 89
    lda #$00                                    ; 9679 A9 00
    sta LF5_P1_INPUT_NEW                        ; 967B 85 F5
    lda #$FF                                    ; 967D A9 FF
    sta L54_ENABLE_PAUSE                        ; 967F 85 54
    rts                                         ; 9681 60
.endscope

; ----------------------------------------------------------------------------
; Copy "DRAW" message to both playfields at $0428 and $0528.
; Also set L80_UPDATE_ROW to #$0F.
; Called from RB24F_CHECK_WIN and L9532_TOP_5.
R9682_DRAW_GAME:
.scope
    lda #$04                                    ; 9682 A9 04
    sta L58_                                    ; 9684 85 58
    jsr R9691_DRAW_MESSAGE                      ; 9686 20 91 96
    lda #$05                                    ; 9689 A9 05
    sta L58_                                    ; 968B 85 58
    jsr R9691_DRAW_MESSAGE                      ; 968D 20 91 96
    rts                                         ; 9690 60

; --------------------------------------
; In page pointed to by L58_ (#$04 or #$05),
; Copy 40-byte "DRAW" message from LA80F to offsets $28-$4F
; Also set L80_UPDATE_ROW to #$0F.
R9691_DRAW_MESSAGE:
    lda #$00                                    ; 9691 A9 00
    sta L57_                                    ; 9693 85 57
    ldy #$28                                    ; 9695 A0 28
    loop
        tya                                     ; 9697 98
        sub #$28                                ; 9699 38 E9 28
        tax                                     ; 969B AA
        lda LA80F,x                             ; 969C BD 0F A8
        beq break                               ; 969F F0 06
        sta ($57),y                             ; 96A1 91 57
        iny                                     ; 96A3 C8
    forever                                     ; 96A4 4C 97 96
    lda #$0F                                    ; 96A7 A9 0F
    sta L80_UPDATE_ROW                          ; 96A9 85 80
    rts                                         ; 96AB 60

.endscope

; ----------------------------------------------------------------------------
; unreachable?
    lda #$00                                    ; 96AC A9 00
    sta L57_                                    ; 96AE 85 57
    ldy #$7F                                    ; 96B0 A0 7F
    loop
        lda #$FF                                ; 96B2 A9 FF
        sta ($57),y                             ; 96B4 91 57
        dey                                     ; 96B6 88
        cpy #$FF                                ; 96B7 C0 FF
    while_ne                                    ; 96B9 D0 F7
    lda #$0F                                    ; 96BB A9 0F
    sta L80_UPDATE_ROW                          ; 96BD 85 80
    rts                                         ; 96BF 60

; ----------------------------------------------------------------------------
; Clear bottom half of playfield.
; In page pointed to by L58_ (#$04 or #$05)
; Fill offsets #$40 to #$7f with value #$ff.
; Also set L80_UPDATE_ROW to #$0F.
R96C0:
    lda #$00                                    ; 96C0 A9 00
    sta L57_                                    ; 96C2 85 57
    ldy #$40                                    ; 96C4 A0 40
    loop
        lda #$FF                                ; 96C6 A9 FF
        sta ($57),y                             ; 96C8 91 57
        iny                                     ; 96CA C8
        cpy #$80                                ; 96CB C0 80
    while_ne                                    ; 96CD D0 F7
    lda #$0F                                    ; 96CF A9 0F
    sta L80_UPDATE_ROW                          ; 96D1 85 80
    rts                                         ; 96D3 60

; ----------------------------------------------------------------------------
; In page pointed to by L58_ (#$04 or #$05)
; Copy "GAME OVER" message from LA838 to offsets $10-$41.
; Also set L80_UPDATE_ROW to #$0F.
R96D4_GAME_OVER:
    lda #$00                                    ; 96D4 A9 00
    sta L57_                                    ; 96D6 85 57
    ldx #$00                                    ; 96D8 A2 00
    ldy #$10                                    ; 96DA A0 10
    loop
        lda LA838,x                             ; 96DC BD 38 A8
        beq break                               ; 96DF F0 07
        sta ($57),y                             ; 96E1 91 57
        inx                                     ; 96E3 E8
        iny                                     ; 96E4 C8
    forever                                     ; 96E5 4C DC 96
    lda #$0F                                    ; 96E8 A9 0F
    sta L80_UPDATE_ROW                          ; 96EA 85 80
    rts                                         ; 96EC 60

; ----------------------------------------------------------------------------
; Wait for entire playfield to be redrawn.
; Wait for L0300_P1_UPDATE_ROW to be set to #$FF.
R96ED_WAIT_UPDATE_ALL_ROWS:
    lda #$0F                                    ; 96ED A9 0F
    sta L0300_P1_UPDATE_ROW                     ; 96EF 8D 00 03
    sta L0380_P2_UPDATE_ROW                     ; 96F2 8D 80 03
    loop
       jsr RB654_NEXT_FRAME                     ; 96F5 20 54 B6
       lda L0300_P1_UPDATE_ROW                  ; 96F8 AD 00 03
       cmp #$FF                                 ; 96FB C9 FF
    while_ne                                    ; 96FD D0 F6
    rts                                         ; 96FF 60

; ----------------------------------------------------------------------------
; R9BB9_GAME_STATE_MACHINE routine 4.
L9700_GAME_STATE_4:
    rts                                         ; 9700 60

; ----------------------------------------------------------------------------
; Input: A
; Sleep for A frames.
R9701_SLEEP:
    sta L51_TEMP                                ; 9701 85 51
    lda #$01                                    ; 9703 A9 01
    sta L5D_SHOW_LEVEL                          ; 9705 85 5D
    loop
        jsr RB654_NEXT_FRAME                    ; 9707 20 54 B6
        dec L51_TEMP                            ; 970A C6 51
        lda L51_TEMP                            ; 970C A5 51
    while_ne                                    ; 970E D0 F7
    rts                                         ; 9710 60

; ----------------------------------------------------------------------------
; unused?
    sta L51_TEMP                                ; 9711 85 51
    lda #$00                                    ; 9713 A9 00
    sta L5D_SHOW_LEVEL                          ; 9715 85 5D
    loop
        jsr RB654_NEXT_FRAME                    ; 9717 20 54 B6
        dec L51_TEMP                            ; 971A C6 51
        lda L51_TEMP                            ; 971C A5 51
    while_ne                                    ; 971E D0 F7
    rts                                         ; 9720 60

; ----------------------------------------------------------------------------
; Compare score to top score.
; If score is greater than top score, then copy it to top score.
; Called once in L958A_TOP_7.
R9721_UPDATE_TOP_SCORE:
.scope
    lda L0705_TOP_SCORE_5                       ; 9721 AD 05 07
    cmp L072E_SCORE_5                           ; 9724 CD 2E 07
    if_ne                                       ; 9727 F0 04
        bcs L978D ;exit                         ; 9729 B0 62
        bcc L9769 ;always taken                 ; 972B 90 3C
    end_if
    iny                                         ; 972D C8
    lda L0704_TOP_SCORE_4                       ; 972E AD 04 07
    cmp L072D_SCORE_4                           ; 9731 CD 2D 07
    if_ne                                       ; 9734 F0 04
        bcs L978D                               ; 9736 B0 55
        bcc L9769 ;always taken                 ; 9738 90 2F
    end_if
    iny                                         ; 973A C8
    lda L0703_TOP_SCORE_3                       ; 973B AD 03 07
    cmp L072C_SCORE_3                           ; 973E CD 2C 07
    if_ne                                       ; 9741 F0 04
        bcs L978D                               ; 9743 B0 48
        bcc L9769 ;always taken                 ; 9745 90 22
    end_if
    lda L0702_TOP_SCORE_2                       ; 9747 AD 02 07
    cmp L072B_SCORE_2                           ; 974A CD 2B 07
    if_ne                                       ; 974D F0 04
        bcs L978D                               ; 974F B0 3C
        bcc L9769 ;always taken                 ; 9751 90 16
    end_if
    iny                                         ; 9753 C8
    lda L0701_TOP_SCORE_1                       ; 9754 AD 01 07
    cmp L072A_SCORE_1                           ; 9757 CD 2A 07
    if_ne                                       ; 975A F0 04
        bcs L978D                               ; 975C B0 2F
        bcc L9769 ;always taken                 ; 975E 90 09
    end_if
    iny                                         ; 9760 C8
    lda L0700_TOP_SCORE_0                       ; 9761 AD 00 07
    cmp L0729_SCORE_0                           ; 9764 CD 29 07
    bcs L978D                                   ; 9767 B0 24
L9769:
    lda L072E_SCORE_5                           ; 9769 AD 2E 07
    sta L0705_TOP_SCORE_5                       ; 976C 8D 05 07
    lda L072D_SCORE_4                           ; 976F AD 2D 07
    sta L0704_TOP_SCORE_4                       ; 9772 8D 04 07
    lda L072C_SCORE_3                           ; 9775 AD 2C 07
    sta L0703_TOP_SCORE_3                       ; 9778 8D 03 07
    lda L072B_SCORE_2                           ; 977B AD 2B 07
    sta L0702_TOP_SCORE_2                       ; 977E 8D 02 07
    lda L072A_SCORE_1                           ; 9781 AD 2A 07
    sta L0701_TOP_SCORE_1                       ; 9784 8D 01 07
    lda L0729_SCORE_0                           ; 9787 AD 29 07
    sta L0700_TOP_SCORE_0                       ; 978A 8D 00 07
L978D:
    rts                                         ; 978D 60
.endscope

; ----------------------------------------------------------------------------
; Check for pressing "START" and display "PAUSE" screen.
; Called once in main loop.
R978E_PAUSE:
.scope
    lda L0741_DEMO_MODE                         ; 978E AD 41 07
    bne L97F7                                   ; 9791 D0 64

    begin
        lda LF7_P1_INPUT_OLD                    ; 9793 A5 F7
        cmp #$F0 ; "A+B+SELECT+START"           ; 9795 C9 F0
        bne L97A3                               ; 9797 D0 0A

    user_reset:
        ; enter top-level state 0.
        lda #$00                                ; 9799 A9 00
        sta L46_TOP_STATE                       ; 979B 85 46
        sta L068D_                              ; 979D 8D 8D 06
        jmp break ; rts                         ; 97A0 4C F6 97

    L97A3:
        lda L54_ENABLE_PAUSE                    ; 97A3 A5 54
        beq break ; rts                         ; 97A5 F0 4F
        lda LF5_P1_INPUT_NEW                    ; 97A7 A5 F5
        and #$10 ; "start"                      ; 97A9 29 10
        beq break ; rts                         ; 97AB F0 49
        lda #$05                                ; 97AD A9 05
        sta L068D_                              ; 97AF 8D 8D 06
        lda #$00                                ; 97B2 A9 00
        sta L5D_SHOW_LEVEL                      ; 97B4 85 5D
        jsr RB654_NEXT_FRAME                    ; 97B6 20 54 B6
        ; Turn off background
        lda #$16                                ; 97B9 A9 16
        .ifdef REV_A
        sta LFE_PPUMASK
        .else
        sta L2001_PPUMASK                       ; 97BB 8D 01 20
        .endif
        lda #$FF                                ; 97BE A9 FF
        ldx #>L0200_OAM                         ; 97C0 A2 02
        ldy #>L0200_OAM                         ; 97C2 A0 02
        jsr RB894_FILL_PAGES ; fill page 2 (FF) ; 97C4 20 94 B8
        loop
            lda #$70                            ; 97C7 A9 70
            sta L44_SPRITE_X                    ; 97C9 85 44
            lda #$77                            ; 97CB A9 77
            sta L45_SPRITE_Y                    ; 97CD 85 45
            lda #$00                            ; 97CF A9 00
            sta L53_SPRITE_NUM                  ; 97D1 85 53
            jsr R88F6_SPRITE                    ; 97D3 20 F6 88
            ; "PAUSE" sprite
            lda LF5_P1_INPUT_NEW                ; 97D6 A5 F5
            cmp #$10 ; "start"                  ; 97D8 C9 10
            beq break                           ; 97DA F0 0C
            lda LF7_P1_INPUT_OLD                ; 97DC A5 F7
            cmp #$F0 ; "A+B+SELECT+START"       ; 97DE C9 F0
            beq user_reset                      ; 97E0 F0 B7
            jsr RB654_NEXT_FRAME                ; 97E2 20 54 B6
        forever                                 ; 97E5 4C C7 97
        lda #$FF                                ; 97E8 A9 FF
        sta L5D_SHOW_LEVEL                      ; 97EA 85 5D
        ; Turn on background
        lda #$1E                                ; 97EC A9 1E
        .ifdef REV_A
        sta LFE_PPUMASK
        .else
        sta L2001_PPUMASK                       ; 97EE 8D 01 20
        .endif
        lda #$00                                ; 97F1 A9 00
        sta L068D_                              ; 97F3 8D 8D 06
    end
    rts                                         ; 97F6 60

L97F7:
    lda LF5_P1_INPUT_NEW                        ; 97F7 A5 F5
    cmp #$10 ; "start"                          ; 97F9 C9 10
    if_eq                                       ; 97FB D0 1E
        lda #$00                                ; 97FD A9 00
        sta L36_                                ; 97FF 85 36
        ; enter top-level state 0.
        sta L46_TOP_STATE                       ; 9801 85 46
        lda L073C_OLD_OPTIONS_0                 ; 9803 AD 3C 07
        sta L0316_P1_LEVEL                      ; 9806 8D 16 03
        lda L073D_OLD_OPTIONS_1                 ; 9809 AD 3D 07
        sta L030B_P1_SPEED                      ; 980C 8D 0B 03
        lda L073E_OLD_OPTIONS_2                 ; 980F AD 3E 07
        sta L0727_NUM_PLAYERS                   ; 9812 8D 27 07
        lda L073F_OLD_OPTIONS_3                 ; 9815 AD 3F 07
        sta L0731_MUSIC_CHOICE                  ; 9818 8D 31 07
    end_if
    rts                                         ; 981B 60
.endscope

; ----------------------------------------------------------------------------
; jump table vector 0
; Title screen
L981C_TOP_0:
.scope
    lda L0741_DEMO_MODE                         ; 981C AD 41 07
    cmp #$FE                                    ; 981F C9 FE
    if_eq                                       ; 9821 D0 1E
        lda #$00                                ; 9823 A9 00
        sta L36_                                ; 9825 85 36
        ; enter top-level state 0.
        sta L46_TOP_STATE                       ; 9827 85 46
        lda L073C_OLD_OPTIONS_0                 ; 9829 AD 3C 07
        sta L0316_P1_LEVEL                      ; 982C 8D 16 03
        lda L073D_OLD_OPTIONS_1                 ; 982F AD 3D 07
        sta L030B_P1_SPEED                      ; 9832 8D 0B 03
        lda L073E_OLD_OPTIONS_2                 ; 9835 AD 3E 07
        sta L0727_NUM_PLAYERS                   ; 9838 8D 27 07
        lda L073F_OLD_OPTIONS_3                 ; 983B AD 3F 07
        sta L0731_MUSIC_CHOICE                  ; 983E 8D 31 07
    end_if
    lda #$06                                    ; 9841 A9 06
    sta L06F5_                                  ; 9843 8D F5 06
    lda #$02                                    ; 9846 A9 02
    jsr RB8E0 ; Set mapper CHR bank 0.          ; 9848 20 E0 B8
    lda #$00                                    ; 984B A9 00
    sta L5D_SHOW_LEVEL                          ; 984D 85 5D
    sta L52_REDRAW_FLAGS                        ; 984F 85 52
    sta L0741_DEMO_MODE                         ; 9851 8D 41 07
    sta L51_TEMP                                ; 9854 85 51
    lda #$FF                                    ; 9856 A9 FF
    sta L80_UPDATE_ROW                          ; 9858 85 80
    sta L0300_P1_UPDATE_ROW                     ; 985A 8D 00 03
    sta L0380_P2_UPDATE_ROW                     ; 985D 8D 80 03
    ; point L36_/L37_ at LD000
    lda #<LD000                                 ; 9860 A9 00
    sta L36_                                    ; 9862 85 36
    lda #>LD000                                 ; 9864 A9 D0
    sta L37_                                    ; 9866 85 37
    jsr RB67C_DISABLE_VIDEO                     ; 9868 20 7C B6
    jsr RB6A2_DISABLE_NMI                       ; 986B 20 A2 B6
    jsr RB6C2_PRINT                             ; 986E 20 C2 B6
    .word LB91C ; title screen                  ; 9871 1C B9
    lda #$81                                    ; 9873 A9 81
    sta L66_PALETTE                             ; 9875 85 66
    jsr R91D0_CHECKSUM                          ; 9877 20 D0 91
    jsr RB695_ENABLE_NMI                        ; 987A 20 95 B6
    jsr RB689_ENABLE_VIDEO                      ; 987D 20 89 B6
    lda #$00                                    ; 9880 A9 00
    sta L54_ENABLE_PAUSE                        ; 9882 85 54
    lda #$FF                                    ; 9884 A9 FF
    sta L80_UPDATE_ROW                          ; 9886 85 80
    loop
        ; Toggle CHR bank 1 between 3 and 4
        ; every 16 frames
        lda L43_CLOCK                           ; 9888 A5 43
        and #$10                                ; 988A 29 10
        lsr a                                   ; 988C 4A
        lsr a                                   ; 988D 4A
        lsr a                                   ; 988E 4A
        lsr a                                   ; 988F 4A
        add #$03                                ; 9890 18 69 03
        jsr RB8F4 ; Set mapper CHR bank 1.      ; 9893 20 F4 B8
        lda LF5_P1_INPUT_NEW                    ; 9896 A5 F5
        cmp #$08 ; "up"                         ; 9898 C9 08
        if_eq                                   ; 989A D0 15
            lda L0727_NUM_PLAYERS               ; 989C AD 27 07
            cmp #$01                            ; 989F C9 01
            if_ne                               ; 98A1 F0 0E
                lda #$01                        ; 98A3 A9 01
                sta L06F1_                      ; 98A5 8D F1 06
                lda #$01                        ; 98A8 A9 01
                sta L0727_NUM_PLAYERS           ; 98AA 8D 27 07
                lda #$00                        ; 98AD A9 00
                sta L51_TEMP                    ; 98AF 85 51
            end_if
        end_if
        lda LF5_P1_INPUT_NEW                    ; 98B1 A5 F5
        cmp #$04 ; "down"                       ; 98B3 C9 04
        if_eq                                   ; 98B5 D0 15
            lda L0727_NUM_PLAYERS               ; 98B7 AD 27 07
            cmp #$02                            ; 98BA C9 02
            if_ne                               ; 98BC F0 0E
                lda #$01                        ; 98BE A9 01
                sta L06F1_                      ; 98C0 8D F1 06
                lda #$02                        ; 98C3 A9 02
                sta L0727_NUM_PLAYERS           ; 98C5 8D 27 07
                lda #$00                        ; 98C8 A9 00
                sta L51_TEMP                    ; 98CA 85 51
            end_if
        end_if
        cmp #$20 ; "select"                     ; 98CC C9 20
        if_eq                                   ; 98CE D0 11
            lda #$01                            ; 98D0 A9 01
            sta L06F1_                          ; 98D2 8D F1 06
            lda L0727_NUM_PLAYERS               ; 98D5 AD 27 07
            eor #$03                            ; 98D8 49 03
            sta L0727_NUM_PLAYERS               ; 98DA 8D 27 07
            lda #$00                            ; 98DD A9 00
            sta L51_TEMP                        ; 98DF 85 51
        end_if

        lda #$45                                ; 98E1 A9 45
        sta L44_SPRITE_X                        ; 98E3 85 44
        ldx L0727_NUM_PLAYERS                   ; 98E5 AE 27 07
        lda LA267,x                             ; 98E8 BD 67 A2
        sta L45_SPRITE_Y                        ; 98EB 85 45
        lda #$21                                ; 98ED A9 21
        sta L53_SPRITE_NUM                      ; 98EF 85 53
        jsr R88F6_SPRITE                        ; 98F1 20 F6 88
        ; small heart sprite
        jsr R8BE5_TITLE_SPRITES                 ; 98F4 20 E5 8B
        jsr RB654_NEXT_FRAME                    ; 98F7 20 54 B6
        lda L43_CLOCK                           ; 98FA A5 43
        if_eq                                   ; 98FC D0 08
            inc L51_TEMP                        ; 98FE E6 51
            lda L51_TEMP                        ; 9900 A5 51
            cmp #$08                            ; 9902 C9 08
            beq L9912                           ; 9904 F0 0C
        end_if
        lda LF5_P1_INPUT_NEW                    ; 9906 A5 F5
        cmp #$10 ; "start"                      ; 9908 C9 10
        beq break                               ; 990A F0 03
    forever                                     ; 990C 4C 88 98

L990F:
    ; enter top-level state 1
    inc L46_TOP_STATE                           ; 990F E6 46
    rts                                         ; 9911 60

L9912:
    lda #$FE                                    ; 9912 A9 FE
    sta L0741_DEMO_MODE                         ; 9914 8D 41 07
    lda L0316_P1_LEVEL                          ; 9917 AD 16 03
    sta L073C_OLD_OPTIONS_0                     ; 991A 8D 3C 07
    lda L030B_P1_SPEED                          ; 991D AD 0B 03
    sta L073D_OLD_OPTIONS_1                     ; 9920 8D 3D 07
    lda L0727_NUM_PLAYERS                       ; 9923 AD 27 07
    sta L073E_OLD_OPTIONS_2                     ; 9926 8D 3E 07
    lda L0731_MUSIC_CHOICE                      ; 9929 AD 31 07
    sta L073F_OLD_OPTIONS_3                     ; 992C 8D 3F 07
    lda #$00                                    ; 992F A9 00
    sta L70_DEMO_INPUT                          ; 9931 85 70
    sta L69_DEMO_DELAY                          ; 9933 85 69
    lda #$01                                    ; 9935 A9 01
    sta L8B_SPEED                               ; 9937 85 8B
    sta L030B_P1_SPEED                          ; 9939 8D 0B 03
    sta L0727_NUM_PLAYERS                       ; 993C 8D 27 07
    lda #$03                                    ; 993F A9 03
    sta L0731_MUSIC_CHOICE                      ; 9941 8D 31 07
    lda #$44                                    ; 9944 A9 44
    sta LA4_VIRUS_BCD                           ; 9946 85 A4
    sta L0324_P1_VIRUS                          ; 9948 8D 24 03
    lda #$0A                                    ; 994B A9 0A
    sta L0316_P1_LEVEL                          ; 994D 8D 16 03
    jmp L990F                                   ; 9950 4C 0F 99
.endscope ;L981C_TOP_0

; ----------------------------------------------------------------------------
; Jump table vector 1
; Settings screen
L9953_TOP_1:
.scope
    lda L0741_DEMO_MODE                         ; 9953 AD 41 07
    if_ne                                       ; 9956 F0 03
        jmp L9AC2 ; state 2 and rts             ; 9958 4C C2 9A
    end_if
    jsr RFFD3                                   ; 995B 20 D3 FF
    lda #$05                                    ; 995E A9 05
    jsr RB8E0 ; Set mapper CHR bank 0.          ; 9960 20 E0 B8
    lda #$05                                    ; 9963 A9 05
    jsr RB8F4 ; Set mapper CHR bank 1.          ; 9965 20 F4 B8
    lda #$00                                    ; 9968 A9 00
    sta L5D_SHOW_LEVEL                          ; 996A 85 5D
    sta L52_REDRAW_FLAGS                        ; 996C 85 52
    sta L65_OPTION_SEL                          ; 996E 85 65
    sta L0728_INITIAL_EXTRA_SPEED               ; 9970 8D 28 07
    lda #$03                                    ; 9973 A9 03
    sta L0725_MAX_WINS                          ; 9975 8D 25 07
    lda #$FF                                    ; 9978 A9 FF
    sta L80_UPDATE_ROW                          ; 997A 85 80
    sta L0300_P1_UPDATE_ROW                     ; 997C 8D 00 03
    sta L0380_P2_UPDATE_ROW                     ; 997F 8D 80 03
    .ifdef REV_A
    lda L0731_MUSIC_CHOICE
    cmp #$03
    if_cs
        lda #$00
        sta L0731_MUSIC_CHOICE
    end_if
    .endif
    lda L0316_P1_LEVEL                          ; 9982 AD 16 03
    cmp #$15                                    ; 9985 C9 15
    if_pl                                       ; 9987 30 05
        lda #$14                                ; 9989 A9 14
        sta L0316_P1_LEVEL                      ; 998B 8D 16 03
    end_if
    jsr RB67C_DISABLE_VIDEO                     ; 998E 20 7C B6
    jsr RB6A2_DISABLE_NMI                       ; 9991 20 A2 B6
    jsr RB6C2_PRINT                             ; 9994 20 C2 B6
    .word LBD7D ; settings screen               ; 9997 7D BD
    lda #$01                                    ; 9999 A9 01
    sta L68_REDRAW_OPTS                         ; 999B 85 68
    jsr R8508_PRINT_SETTINGS                    ; 999D 20 08 85
    lda #$82                                    ; 99A0 A9 82
    sta L66_PALETTE                             ; 99A2 85 66
    ; PPU address $20AA (row 5, col 10)
    ; "_ PLAYER GAME"
    lda #$20                                    ; 99A4 A9 20
    sta L2006_PPUADDR                           ; 99A6 8D 06 20
    lda #$AA                                    ; 99A9 A9 AA
    sta L2006_PPUADDR                           ; 99AB 8D 06 20
    lda L0727_NUM_PLAYERS                       ; 99AE AD 27 07
    sta L2007_PPUDATA                           ; 99B1 8D 07 20
    lda L0727_NUM_PLAYERS                       ; 99B4 AD 27 07
    cmp #$01                                    ; 99B7 C9 01
    if_eq                                       ; 99B9 D0 05
        jsr RB6C2_PRINT                         ; 99BB 20 C2 B6
        .word LA26A                             ; 99BE 6A A2
    end_if
    lda #$04                                    ; 99C0 A9 04
    sta L68_REDRAW_OPTS                         ; 99C2 85 68
    jsr RB695_ENABLE_NMI                        ; 99C4 20 95 B6
    jsr RB689_ENABLE_VIDEO                      ; 99C7 20 89 B6
    lda #$00                                    ; 99CA A9 00
    sta L54_ENABLE_PAUSE                        ; 99CC 85 54
    lda #$FF                                    ; 99CE A9 FF
    sta L0300_P1_UPDATE_ROW                     ; 99D0 8D 00 03
    lda #$07                                    ; 99D3 A9 07
    sta L06F5_                                  ; 99D5 8D F5 06
    loop
        ldx #L17_LFSR_0                         ; 99D8 A2 17
        ldy #$02                                ; 99DA A0 02
        jsr RB771_STEP_LFSR                     ; 99DC 20 71 B7
        lda LF5_P1_INPUT_NEW                    ; 99DF A5 F5
        cmp #$40 ; "B"                          ; 99E1 C9 40
        if_eq                                   ; 99E3 D0 07
            ; enter top-level state 0.
            lda #$00                            ; 99E5 A9 00
            sta L46_TOP_STATE                   ; 99E7 85 46
            jmp L9AC4 ; rts                     ; 99E9 4C C4 9A
        end_if
        cmp #$10 ; "start"                      ; 99EC C9 10
        if_eq                                   ; 99EE D0 03
            jmp break                           ; 99F0 4C C2 9A
        end_if
        lda L65_OPTION_SEL                      ; 99F3 A5 65
        cmp #$00                                ; 99F5 C9 00
        if_eq                                   ; 99F7 D0 19
            jsr R9075_LOAD_P1                   ; 99F9 20 75 90
            jsr R9AC5_SELECT_LEVEL              ; 99FC 20 C5 9A
            jsr R90AF_SAVE_P1                   ; 99FF 20 AF 90
            lda L0727_NUM_PLAYERS               ; 9A02 AD 27 07
            cmp #$02                            ; 9A05 C9 02
            if_eq                               ; 9A07 D0 09
                jsr R9092_LOAD_P2               ; 9A09 20 92 90
                jsr R9AC5_SELECT_LEVEL          ; 9A0C 20 C5 9A
                jsr R90BC_SAVE_P2               ; 9A0F 20 BC 90
            end_if
        end_if
        lda L65_OPTION_SEL                      ; 9A12 A5 65
        cmp #$01                                ; 9A14 C9 01
        if_eq                                   ; 9A16 D0 19
            jsr R9075_LOAD_P1                   ; 9A18 20 75 90
            jsr R9B1D_SELECT_SPEED              ; 9A1B 20 1D 9B
            jsr R90AF_SAVE_P1                   ; 9A1E 20 AF 90
            lda L0727_NUM_PLAYERS               ; 9A21 AD 27 07
            cmp #$02                            ; 9A24 C9 02
            if_eq                               ; 9A26 D0 09
                jsr R9092_LOAD_P2               ; 9A28 20 92 90
                jsr R9B1D_SELECT_SPEED          ; 9A2B 20 1D 9B
                jsr R90BC_SAVE_P2               ; 9A2E 20 BC 90
            end_if
        end_if
        lda L65_OPTION_SEL                      ; 9A31 A5 65
        cmp #$02                                ; 9A33 C9 02
        if_eq                                   ; 9A35 D0 28
            lda LF5_P1_INPUT_NEW                ; 9A37 A5 F5
            and #$01 ; "right"                  ; 9A39 29 01
            if_ne                               ; 9A3B F0 0F
                lda L0731_MUSIC_CHOICE          ; 9A3D AD 31 07
                cmp #$02                        ; 9A40 C9 02
                if_ne                           ; 9A42 F0 08
                    lda #$03                    ; 9A44 A9 03
                    sta L06F1_                  ; 9A46 8D F1 06
                    inc L0731_MUSIC_CHOICE      ; 9A49 EE 31 07
                end_if
            end_if
            lda LF5_P1_INPUT_NEW                ; 9A4C A5 F5
            and #$02 ; "left"                   ; 9A4E 29 02
            if_ne                               ; 9A50 F0 0D
                lda L0731_MUSIC_CHOICE          ; 9A52 AD 31 07
                if_ne                           ; 9A55 F0 08
                    lda #$03                    ; 9A57 A9 03
                    sta L06F1_                  ; 9A59 8D F1 06
                    dec L0731_MUSIC_CHOICE      ; 9A5C CE 31 07
                end_if
            end_if
        end_if
        lda LF5_P1_INPUT_NEW                    ; 9A5F A5 F5
        cmp #$08 ; "up"                         ; 9A61 C9 08
        if_eq                                   ; 9A63 D0 11
            lda L65_OPTION_SEL                  ; 9A65 A5 65
            if_ne                               ; 9A67 F0 0D
                lda #$01                        ; 9A69 A9 01
                sta L06F1_                      ; 9A6B 8D F1 06
                dec L65_OPTION_SEL              ; 9A6E C6 65
                lda L65_OPTION_SEL              ; 9A70 A5 65
                sta L68_REDRAW_OPTS             ; 9A72 85 68
                inc L68_REDRAW_OPTS             ; 9A74 E6 68
            end_if
        end_if
        lda LF5_P1_INPUT_NEW                    ; 9A76 A5 F5
        cmp #$04 ; "down"                       ; 9A78 C9 04
        if_eq                                   ; 9A7A D0 13
            lda L65_OPTION_SEL                  ; 9A7C A5 65
            cmp #$02                            ; 9A7E C9 02
            if_ne                               ; 9A80 F0 0D
                lda #$01                        ; 9A82 A9 01
                sta L06F1_                      ; 9A84 8D F1 06
                inc L65_OPTION_SEL              ; 9A87 E6 65
                lda L65_OPTION_SEL              ; 9A89 A5 65
                sta L68_REDRAW_OPTS             ; 9A8B 85 68
                inc L68_REDRAW_OPTS             ; 9A8D E6 68
            end_if
        end_if
        jsr R9075_LOAD_P1                       ; 9A8F 20 75 90
        jsr R9B42 ; Setting slider sprites      ; 9A92 20 42 9B
        jsr R90AF_SAVE_P1                       ; 9A95 20 AF 90
        lda L0727_NUM_PLAYERS                   ; 9A98 AD 27 07
        cmp #$02                                ; 9A9B C9 02
        if_eq                                   ; 9A9D D0 09
            jsr R9092_LOAD_P2                   ; 9A9F 20 92 90
            jsr R9B42 ; Slider sprites          ; 9AA2 20 42 9B
            jsr R90BC_SAVE_P2                   ; 9AA5 20 BC 90
        end_if
        ldx L0731_MUSIC_CHOICE                  ; 9AA8 AE 31 07
        lda LA117,x                             ; 9AAB BD 17 A1
        sta L44_SPRITE_X                        ; 9AAE 85 44
        lda #$B7                                ; 9AB0 A9 B7
        sta L45_SPRITE_Y                        ; 9AB2 85 45
        lda LA113,x ; $04,$04,$05               ; 9AB4 BD 13 A1
        sta L53_SPRITE_NUM                      ; 9AB7 85 53
        jsr R88F6_SPRITE                        ; 9AB9 20 F6 88
        ; 7x3 or 5x3 box sprite
        jsr RB654_NEXT_FRAME                    ; 9ABC 20 54 B6
    forever                                     ; 9ABF 4C D8 99
L9AC2:
    ; enter top-level state 2
    inc L46_TOP_STATE                           ; 9AC2 E6 46
L9AC4:
    rts                                         ; 9AC4 60

; --------------------------------------
; Move left or right on level select slider.
; Called by L9953_TOP_1, if L65_OPTION_SEL == 0.
R9AC5_SELECT_LEVEL:
    begin
        lda L93_REPEAT_TIMER                    ; 9AC5 A5 93
        if_eq                                   ; 9AC7 D0 0A
            lda L5B_INPUT_NEW                   ; 9AC9 A5 5B
            and #$03 ; "left" or "right"        ; 9ACB 29 03
            beq break                           ; 9ACD F0 4D
            lda #$07                            ; 9ACF A9 07
            sta L93_REPEAT_TIMER                ; 9AD1 85 93
        end_if
        lda L5C_INPUT_OLD                       ; 9AD3 A5 5C
        and #$03 ; "left" or "right"            ; 9AD5 29 03
        if_eq                                   ; 9AD7 D0 07
            lda #$00                            ; 9AD9 A9 00
            sta L93_REPEAT_TIMER                ; 9ADB 85 93
        else                                    ; 9ADD 4C 1C 9B
            inc L93_REPEAT_TIMER                ; 9AE0 E6 93
            lda L93_REPEAT_TIMER                ; 9AE2 A5 93
            cmp #$08                            ; 9AE4 C9 08
            ; if L93_REPEAT_TIMER >= #8
            if_cs                               ; 9AE6 90 34
                lda #$01                        ; 9AE8 A9 01
                sta L93_REPEAT_TIMER            ; 9AEA 85 93
                lda L5C_INPUT_OLD               ; 9AEC A5 5C
                and #$01 ; "right"              ; 9AEE 29 01
                if_ne                           ; 9AF0 F0 13
                    lda L96_LEVEL               ; 9AF2 A5 96
                    cmp #$14                    ; 9AF4 C9 14
                    if_ne                       ; 9AF6 F0 0D
                        lda #$03                ; 9AF8 A9 03
                        sta L06F1_              ; 9AFA 8D F1 06
                        lda L68_REDRAW_OPTS     ; 9AFD A5 68
                        ora #$04                ; 9AFF 09 04
                        sta L68_REDRAW_OPTS     ; 9B01 85 68
                        inc L96_LEVEL           ; 9B03 E6 96
                    end_if
                end_if
                lda L5C_INPUT_OLD               ; 9B05 A5 5C
                and #$02 ; "left"               ; 9B07 29 02
                if_ne                           ; 9B09 F0 11
                    lda L96_LEVEL               ; 9B0B A5 96
                    if_ne                       ; 9B0D F0 0D
                        lda #$03                ; 9B0F A9 03
                        sta L06F1_              ; 9B11 8D F1 06
                        lda L68_REDRAW_OPTS     ; 9B14 A5 68
                        ora #$04                ; 9B16 09 04
                        sta L68_REDRAW_OPTS     ; 9B18 85 68
                        dec L96_LEVEL           ; 9B1A C6 96
                    end_if
                end_if
            end_if
        end_if
    end
    rts                                         ; 9B1C 60

; --------------------------------------
; Move left or right on speed selector.
; Called by L9953_TOP_1, if L65_OPTION_SEL == 1.
R9B1D_SELECT_SPEED:
    lda L5B_INPUT_NEW                           ; 9B1D A5 5B
    cmp #$01 ; "right"                          ; 9B1F C9 01
    if_eq                                       ; 9B21 D0 0D
        lda L8B_SPEED                           ; 9B23 A5 8B
        cmp #$02                                ; 9B25 C9 02
        if_ne                                   ; 9B27 F0 07
            lda #$03                            ; 9B29 A9 03
            sta L06F1_                          ; 9B2B 8D F1 06
            inc L8B_SPEED                       ; 9B2E E6 8B
        end_if
    end_if
    lda L5B_INPUT_NEW                           ; 9B30 A5 5B
    cmp #$02 ; "left"                           ; 9B32 C9 02
    if_eq                                       ; 9B34 D0 0B
        lda L8B_SPEED                           ; 9B36 A5 8B
        if_ne                                   ; 9B38 F0 07
            lda #$03                            ; 9B3A A9 03
            sta L06F1_                          ; 9B3C 8D F1 06
            dec L8B_SPEED                       ; 9B3F C6 8B
        end_if
    end_if
    rts                                         ; 9B41 60

; --------------------------------------
; Load sprites for settings screen pointers.
R9B42:
    ldx L96_LEVEL                               ; 9B42 A6 96
    lda LA294,x                                 ; 9B44 BD 94 A2
    sta L44_SPRITE_X                            ; 9B47 85 44
    ldx L58_                                    ; 9B49 A6 58
    lda LA2A9,x ; 4:$53,5:$62                   ; 9B4B BD A9 A2
    sta L45_SPRITE_Y                            ; 9B4E 85 45
    lda L58_                                    ; 9B50 A5 58
    add #$19                                    ; 9B52 18 69 19
    sta L53_SPRITE_NUM                          ; 9B55 85 53
    jsr R88F6_SPRITE                            ; 9B57 20 F6 88
    ; Sprite $1d or $1e
    ; Small pointer (possibly flipped)
    ldx L8B_SPEED                               ; 9B5A A6 8B
    lda LA2AF,x ; $58,$80,$A4                   ; 9B5C BD AF A2
    sta L44_SPRITE_X                            ; 9B5F 85 44
    ldx L58_                                    ; 9B61 A6 58
    lda LA2B2,x ; 4:$87,5:$96                   ; 9B63 BD B2 A2
    sta L45_SPRITE_Y                            ; 9B66 85 45
    lda L58_                                    ; 9B68 A5 58
    add #$FE                                    ; 9B6A 18 69 FE
    sta L53_SPRITE_NUM                          ; 9B6D 85 53
    jsr R88F6_SPRITE                            ; 9B6F 20 F6 88
    ; Sprite $02 or $03
    ; Slider pointer (possibly flipped)
    rts                                         ; 9B72 60

.endscope ;L9953_TOP_1

; ----------------------------------------------------------------------------
; jump table vector 4
L9B73_TOP_4:
.scope
    jsr R9075_LOAD_P1                           ; 9B73 20 75 90
    jsr R9BB9_GAME_STATE_MACHINE                ; 9B76 20 B9 9B
    jsr R90AF_SAVE_P1                           ; 9B79 20 AF 90
    lda L0727_NUM_PLAYERS                       ; 9B7C AD 27 07
    cmp #$02                                    ; 9B7F C9 02
    if_eq                                       ; 9B81 D0 17
        lda L9E_WINS                            ; 9B83 A5 9E
        cmp L0725_MAX_WINS                      ; 9B85 CD 25 07
        beq L9BB4                               ; 9B88 F0 2A
        jsr R9092_LOAD_P2                       ; 9B8A 20 92 90
        jsr R9BB9_GAME_STATE_MACHINE            ; 9B8D 20 B9 9B
        jsr R90BC_SAVE_P2                       ; 9B90 20 BC 90
        lda L9E_WINS                            ; 9B93 A5 9E
        cmp L0725_MAX_WINS                      ; 9B95 CD 25 07
        beq L9BB4                               ; 9B98 F0 1A
    end_if

    jsr RB24F_CHECK_WIN                         ; 9B9A 20 4F B2
    lda L0389_P2_LOST                           ; 9B9D AD 89 03
    bne L9BA7                                   ; 9BA0 D0 05

    lda L0309_P1_LOST                           ; 9BA2 AD 09 03
    beq L9BB3 ; rts                             ; 9BA5 F0 0C

L9BA7:
    ; enter top-level state 5
    lda #$05                                    ; 9BA7 A9 05
    sta L46_TOP_STATE                           ; 9BA9 85 46
    lda #$04                                    ; 9BAB A9 04
    sta L0317_P1_GAME_STATE                     ; 9BAD 8D 17 03
    sta L0397_P2_GAME_STATE                     ; 9BB0 8D 97 03
L9BB3:
    rts                                         ; 9BB3 60

L9BB4:
    ; enter top-level state 7
    lda #$07                                    ; 9BB4 A9 07
    sta L46_TOP_STATE                           ; 9BB6 85 46
    rts                                         ; 9BB8 60
.endscope

; ----------------------------------------------------------------------------
; Jump to one of 7 subroutines based on L97_GAME_STATE.

R9BB9_GAME_STATE_MACHINE:
.scope
    lda L97_GAME_STATE                          ; 9BB9 A5 97
    jsr RB8AC_JUMP_TABLE                        ; 9BBB 20 AC B8
    .word L8D56_GAME_STATE_0 ; 0 -> 0 or 1
      ; jsr R871F_THIS_PILL_SPRITE R8D70_DROP_PILL R8DBF_PILL_MOVE R8E2B_PILL_ROTATE
    .word L8C6F_GAME_STATE_1 ; 1: jsr R8C73 (can go to state 2)
    .word L9BD4_GAME_STATE_2 ; 2: jsr R9BE9 R9C01_DROP_GARBAGE, state 1 (garbage made) or 5 (none)
    .word L9BCF_GAME_STATE_3 ; 3: to state 0
    .word L9700_GAME_STATE_4 ; 4: rts
    .word L9BCC_GAME_STATE_5 ; 5: to state 6
    .word L9F87_GAME_STATE_6 ; 6: lots  ; can go to state 3

; --------------------------------------
; R9BB9_GAME_STATE_MACHINE routine 5.
L9BCC_GAME_STATE_5:
    inc L97_GAME_STATE                          ; 9BCC E6 97
    rts                                         ; 9BCE 60

; --------------------------------------
; R9BB9_GAME_STATE_MACHINE routine 3.
L9BCF_GAME_STATE_3:
    lda #$00                                    ; 9BCF A9 00
    sta L97_GAME_STATE                          ; 9BD1 85 97
    rts                                         ; 9BD3 60

; --------------------------------------
; R9BB9_GAME_STATE_MACHINE routine 2.
; Goes to state 1 (if garbage is made) or 5 (otherwise).
L9BD4_GAME_STATE_2:
.scope
    lda L0727_NUM_PLAYERS                       ; 9BD4 AD 27 07
    cmp #$02                                    ; 9BD7 C9 02
    if_eq                                       ; 9BD9 D0 09
        jsr R9BE9                               ; 9BDB 20 E9 9B
        jsr R9C01_DROP_GARBAGE                  ; 9BDE 20 01 9C
    else                                        ; 9BE1 4C E8 9B
        lda #$05                                ; 9BE4 A9 05
        sta L97_GAME_STATE                      ; 9BE6 85 97
    end_if
    rts                                         ; 9BE8 60

; If L8F_CLEAR_COMBO >= #$02 then L98_GARBAGE += L8F_CLEAR_COMBO, $06F4 = $58 - #3.
; Then zero L8F_CLEAR_COMBO.
R9BE9:
    lda L8F_CLEAR_COMBO                         ; 9BE9 A5 8F
    cmp #$02                                    ; 9BEB C9 02
    if_cs                                       ; 9BED 90 0D
        add L98_GARBAGE                         ; 9BEF 18 65 98
        sta L98_GARBAGE                         ; 9BF2 85 98
        lda L58_                                ; 9BF4 A5 58
        sub #$03                                ; 9BF6 38 E9 03
        sta L06F4_                              ; 9BF9 8D F4 06
    end_if
    lda #$00                                    ; 9BFC A9 00
    sta L8F_CLEAR_COMBO                         ; 9BFE 85 8F
    rts                                         ; 9C00 60

; Make garbage pieces in 2-player mode?
; Go to state 1 if garbage was made; else state 5.
R9C01_DROP_GARBAGE:
    lda #$00                                    ; 9C01 A9 00
    sta L57_                                    ; 9C03 85 57
    ldx L58_                                    ; 9C05 A6 58
    lda LA545,x ; 4 -> $80, 5 -> $00            ; 9C07 BD 45 A5
    tax                                         ; 9C0A AA
    ; check if other player has garbage to give
    lda L0318_P1_GARBAGE,x                      ; 9C0B BD 18 03
    cmp #$02                                    ; 9C0E C9 02
    if_cs                                       ; 9C10 90 7A
        if_eq                                   ; 9C12 D0 1A
            lda L43_CLOCK                       ; 9C14 A5 43
            and #$03                            ; 9C16 29 03
            tay                                 ; 9C18 A8
            lda L0329_P1_JUNK_COLOR_0,x         ; 9C19 BD 29 03
            ora #$80 ; small round              ; 9C1C 09 80
            sta ($57),y                         ; 9C1E 91 57
            iny                                 ; 9C20 C8
            iny                                 ; 9C21 C8
            iny                                 ; 9C22 C8
            iny                                 ; 9C23 C8
            lda L032A_P1_JUNK_COLOR_1,x         ; 9C24 BD 2A 03
            ora #$80 ; small round              ; 9C27 09 80
            sta ($57),y                         ; 9C29 91 57
        else                                    ; 9C2B 4C 7A 9C
            cmp #$03                            ; 9C2E C9 03
            if_eq                               ; 9C30 D0 21
                lda L43_CLOCK                   ; 9C32 A5 43
                and #$03                        ; 9C34 29 03
                tay                             ; 9C36 A8
                lda L0329_P1_JUNK_COLOR_0,x     ; 9C37 BD 29 03
                ora #$80 ; small round          ; 9C3A 09 80
                sta ($57),y                     ; 9C3C 91 57
                iny                             ; 9C3E C8
                iny                             ; 9C3F C8
                lda L032A_P1_JUNK_COLOR_1,x     ; 9C40 BD 2A 03
                ora #$80                        ; 9C43 09 80
                sta ($57),y                     ; 9C45 91 57
                iny                             ; 9C47 C8
                iny                             ; 9C48 C8
                lda L032B_P1_JUNK_COLOR_2,x     ; 9C49 BD 2B 03
                ora #$80 ; small round          ; 9C4C 09 80
                sta ($57),y                     ; 9C4E 91 57
            else                                ; 9C50 4C 7A 9C
                lda L43_CLOCK                   ; 9C53 A5 43
                and #$01                        ; 9C55 29 01
                tay                             ; 9C57 A8
                lda L0329_P1_JUNK_COLOR_0,x     ; 9C58 BD 29 03
                ora #$80 ; small round          ; 9C5B 09 80
                sta ($57),y                     ; 9C5D 91 57
                iny                             ; 9C5F C8
                iny                             ; 9C60 C8
                lda L032A_P1_JUNK_COLOR_1,x     ; 9C61 BD 2A 03
                ora #$80 ; small round          ; 9C64 09 80
                sta ($57),y                     ; 9C66 91 57
                iny                             ; 9C68 C8
                iny                             ; 9C69 C8
                lda L032B_P1_JUNK_COLOR_2,x     ; 9C6A BD 2B 03
                ora #$80 ; small round          ; 9C6D 09 80
                sta ($57),y                     ; 9C6F 91 57
                iny                             ; 9C71 C8
                iny                             ; 9C72 C8
                lda L032C_P1_JUNK_COLOR_3,x     ; 9C73 BD 2C 03
                ora #$80 ; small round          ; 9C76 09 80
                sta ($57),y                     ; 9C78 91 57
            end_if
        end_if
        ; reset other player's garbage to 0
        ldx L58_                                ; 9C7A A6 58
        lda LA545,x                             ; 9C7C BD 45 A5
        tax                                     ; 9C7F AA
        lda #$00                                ; 9C80 A9 00
        sta L0318_P1_GARBAGE,x                  ; 9C82 9D 18 03
        lda #$01                                ; 9C85 A9 01
        sta L97_GAME_STATE                      ; 9C87 85 97
    else                                        ; 9C89 4C 90 9C
        lda #$05                                ; 9C8C A9 05
        sta L97_GAME_STATE                      ; 9C8E 85 97
    end_if
    rts                                         ; 9C90 60
.endscope
.endscope

; ----------------------------------------------------------------------------
; R8157 jump table vector 8
L9C91_TOP_8:
.scope
.scope
    lda L0741_DEMO_MODE                         ; 9C91 AD 41 07
    bne L9CEA                                   ; 9C94 D0 54
    lda #$00                                    ; 9C96 A9 00
    sta L0324_P1_VIRUS                          ; 9C98 8D 24 03
    sta L03A4_P2_VIRUS                          ; 9C9B 8D A4 03
    loop
        loop
            jsr R8FA5_SAVE_STATS                ; 9C9E 20 A5 8F
            jsr R9075_LOAD_P1                   ; 9CA1 20 75 90
            jsr R9CFF_ADD_VIRUS                 ; 9CA4 20 FF 9C
            jsr R90AF_SAVE_P1                   ; 9CA7 20 AF 90
            lda L0727_NUM_PLAYERS               ; 9CAA AD 27 07
            cmp #$02                            ; 9CAD C9 02
            if_eq                               ; 9CAF D0 0E
                lda L0316_P1_LEVEL              ; 9CB1 AD 16 03
                cmp L0396_P2_LEVEL              ; 9CB4 CD 96 03
                if_ne                           ; 9CB7 F0 06
                    jsr R9092_LOAD_P2           ; 9CB9 20 92 90
                    jsr R9CFF_ADD_VIRUS         ; 9CBC 20 FF 9C
                end_if
            end_if
            jsr R90BC_SAVE_P2                   ; 9CBF 20 BC 90
            jsr R8FCA_RESTORE_STATS             ; 9CC2 20 CA 8F
            jsr RB654_NEXT_FRAME                ; 9CC5 20 54 B6
            lda L0328_P1_VIRUS_TO_ADD           ; 9CC8 AD 28 03
        while_ne                                ; 9CCB D0 D1
        lda L03A8_P2_VIRUS_TO_ADD               ; 9CCD AD A8 03
    while_ne                                    ; 9CD0 D0 CC
L9CD2:
    lda #$04                                    ; 9CD2 A9 04
    sta L58_                                    ; 9CD4 85 58
    lda #$0F                                    ; 9CD6 A9 0F
    sta L80_UPDATE_ROW                          ; 9CD8 85 80
    sta L0300_P1_UPDATE_ROW                     ; 9CDA 8D 00 03
    sta L0380_P2_UPDATE_ROW                     ; 9CDD 8D 80 03
    lda #$80                                    ; 9CE0 A9 80
    jsr R9701_SLEEP                             ; 9CE2 20 01 97
    ; enter top-level state 4
    lda #$04                                    ; 9CE5 A9 04
    sta L46_TOP_STATE                           ; 9CE7 85 46
    rts                                         ; 9CE9 60

L9CEA:
    ; copy $CF00-$CF7F to $0400-$047F
    ldx #$7F                                    ; 9CEA A2 7F
    loop
        lda LCF00,x                             ; 9CEC BD 00 CF
        sta L0400_P1_PLAYFIELD,x                ; 9CEF 9D 00 04
        dex                                     ; 9CF2 CA
        cpx #$FF                                ; 9CF3 E0 FF
    while_ne                                    ; 9CF5 D0 F5
    lda #$00                                    ; 9CF7 A9 00
    sta L0328_P1_VIRUS_TO_ADD                   ; 9CF9 8D 28 03
    jmp L9CD2                                   ; 9CFC 4C D2 9C
.endscope

; --------------------------------------
; Create a new virus and put it on the playfield.
; If both players have the same level, then put
; the virus on both playfields.
; Called by L9C91_TOP_8.
R9CFF_ADD_VIRUS:
.scope
    lda LA8_VIRUS_TO_ADD                        ; 9CFF A5 A8
    if_eq                                       ; 9D01 D0 03
        jmp L9E4B ; rts                         ; 9D03 4C 4B 9E
    end_if
    ; L47_TEMP = random number less than LA3DE,L96_LEVEL
    loop
        ldx #L17_LFSR_0                         ; 9D06 A2 17
        ldy #$02                                ; 9D08 A0 02
        jsr RB771_STEP_LFSR                     ; 9D0A 20 71 B7
        lda L17_LFSR_0                          ; 9D0D A5 17
        and #$0F                                ; 9D0F 29 0F
        sta L47_TEMP                            ; 9D11 85 47
        ldx L96_LEVEL                           ; 9D13 A6 96
        lda LA3DE,x ; 9 to 12                   ; 9D15 BD DE A3
        cmp L47_TEMP                            ; 9D18 C5 47
    while_cc                                    ; 9D1A 90 EA
    lda L47_TEMP                                ; 9D1C A5 47
    tax                                         ; 9D1E AA
    ; get row offset in playfield
    lda LA474,x                                 ; 9D1F BD 74 A4
    sta L47_TEMP                                ; 9D22 85 47
    ; Choose random 3-bit column
    lda L18_LFSR_1                              ; 9D24 A5 18
    and #$07                                    ; 9D26 29 07
    add L47_TEMP                                ; 9D28 18 65 47
    ; Store cell offset in L57_ and L49_TEMP
    sta L57_                                    ; 9D2B 85 57
    sta L49_TEMP                                ; 9D2D 85 49
    ; L48_TEMP = color of new virus (0,1,2)
    lda LA8_VIRUS_TO_ADD                        ; 9D2F A5 A8
    and #$03                                    ; 9D31 29 03
    sta L48_TEMP                                ; 9D33 85 48
    ; if 3, then choose random value 0-2
    cmp #$03                                    ; 9D35 C9 03
    if_eq                                       ; 9D37 D0 13
        ldx #L17_LFSR_0                         ; 9D39 A2 17
        ldy #$02                                ; 9D3B A0 02
        jsr RB771_STEP_LFSR                     ; 9D3D 20 71 B7
        lda L18_LFSR_1                          ; 9D40 A5 18
        and #$0F                                ; 9D42 29 0F
        tax                                     ; 9D44 AA
        lda LA7ED,x                             ; 9D45 BD ED A7
        and #$03                                ; 9D48 29 03
        sta L48_TEMP                            ; 9D4A 85 48
    end_if
    ; L48_TEMP is now 0, 1 or 2
    ; if cell is empty, then L9D61
    ; otherwise try next cell until
    ; we get to the top.
L9D4C:
    ldy #$00                                    ; 9D4C A0 00
    lda ($57),y                                 ; 9D4E B1 57
    cmp #$FF                                    ; 9D50 C9 FF
    beq L9D61                                   ; 9D52 F0 0D
L9D54: ; try next cell
    inc L49_TEMP                                ; 9D54 E6 49
    lda L49_TEMP                                ; 9D56 A5 49
    sta L57_                                    ; 9D58 85 57
    cmp #$80                                    ; 9D5A C9 80
    bcc L9D4C                                   ; 9D5C 90 EE
    jmp L9E4B ; rts                             ; 9D5E 4C 4B 9E

L9D61:
    ; copy virus color to L47_TEMP.
    lda L48_TEMP                                ; 9D61 A5 48
    sta L47_TEMP                                ; 9D63 85 47
    ldx L8B_SPEED                               ; 9D65 A6 8B
    lda LA390,x ; $10,$10,$10                   ; 9D67 BD 90 A3
    sta L4A_TEMP                                ; 9D6A 85 4A
    ldx L8B_SPEED                               ; 9D6C A6 8B
    lda LA393,x ; $02,$02,$02                   ; 9D6E BD 93 A3
    sta L4B_TEMP                                ; 9D71 85 4B
    lda #$00                                    ; 9D73 A9 00
    sta L4C_TEMP                                ; 9D75 85 4C

    ; Next we check the colors of the viruses
    ; of the four points two blocks away in
    ; all four directions, and OR the bitmasks
    ; together (storing the result in L4C_TEMP).
    lda #$00                                    ; 9D77 A9 00
    sta L57_                                    ; 9D79 85 57
    ; y = cell offset - 16 (2 rows below)
    lda L49_TEMP                                ; 9D7B A5 49
    sub L4A_TEMP                                ; 9D7D 38 E5 4A
    tay                                         ; 9D80 A8
    lda ($57),y                                 ; 9D81 B1 57
    and #$03                                    ; 9D83 29 03
    tax                                         ; 9D85 AA
    lda LA22D,x ; $01,$02,$04,$00               ; 9D86 BD 2D A2
    ; a = 1 << color of cell 2 rows below
    ora L4C_TEMP                                ; 9D89 05 4C
    sta L4C_TEMP                                ; 9D8B 85 4C
    lda #$00                                    ; 9D8D A9 00
    sta L57_                                    ; 9D8F 85 57
    ; y = cell offset + 16 (2 rows above)
    lda L49_TEMP                                ; 9D91 A5 49
    add L4A_TEMP                                ; 9D93 18 65 4A
    tay                                         ; 9D96 A8
    lda ($57),y                                 ; 9D97 B1 57
    and #$03                                    ; 9D99 29 03
    tax                                         ; 9D9B AA
    lda LA22D,x ; $01,$02,$04,$00               ; 9D9C BD 2D A2
    ora L4C_TEMP                                ; 9D9F 05 4C
    sta L4C_TEMP                                ; 9DA1 85 4C
    lda #$00                                    ; 9DA3 A9 00
    sta L57_                                    ; 9DA5 85 57
    ; test whether column >= 2
    lda L49_TEMP                                ; 9DA7 A5 49
    and #$07                                    ; 9DA9 29 07
    cmp #$02                                    ; 9DAB C9 02
    if_cs                                       ; 9DAD 90 12
        ; y = cell offset - 2 (2 cols left)
        lda L49_TEMP                            ; 9DAF A5 49
        sub L4B_TEMP                            ; 9DB1 38 E5 4B
        tay                                     ; 9DB4 A8
        lda ($57),y                             ; 9DB5 B1 57
        and #$03                                ; 9DB7 29 03
        tax                                     ; 9DB9 AA
        lda LA22D,x ; $01,$02,$04,$00           ; 9DBA BD 2D A2
        ora L4C_TEMP                            ; 9DBD 05 4C
        sta L4C_TEMP                            ; 9DBF 85 4C
    end_if
    lda #$00                                    ; 9DC1 A9 00
    sta L57_                                    ; 9DC3 85 57
    ; test whether column < 6
    lda L49_TEMP                                ; 9DC5 A5 49
    and #$07                                    ; 9DC7 29 07
    cmp #$06                                    ; 9DC9 C9 06
    if_cc                                       ; 9DCB B0 12
        ; y = cell offset + 2 (2 cols right)
        lda L49_TEMP                            ; 9DCD A5 49
        add L4B_TEMP                            ; 9DCF 18 65 4B
        tay                                     ; 9DD2 A8
        lda ($57),y                             ; 9DD3 B1 57
        and #$03                                ; 9DD5 29 03
        tax                                     ; 9DD7 AA
        lda LA22D,x ; $01,$02,$04,$00           ; 9DD8 BD 2D A2
        ora L4C_TEMP                            ; 9DDB 05 4C
        sta L4C_TEMP                            ; 9DDD 85 4C
    end_if

    loop
        ; If all 3 colors are present in the
        ; four neighboring cells, then start
        ; over with the next available cell.
        lda L4C_TEMP                            ; 9DDF A5 4C
        cmp #$07                                ; 9DE1 C9 07
        if_eq                                   ; 9DE3 D0 03
            jmp L9D54                           ; 9DE5 4C 54 9D
        end_if
        ; choose a new color not present in
        ; the four neighboring cells
        lda #$00                                ; 9DE8 A9 00
        sta L51_TEMP                            ; 9DEA 85 51
        ldx L48_TEMP                            ; 9DEC A6 48
        lda LA22D,x ; $01,$02,$04,$00           ; 9DEE BD 2D A2
        and L4C_TEMP                            ; 9DF1 25 4C
        beq break                               ; 9DF3 F0 0D
        dec L48_TEMP                            ; 9DF5 C6 48
        lda L48_TEMP                            ; 9DF7 A5 48
        bpl continue                            ; 9DF9 10 E4
        lda #$02                                ; 9DFB A9 02
        sta L48_TEMP                            ; 9DFD 85 48
    forever                                     ; 9DFF 4C DF 9D
    ; fill cell with #$D0+color
    lda L49_TEMP                                ; 9E02 A5 49
    sta L57_                                    ; 9E04 85 57
    ldy #$00                                    ; 9E06 A0 00
    lda L48_TEMP                                ; 9E08 A5 48
    ora #$D0 ; virus                            ; 9E0A 09 D0
    sta ($57),y                                 ; 9E0C 91 57
    ; increment virus color counts
    and #$07                                    ; 9E0E 29 07
    tax                                         ; 9E10 AA
    lda L72_V1_COUNT,x                          ; 9E11 B5 72
    add #$01                                    ; 9E13 18 69 01
    sta L72_V1_COUNT,x                          ; 9E16 95 72
    lda L0316_P1_LEVEL                          ; 9E18 AD 16 03
    cmp L0396_P2_LEVEL                          ; 9E1B CD 96 03
    if_eq                                       ; 9E1E D0 09
        lda L48_TEMP                            ; 9E20 A5 48
        ora #$D0                                ; 9E22 09 D0
        ldy L49_TEMP                            ; 9E24 A4 49
        sta L0500_P2_PLAYFIELD,y                ; 9E26 99 00 05
    end_if
    ; increment virus count
    inc LA4_VIRUS_BCD                           ; 9E29 E6 A4
    lda LA4_VIRUS_BCD                           ; 9E2B A5 A4
    and #$0F                                    ; 9E2D 29 0F
    cmp #$0A                                    ; 9E2F C9 0A
    if_eq                                       ; 9E31 D0 07
        lda LA4_VIRUS_BCD                       ; 9E33 A5 A4
        add #$06                                ; 9E35 18 69 06
        sta LA4_VIRUS_BCD                       ; 9E38 85 A4
    end_if
    ; put row number in L80_UPDATE_ROW.
    lda L57_                                    ; 9E3A A5 57
    lsr a                                       ; 9E3C 4A
    lsr a                                       ; 9E3D 4A
    lsr a                                       ; 9E3E 4A
    sta L80_UPDATE_ROW                          ; 9E3F 85 80
    lda LA4_VIRUS_BCD                           ; 9E41 A5 A4
    ; set bit 4 (virus#)
    lda #$10                                    ; 9E43 A9 10
    ora L52_REDRAW_FLAGS                        ; 9E45 05 52
    sta L52_REDRAW_FLAGS                        ; 9E47 85 52
    dec LA8_VIRUS_TO_ADD                        ; 9E49 C6 A8
L9E4B:
    rts                                         ; 9E4B 60
.endscope
.endscope

; ----------------------------------------------------------------------------
; Display cutscene if there is one, and start the next level.
R9E4C_NEXT_LEVEL:
.scope
    lda L96_LEVEL                               ; 9E4C A5 96
    cmp #$15                                    ; 9E4E C9 15
    beq cutscene                                ; 9E50 F0 15
    if_cs                                       ; 9E52 90 03
        jmp next_level                          ; 9E54 4C DA 9E
    end_if
    lda L8B_SPEED                               ; 9E57 A5 8B
    asl a                                       ; 9E59 0A
    asl a                                       ; 9E5A 0A
    asl a                                       ; 9E5B 0A
    asl a                                       ; 9E5C 0A
    asl a                                       ; 9E5D 0A
    add L96_LEVEL                               ; 9E5E 18 65 96
    tax                                         ; 9E61 AA
    lda L9FF8,x                                 ; 9E62 BD F8 9F
    beq next_level                              ; 9E65 F0 73
cutscene:
    lda #$07                                    ; 9E67 A9 07
    jsr RB8E0 ; Set mapper CHR bank 0.          ; 9E69 20 E0 B8
    lda #$06                                    ; 9E6C A9 06
    jsr RB8F4 ; Set mapper CHR bank 1.          ; 9E6E 20 F4 B8
    jsr RB67C_DISABLE_VIDEO                     ; 9E71 20 7C B6
    jsr RB6A2_DISABLE_NMI                       ; 9E74 20 A2 B6
    ldx L8B_SPEED                               ; 9E77 A6 8B
    lda LA0DE,x                                 ; 9E79 BD DE A0
    sta L66_PALETTE                             ; 9E7C 85 66
    jsr RB6C2_PRINT                             ; 9E7E 20 C2 B6
    .word LCA5A ; Congratulations screen        ; 9E81 5A CA
    lda #$00                                    ; 9E83 A9 00
    sta L5D_SHOW_LEVEL                          ; 9E85 85 5D
    sta L5E_ENDING_STATE                        ; 9E87 85 5E
    lda #$FF                                    ; 9E89 A9 FF
    sta L0300_P1_UPDATE_ROW                     ; 9E8B 8D 00 03
    sta L0380_P2_UPDATE_ROW                     ; 9E8E 8D 80 03
    jsr RB695_ENABLE_NMI                        ; 9E91 20 95 B6
    jsr RB689_ENABLE_VIDEO                      ; 9E94 20 89 B6
    ldx L8B_SPEED                               ; 9E97 A6 8B
    lda LA095,x ; $08,$01,$01                   ; 9E99 BD 95 A0
    sta L06F5_                                  ; 9E9C 8D F5 06
    lda #$01                                    ; 9E9F A9 01
    sta L7F_CONGRATS_IDX                        ; 9EA1 85 7F
    lda #$FF                                    ; 9EA3 A9 FF
    sta L51_TEMP                                ; 9EA5 85 51
    jsr R9F09 ; Initialize L0760_CLOUD_DATA     ; 9EA7 20 09 9F
    jsr RB352 ; Initialize L0580_               ; 9EAA 20 52 B3
    lda #$70                                    ; 9EAD A9 70
    sta L38_V1_X                                ; 9EAF 85 38
    lda #$82                                    ; 9EB1 A9 82
    sta L39_V1_Y                                ; 9EB3 85 39
    lda #$5E                                    ; 9EB5 A9 5E
    sta L4F_UFO_X                               ; 9EB7 85 4F
    lda #$F8                                    ; 9EB9 A9 F8
    sta L50_UFO_Y                               ; 9EBB 85 50
    lda #$00                                    ; 9EBD A9 00
    sta L3A_V2_X                                ; 9EBF 85 3A
    sta L3D_V3_Y                                ; 9EC1 85 3D
    loop
        jsr R9F18                               ; 9EC3 20 18 9F
        jsr RB42F_MAYBE_ENDING                  ; 9EC6 20 2F B4
        jsr R9F70 ; tiny animals sprite         ; 9EC9 20 70 9F
        jsr RB5B8 ; cutscene sprites            ; 9ECC 20 B8 B5
        jsr RB654_NEXT_FRAME                    ; 9ECF 20 54 B6
        dec L51_TEMP                            ; 9ED2 C6 51
        lda LF5_P1_INPUT_NEW                    ; 9ED4 A5 F5
        cmp #$10                                ; 9ED6 C9 10
    while_ne                                    ; 9ED8 D0 E9
next_level:
    lda #$00                                    ; 9EDA A9 00
    sta L7F_CONGRATS_IDX                        ; 9EDC 85 7F
    lda #$FF                                    ; 9EDE A9 FF
    ldx #$04                                    ; 9EE0 A2 04
    ldy #$05                                    ; 9EE2 A0 05
    jsr RB894_FILL_PAGES ; fill pages 4-5 (FF)  ; 9EE4 20 94 B8
    lda #$01                                    ; 9EE7 A9 01
    sta L5D_SHOW_LEVEL                          ; 9EE9 85 5D
    lda #$02                                    ; 9EEB A9 02
    jsr RB8E0 ; Set mapper CHR bank 0.          ; 9EED 20 E0 B8
    lda #$03                                    ; 9EF0 A9 03
    jsr RB8F4 ; Set mapper CHR bank 1.          ; 9EF2 20 F4 B8
    jsr RB67C_DISABLE_VIDEO                     ; 9EF5 20 7C B6
    jsr RB6A2_DISABLE_NMI                       ; 9EF8 20 A2 B6
    jsr R82D1_PRINT_LEVEL                       ; 9EFB 20 D1 82
    ; set bits 1,2,3,4,7
    ; (level, score, top, virus, victory)
    lda #$9E                                    ; 9EFE A9 9E
    sta L52_REDRAW_FLAGS                        ; 9F00 85 52
    jsr RB695_ENABLE_NMI                        ; 9F02 20 95 B6
    jsr RB689_ENABLE_VIDEO                      ; 9F05 20 89 B6
    rts                                         ; 9F08 60
.endscope

; ----------------------------------------------------------------------------
; Copy null-terminated 9-byte string from LA0E5 to L0760_CLOUD_DATA.
; $01,$D0,$36,$02,$30,$74,$03,$D8,$AB,$00
R9F09:
    ldx #$00                                    ; 9F09 A2 00
    loop
        lda LA0E5,x                             ; 9F0B BD E5 A0
        sta L0760_CLOUD_DATA,x                  ; 9F0E 9D 60 07
        beq break                               ; 9F11 F0 04
        inx                                     ; 9F13 E8
    forever                                     ; 9F14 4C 0B 9F
    rts                                         ; 9F17 60

; ----------------------------------------------------------------------------
; 9F18 and 9F28 are both entry points
R9F18:
    lda L8B_SPEED                               ; 9F18 A5 8B
    asl a                                       ; 9F1A 0A
    asl a                                       ; 9F1B 0A
    asl a                                       ; 9F1C 0A
    asl a                                       ; 9F1D 0A
    asl a                                       ; 9F1E 0A
    add L96_LEVEL                               ; 9F1F 18 65 96
    tax                                         ; 9F22 AA
    lda L9FF8,x                                 ; 9F23 BD F8 9F
    beq L9F6F ; rts                             ; 9F26 F0 47

; Draw cloud sprites for cutscenes.
R9F28_CLOUD_SPRITES:
    lda #$00                                    ; 9F28 A9 00
    sta L49_TEMP                                ; 9F2A 85 49
    loop
        lda L49_TEMP                            ; 9F2C A5 49
        tax                                     ; 9F2E AA
        lda L0760_CLOUD_DATA,x                  ; 9F2F BD 60 07
        beq break                               ; 9F32 F0 3B
        sta L4A_TEMP                            ; 9F34 85 4A
        tax                                     ; 9F36 AA
        lda LA0EF,x                             ; 9F37 BD EF A0
        sta L4B_TEMP                            ; 9F3A 85 4B
        lda L43_CLOCK                           ; 9F3C A5 43
        and L4B_TEMP                            ; 9F3E 25 4B
        if_eq                                   ; 9F40 D0 0C
            lda L49_TEMP                        ; 9F42 A5 49
            tax                                 ; 9F44 AA
            lda L0760_CLOUD_DATA+1,x            ; 9F45 BD 61 07
            sub #$01                            ; 9F48 38 E9 01
            sta L0760_CLOUD_DATA+1,x            ; 9F4B 9D 61 07
        end_if
        lda L4A_TEMP                            ; 9F4E A5 4A
        tax                                     ; 9F50 AA
        lda LA0E1,x ; cloud sprites             ; 9F51 BD E1 A0
        sta L53_SPRITE_NUM                      ; 9F54 85 53
        lda L49_TEMP                            ; 9F56 A5 49
        tax                                     ; 9F58 AA
        lda L0760_CLOUD_DATA+1,x                ; 9F59 BD 61 07
        sta L44_SPRITE_X                        ; 9F5C 85 44
        lda L0760_CLOUD_DATA+2,x                ; 9F5E BD 62 07
        sta L45_SPRITE_Y                        ; 9F61 85 45
        jsr R88F6_SPRITE                        ; 9F63 20 F6 88
        inc L49_TEMP                            ; 9F66 E6 49
        inc L49_TEMP                            ; 9F68 E6 49
        inc L49_TEMP                            ; 9F6A E6 49
    forever                                     ; 9F6C 4C 2C 9F
L9F6F:
    rts                                         ; 9F6F 60

; ----------------------------------------------------------------------------
; Load tiny animal sprite $20 or $22 depending on $43 bit 3.
; Called once in R9E4C_NEXT_LEVEL.
R9F70:
    lda L38_V1_X                                ; 9F70 A5 38
    sta L44_SPRITE_X                            ; 9F72 85 44
    lda L39_V1_Y                                ; 9F74 A5 39
    sta L45_SPRITE_Y                            ; 9F76 85 45
    lda L43_CLOCK                               ; 9F78 A5 43
    and #$08                                    ; 9F7A 29 08
    lsr a                                       ; 9F7C 4A
    lsr a                                       ; 9F7D 4A
    add #$20                                    ; 9F7E 18 69 20
    sta L53_SPRITE_NUM                          ; 9F81 85 53
    jsr R88F6_SPRITE                            ; 9F83 20 F6 88
    rts                                         ; 9F86 60

; ----------------------------------------------------------------------------
; R9BB9_GAME_STATE_MACHINE routine 6.
; Advance the pill-toss animation.
L9F87_GAME_STATE_6:
    begin
        lda L0727_NUM_PLAYERS                   ; 9F87 AD 27 07
        cmp #$01                                ; 9F8A C9 01
        if_ne                                   ; 9F8C F0 03
            jmp new_pill                        ; 9F8E 4C CD 9F
        end_if
        lda L8B_SPEED                           ; 9F91 A5 8B
        cmp #$02                                ; 9F93 C9 02
        if_ne                                   ; 9F95 F0 0A
            cmp #$01                            ; 9F97 C9 01
            if_ne                               ; 9F99 F0 06
                lda L43_CLOCK                   ; 9F9B A5 43
                and #$01                        ; 9F9D 29 01
                beq break ; rts                 ; 9F9F F0 4C
            end_if
        end_if

        loop
            inc L7D_TOSS_TIMER                  ; 9FA1 E6 7D
            ldx L7D_TOSS_TIMER                  ; 9FA3 A6 7D
            lda LA401,x                         ; 9FA5 BD 01 A4
            cmp #$FF                            ; 9FA8 C9 FF
            beq new_pill                        ; 9FAA F0 21

            and #$F0                            ; 9FAC 29 F0
            cmp #$F0                            ; 9FAE C9 F0
            bne break                           ; 9FB0 D0 0A
            lda LA401,x                         ; 9FB2 BD 01 A4
            and #$03                            ; 9FB5 29 03
            sta L7E_MARIO_ARM                   ; 9FB7 85 7E
        forever                                 ; 9FB9 4C A1 9F

        lda L7D_TOSS_TIMER                      ; 9FBC A5 7D
        and #$01                                ; 9FBE 29 01
        bne break ; rts                         ; 9FC0 D0 2B
        dec LA2_NEXT_DIR                        ; 9FC2 C6 A2
        lda LA2_NEXT_DIR                        ; 9FC4 A5 A2
        and #$03                                ; 9FC6 29 03
        sta LA2_NEXT_DIR                        ; 9FC8 85 A2
        jmp break ; rts                         ; 9FCA 4C ED 9F

    new_pill:
        jsr R8E8D_NEW_PILL                      ; 9FCD 20 8D 8E
        lda #$00                                ; 9FD0 A9 00
        sta LA2_NEXT_DIR                        ; 9FD2 85 A2
        lda #$00                                ; 9FD4 A9 00
        sta L7D_TOSS_TIMER                      ; 9FD6 85 7D
        lda #$03                                ; 9FD8 A9 03
        sta L97_GAME_STATE                      ; 9FDA 85 97
        jsr R90D3_COLLISION                     ; 9FDC 20 D3 90
        if_ne                                   ; 9FDF F0 0C
            ; pill won't fit, player loses
            lda #$05                            ; 9FE1 A9 05
            sta L06F5_                          ; 9FE3 8D F5 06
            jsr R8F52_PLACE_PILL                ; 9FE6 20 52 8F
            lda #$01                            ; 9FE9 A9 01
            sta L89_LOST                        ; 9FEB 85 89
        end_if
    end
    rts                                         ; 9FED 60

; ----------------------------------------------------------------------------
; 10-byte lookup table, used by L8036
; Ascii string "!DR.MARIO!"
L9FEE:
    .byte '!','D','R','.','M','A','R','I','O','!'

; ----------------------------------------------------------------------------
; 96-byte lookup table, used by RB5B8 and others
; Indexed by L8B_SPEED * 32 + L96_LEVEL.
; Cutscene-related.
L9FF8:
    .byte $00,$00,$00,$00,$00,$00,$00,$00   ; 9FF8 00 00 00 00 00 00 00 00
    .byte $00,$00,$00,$00,$00,$00,$00,$00   ; A000 00 00 00 00 00 00 00 00
    .byte $00,$00,$00,$00,$00,$00,$00,$00   ; A008 00 00 00 00 00 00 00 00
    .byte $00,$00,$00,$00,$00,$00,$00,$00   ; A010 00 00 00 00 00 00 00 00

    .byte $00,$00,$00,$00,$00,$00,$07,$00   ; A018 00 00 00 00 00 00 07 00
    .byte $00,$00,$00,$05,$00,$00,$00,$00   ; A020 00 00 00 05 00 00 00 00
    .byte $06,$00,$00,$00,$00,$08,$00,$00   ; A028 06 00 00 00 00 08 00 00
    .byte $00,$00,$00,$00,$00,$00,$00,$00   ; A030 00 00 00 00 00 00 00 00

    .byte $00,$00,$00,$00,$00,$00,$02,$00   ; A038 00 00 00 00 00 00 02 00
    .byte $00,$00,$00,$01,$00,$00,$00,$00   ; A040 00 00 00 01 00 00 00 00
    .byte $04,$00,$00,$00,$00,$00,$00,$00   ; A048 04 00 00 00 00 00 00 00
    .byte $00,$00,$00,$00,$00,$00,$00,$00   ; A050 00 00 00 00 00 00 00 00
; ----------------------------------------------------------------------------
; lookup table, used by RB5B8
LA058:
    .byte $00,$01,$0F,$03,$07,$07,$03,$07,$07
; ----------------------------------------------------------------------------
; Table of sprite number offsets, used by RB5B8
; These numbers are added to either 0 or 1 to make a sprite number.
LA061:
    .byte $00,$38,$3A,$3C,$3E,$40,$42,$44,$46

; ----------------------------------------------------------------------------
; lookup table, used by RB5B8
; Indexed by values from L9FF8.
LA06A:
    .byte $00,$F0,$00,$F0,$00,$F0,$F0,$00,$00

; ----------------------------------------------------------------------------
; lookup table, used by RB5B8
LA073:
    .byte $00,$00,$0F,$00,$01,$03,$00,$00,$03

; ----------------------------------------------------------------------------
; lookup table, used in RB5B8
LA07C:
    .byte $00,$FF,$01,$FF,$01,$FF,$FE,$01,$01

; ----------------------------------------------------------------------------
; lookup table, used in RB43F_ENDING, copied to L66_PALETTE.
; Lightning flashes for final cutscene.
LA085:
    .byte $85,$85,$85,$85,$85,$85,$8A,$85
    .byte $85,$85,$8A,$85,$85,$85,$85,$85

; ----------------------------------------------------------------------------
; lookup table, used in R9E4C_NEXT_LEVEL
LA095:
    .byte $08,$01,$01

; ----------------------------------------------------------------------------
; lookup table, used in R8661 and L86CD
; PPU addresses in page $21.
; $2100 = row 8
; $2128-$2137 = row 9, col 8-23
; $2188-$2192 = row 12, col 8-18
; $21C8-$21D4 = row 14, col 8-20
; Indexed by L7F_CONGRATS_IDX.
LA098:
    .byte $00
    .byte $28,$29,$2A,$2B,$2C,$2D,$2E,$2F,$30,$31,$32,$33,$34,$35,$36,$37
    .byte $88,$89,$8A,$8B,$8C
    .byte $8E,$8F,$90,$91,$92
    .byte $95
    .byte $C8,$C9,$CA,$CB,$CC
    .byte $D4,$D3

; ----------------------------------------------------------------------------
; Bytes for PPU nametable, used in R8661.
LA0BB:
    .byte $00
    ; "CONGRATULATIONS!"
    .byte $0C,$18,$17,$10,$1B,$0A,$1D,$1E,$15,$0A,$1D,$12,$18,$17,$1C,$24
    ; "VIRUS"
    .byte $1F,$12,$1B,$1E,$1C
    ; "LEVEL"
    .byte $15,$0E,$1F,$0E,$15
    .byte $01 ; code for inserting level number
    ; "SPEED"
    .byte $1C,$19,$0E,$0E,$0D
    .byte $00 ; code for inserting speed (LOW/MED/HI)
    .byte $FF ; terminator

; ----------------------------------------------------------------------------
; lookup table, used in R9E4C_NEXT_LEVEL, copied to L66_PALETTE.
LA0DE:
    .byte $86,$84,$84
; ----------------------------------------------------------------------------
; Table of sprite numbers, used in R9F18/R9F28_CLOUD_SPRITES.
; 1 = large cloud, 2 = medium cloud, 3 = small cloud.
LA0E1:
    .byte $00,$16,$17,$18

; ----------------------------------------------------------------------------
; 9-byte null-terminated string, used in R9F09, copied to L0760_CLOUD_DATA.
; Each 3 bytes is sprite index number (for LA0E1), X coordinate, Y coordinate.
LA0E5:
    .byte $01,$D0,$36
    .byte $02,$30,$74
    .byte $03,$D8,$AB
    .byte $00

; ----------------------------------------------------------------------------
; lookup table, used in R9F18/R9F28_CLOUD_SPRITES
LA0EF:
    .byte $00,$03,$07,$0F,$01,$16,$01,$17
    .byte $18,$19,$18,$1A,$1B,$1C,$1B,$20

; ----------------------------------------------------------------------------
; Table of 2 sprite numbers, used in L8C28, indexed by $43 bit 2.
LA0FF:
    .byte $29,$14
; Table of 2 sprite numbers, used in L8C28, indexed by $43 bit 3.
LA101:
    .byte $23,$13
; Table of 2 sprite numbers, used in L8C28, indexed by $43 bit 2.
LA103:
    .byte $26,$15

; ----------------------------------------------------------------------------
; Table, indexed by L0727_NUM_PLAYERS, copied to L45_SPRITE_Y.
LA105:
    .byte $00,$C3,$D3                       ; A105 00 C3 D3

; ----------------------------------------------------------------------------
; Table used in R886C, indexed by L61_, copied to L44_SPRITE_X.
LA108:
    .byte $00,$34,$B4                       ; A108 00 34 B4
; ----------------------------------------------------------------------------
; Table used in R886C, indexed by L55_ROUND_WINNER, copied to L44_SPRITE_X.
LA10B:
    .byte $00,$34,$B4                       ; A10B 00 34 B4
; ----------------------------------------------------------------------------
; Table used in R886C, indexed by $43 bit 2, copied to L53_SPRITE_NUM.
LA10E:
    .byte $06,$11                           ; A10E 06 11
; ----------------------------------------------------------------------------
; unused
    .byte $00,$40,$C0                       ; A110 00 40 C0

; ----------------------------------------------------------------------------
; Table of sprite numbers, used in L9953_TOP_1, indexed by L0731_MUSIC_CHOICE.
; 7x3 or 5x3 box sprite (for outlining music choice)
LA113:
    .byte $04,$04,$05,$00                   ; A113 04 04 05 00
; ----------------------------------------------------------------------------
; Table of sprite X-coordinates, used in L9953_TOP_1, indexed by L0731_MUSIC_CHOICE.
LA117:
    .byte $38,$70,$A7                       ; A117 38 70 A7

; ----------------------------------------------------------------------------
; lookup table, used in R89D4, indexed by L75_V1_STATE
LA11A:
    .byte $00,$01,$01,$01,$00               ; A11A 00 01 01 01 00

; ----------------------------------------------------------------------------
; Table of 128 virus X-coordinates, used in R89D4, indexed by L3E_VIRUS_CYCLE.
; Viruses 2 and 3 use offsets of 21 and 42.
LA11F:
    .byte $20,$22,$24,$25,$27,$28,$2A,$2B,$2C,$2D,$2E,$2F,$2F,$2F,$30,$30
    .byte $30,$30,$30,$2F,$2F,$2F,$2E,$2D,$2C,$2B,$2A,$28,$27,$25,$24,$22
    .byte $20,$1E,$1C,$1B,$19,$18,$16,$15,$14,$13,$12,$11,$11,$11,$10,$10
    .byte $10,$10,$10,$11,$11,$11,$12,$13,$14,$15,$16,$18,$19,$1B,$1C,$1E
    .byte $20,$22,$24,$25,$27,$28,$2A,$2B,$2C,$2D,$2E,$2F,$2F,$2F,$30,$30
    .byte $30,$30,$30,$2F,$2F,$2F,$2E,$2D,$2C,$2B,$2A,$28,$27,$25,$24,$22
    .byte $20,$1E,$1C,$1B,$19,$18,$16,$15,$14,$13,$12,$11,$11,$11,$10,$10
    .byte $10,$10,$10,$11,$11,$11,$12,$13,$14,$15,$16,$18,$19,$1B,$1C,$1E
; ----------------------------------------------------------------------------
; Table of 128 virus Y-coordinates, used in R89D4, indexed by L3E_VIRUS_CYCLE.
; Viruses 2 and 3 use offsets of 21 and 42.
LA19F:
    .byte $AF,$AF,$AE,$AE,$AD,$AC,$AB,$AA,$A8,$A7,$A5,$A3,$A2,$A0,$9E,$9D
    .byte $9B,$99,$98,$96,$94,$93,$91,$8F,$8E,$8C,$8B,$8A,$89,$88,$88,$87
    .byte $87,$87,$88,$88,$89,$8A,$8B,$8C,$8E,$8F,$91,$93,$94,$96,$98,$99
    .byte $9B,$9D,$9E,$A0,$A2,$A3,$A5,$A7,$A8,$AA,$AB,$AC,$AD,$AE,$AE,$AF
    .byte $AF,$AF,$AE,$AE,$AD,$AC,$AB,$AA,$A8,$A7,$A5,$A3,$A2,$A0,$9E,$9D
    .byte $9B,$99,$98,$96,$94,$93,$91,$8F,$8E,$8C,$8B,$8A,$89,$88,$88,$87
    .byte $87,$87,$88,$88,$89,$8A,$8B,$8C,$8E,$8F,$91,$93,$94,$96,$98,$99
    .byte $9B,$9D,$9E,$A0,$A2,$A3,$A5,$A7,$A8,$AA,$AB,$AC,$AD,$AE,$AE,$AF

; ----------------------------------------------------------------------------
; 11-byte table, used by R8FF4_INCREMENT_SCORE, indexed by LAD_VIRUS_COMBO.
; Score multiplier.
LA21F:
    .byte $01,$02,$04,$08,$10,$20,$20,$20,$20,$20,$20

; ----------------------------------------------------------------------------
; Color palette lookup table, used by R8617, indexed by L8B_SPEED.
; 0A = dark green
; 03 = dark purple
; 00 = dark gray
LA22A:
    .byte $0A,$03,$00                       ; A22A 0A 03 00
; ----------------------------------------------------------------------------
; lookup table, used by R9CFF_ADD_VIRUS
LA22D:
    .byte $01,$02,$04,$00                   ; A22D 01 02 04 00

; ----------------------------------------------------------------------------
; 12-byte table of virus y-coordinate offsets, indexed by L78_V{1,2,3}_TIMER.
; Falling animation for viruses.
LA231:
    .byte $FC,$F8,$F4,$F2,$F1,$F0,$F1,$F2,$F4,$F8,$FC,$00
; ----------------------------------------------------------------------------
; lookup table, used by R82D1_PRINT_LEVEL (indexed by L030B_P1_SPEED * 4)
; and L816E_TOP_2 (also by L038B_P2_SPEED * 4)
LA23D:
    .byte $15,$18,$20,$00  ; "LOW"
    .byte $16,$0E,$0D,$00  ; "MED"
    .byte $FE,$11,$12,$00  ; " HI"
; ----------------------------------------------------------------------------
; lookup table, used by R8693 (indexed by $8b * 4)
; duplicate of LA23D
LA249:
    .byte $15,$18,$20,$00  ; "LOW"
    .byte $16,$0E,$0D,$00  ; "MED"
    .byte $FF,$11,$12,$00  ; " HI"
; ----------------------------------------------------------------------------
; Table of sprite numbers, used by R89D4, indexed by L7B_VIRUS_MARCH.
; Red virus marching animation
LA255:
    .byte $23,$24,$23,$25
; ----------------------------------------------------------------------------
; Table of sprite numbers, used by R89D4 and R8BE5, indexed by L7B_VIRUS_MARCH.
; Blue virus marching animation
LA259:
    .byte $26,$27,$26,$28
; ----------------------------------------------------------------------------
; Table of sprite numbers, used by R89D4, indexed by L7B_VIRUS_MARCH.
; Yellow virus marching animation
LA25D:
    .byte $29,$2A,$29,$2B
; ----------------------------------------------------------------------------
; lookup table, used by ?, indexed by L0731_MUSIC_CHOICE.
; copied to $06F5.
LA261:
    .byte $09,$0A,$09
; ----------------------------------------------------------------------------
; lookup table, used by
LA264:
    .byte $04,$02,$03
; ----------------------------------------------------------------------------
; lookup table, used by L981C_TOP_0
LA267:
    .byte $00,$A7,$B7
; ----------------------------------------------------------------------------
; Argument to RB6C2, 1-player settings screen
LA26A:
    .byte $21,$88                           ; PPU address $2188 (row 12, col 8)
    .byte $02                               ; 2 bytes non-repeated
    .byte $FF,$FF
    .byte $21,$96                           ; PPU address $2196 (row 12, col 22)
    .byte $04                               ; 4 bytes non-repeated
    .byte $FF,$FF,$FF,$FF
    .byte $21,$B6                           ; PPU address $21B6 (row 13, col 22)
    .byte $04                               ; 4 bytes non-repeated
    .byte $FF,$FF,$FF,$FF
    .byte $21,$D6                           ; PPU address $21D6 (row 14, col 22)
    .byte $04                               ; 4 bytes non-repeated
    .byte $FF,$FF,$FF,$FF
    .byte $22,$28                           ; PPU address $2228 (row 17, col 8)
    .byte $02                               ; 2 bytes non-repeated
    .byte $F3,$F4
    .byte $22,$48                           ; PPU address $2248 (row 18, col 8)
    .byte $02                               ; 2 bytes non-repeated
    .byte $F5,$F6
    .byte $22,$68                           ; PPU address $2268 (row 19, col 8)
    .byte $02                               ; 2 bytes non-repeated
    .byte $FF,$FF
    .byte $FF                               ; terminator byte
; ----------------------------------------------------------------------------
; Table of sprite X-coordinates, used in R9B42, indexed by L96_LEVEL.
; X-coordinates for small pointer on options screen.
LA294:
    .byte $57,$5B,$5F,$63,$67,$6B,$6F,$73
    .byte $77,$7B,$7F,$83,$87,$8B,$8F,$93
    .byte $97,$9B,$9F,$A3,$A7
; ----------------------------------------------------------------------------
; Table of sprite Y-coordinates, used in R9B42, indexed by $58.
LA2A9:
    .byte $00,$00,$00,$00,$53,$62
; ----------------------------------------------------------------------------
; Table of sprite X-coordinates, used in R9B42, indexed by L8B_SPEED.
LA2AF:
    .byte $58,$80,$A4
; ----------------------------------------------------------------------------
; Table of sprite Y-coordinates, used in R9B42, indexed by $58.
LA2B2:
    .byte $00,$00,$00,$00,$87,$96

; ----------------------------------------------------------------------------
; Argument to RB6C2_PRINT
; Screen attribute data
LA2B8:
    .byte $23,$C0,$20
    .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .byte $00,$00,$00,$00,$00,$88,$22,$00,$00,$50,$50,$50,$10,$88,$22,$00
    .byte $23,$E0,$20
    .byte $00,$05,$05,$05,$01,$00,$00,$00,$00,$55,$55,$55,$11,$00,$00,$00
    .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .byte $FF
; ----------------------------------------------------------------------------
; Argument to RB6C2_PRINT
; Screen attribute data
LA2FF:
    .byte $23,$C0,$20
    .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$50,$50,$50,$10,$00,$00,$00
    .byte $00,$05,$05,$05,$01,$88,$22,$00,$00,$00,$00,$00,$00,$88,$22,$00
    .byte $23,$E0,$20
    .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$11,$00,$00,$00
    .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .byte $FF
; ----------------------------------------------------------------------------
; Argument to RB6C2_PRINT
; Screen attribute data
LA346:
    .byte $23,$C0,$20
    .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$50,$50,$50,$10,$00,$00,$00
    .byte $00,$05,$05,$05,$01,$88,$22,$00,$00,$50,$50,$50,$10,$88,$22,$00
    .byte $23,$E0,$20
    .byte $00,$05,$05,$05,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .byte $FF

; ----------------------------------------------------------------------------
; lookup table used in R8D70_DROP_PILL, indexed by L8B_SPEED
LA38D:
    .byte $0F,$19,$1F                       ; A38D 0F 19 1F
; ----------------------------------------------------------------------------
; lookup table used in R9CFF_ADD_VIRUS
LA390:
    .byte $10,$10,$10                       ; A390 10 10 10
; ----------------------------------------------------------------------------
; lookup table used in R9CFF_ADD_VIRUS
LA393:
    .byte $02,$02,$02                       ; A393 02 02 02

; ----------------------------------------------------------------------------
; Table of PPU addresses used in R8393_PRINT_CHANGES (indexed by L031E_P1_WINS)
LA396:
    .dbyt $220E ; row 16, col 14
    .dbyt $21CE ; row 14, col 14
    .dbyt $218E ; row 12, col 14

; ----------------------------------------------------------------------------
; Table of PPU addresses used in R8393_PRINT_CHANGES (indexed by L039E_P2_WINS)
LA39C:
    .dbyt $2210 ; row 16, col 16
    .dbyt $21D0 ; row 14, col 16
    .dbyt $2190 ; row 12, col 16
; ----------------------------------------------------------------------------
; unused
    .byte $00,$04,$08,$12,$16,$20,$24,$28,$32,$36
    .byte $40,$44,$48,$52,$56,$60,$64,$68,$72,$76,$80,$84,$88,$92,$96,$30
    .byte $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$28,$28
    .byte $20,$20,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18
    .byte $18,$18

; ----------------------------------------------------------------------------
; 35-byte lookup table used in R9CFF_ADD_VIRUS, indexed by L96_LEVEL.
LA3DE:
    .byte $09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$0A
    .byte $0A,$0B,$0B,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C
    .byte $0C,$0C,$0C

; ----------------------------------------------------------------------------
; Table of 26 sprite x-coordinates, used in R88B1_TOSSED_PILL_SPRITE
; and L9F87 (R9BB9_GAME_STATE_MACHINE routine 6)
; Indexed by L7D_TOSS_TIMER
; Bytes $F0-$F3 specify a new arm position for Mario; the x-coordinate is then
; read from the following byte. $FF indicates the end of the sequence.

LA401:
    .byte $BE,$F1,$BE,$BC,$B8,$B4,$F2,$B0,$AC,$A8,$A4,$A0,$9E,$98,$94,$90
    .byte $8C,$88,$84,$80,$7C,$7A,$78,$F0,$78,$FF
; ----------------------------------------------------------------------------
; Table of sprite y-coordinates, used in R88B1_TOSSED_PILL_SPRITE.
; Indexed by L7D_TOSS_TIMER
LA41B:
    .byte $45,$00,$40,$36,$2E,$27,$00,$21,$1E,$1B,$19,$18,$18,$1A,$1C,$1F
    .byte $23,$28,$2D,$34,$3C,$43,$4A,$00,$4F,$F8
; ----------------------------------------------------------------------------
; unused
    .byte $01,$08,$FF,$00,$00,$07
    .byte $0F,$17,$02,$02,$02,$02,$02,$02,$02,$02,$03,$03,$03,$03,$03,$03
    .byte $03,$03,$04,$04,$04,$04,$04,$04,$04,$04
; ----------------------------------------------------------------------------
; Used in R90D3_COLLISION, indexed by LA6_PILL_SIZE-2.
LA455:
    .byte $00,$FF,$FF
; ----------------------------------------------------------------------------
; Used in R90D3_COLLISION, indexed by LA6_PILL_SIZE-2.
LA458:
    .byte $F9,$F9,$FA
; ----------------------------------------------------------------------------
; Used in R90D3_COLLISION, indexed by LA6_PILL_SIZE-2.
LA45B:
    .byte $00,$FF,$FF,$60,$68,$70,$78,$80,$88,$90,$98,$C0,$C1,$C2,$B0,$B1
    .byte $B2,$08,$F8,$01,$FF,$50,$40,$70,$60
; ----------------------------------------------------------------------------
; lookup table, 16 bytes, indexed by L86_PILL_ROW or ...
; playfield offsets for rows
LA474:
    .byte $78,$70,$68,$60,$58,$50,$48,$40
    .byte $38,$30,$28,$20,$18,$10,$08,$00
; ----------------------------------------------------------------------------
; Table of 16 sprite Y-coordinates, used in R871F_THIS_PILL_SPRITE, indexed by L86_PILL_ROW.
LA484:
    .byte $C8,$C0,$B8,$B0,$A8,$A0,$98,$90,$88,$80,$78,$70,$68,$60,$58,$50

; ----------------------------------------------------------------------------
; 12-byte lookup table
; used as offsets into table LA4A0.
; indexed by 4×LA3_NEXT_SIZE+LA2_NEXT_DIR
; indexed by 4×LA6_PILL_SIZE+LA5_PILL_DIR
LA494:
    .byte $00,$00,$00,$00
    .byte $00,$00,$00,$00
    .byte $00,$09,$12,$1B
; ----------------------------------------------------------------------------
; lookup table, used in R8772_PILL_SPRITE, indexed by values from LA494.
; Sprite data: Y-coord, tile index, flags, X-coord
LA4A0:
    .byte $00,$60,$02,$00,$00,$70,$02,$08,$FF ; Pill L-R, (0,0) and (+8,0)
    .byte $00,$50,$02,$00,$F8,$40,$02,$00,$FF ; Pill D-U, (0,0) and (0,-8)
    .byte $00,$70,$02,$08,$00,$60,$02,$00,$FF ; Pill R-L, (+8,0) and (0,0)
    .byte $F8,$40,$02,$00,$00,$50,$02,$00,$FF ; Pill U-D, (-8,0) and (0,0)
; ----------------------------------------------------------------------------
; 20-byte lookup table, used in R90D3_COLLISION.
LA4C4:
    .byte $00,$01,$00,$00
    .byte $F8,$00,$00,$00
    .byte $FF,$00,$01,$00
    .byte $F8,$00,$08,$00
    .byte $FF,$00,$01,$02
    .byte $F0,$F8,$00,$08

; ----------------------------------------------------------------------------
; Table of playfield offsets, used in R8F52_PLACE_PILL
; Indexed by 16×(LA6_PILL_SIZE - 2) + 4×LA5_PILL_DIR
LA4DC:
    .byte $00,$01,$63,$63
    .byte $00,$F8,$63,$63
    .byte $01,$00,$63,$63
    .byte $F8,$00,$63,$63
    .byte $FF,$00,$01,$63
    .byte $08,$00,$F8,$63
    .byte $01,$00,$FF,$63
    .byte $F8,$00,$08,$63
    .byte $FF,$00,$01,$02
    .byte $08,$00,$F8,$F0
    .byte $02,$01,$00,$FF
    .byte $F0,$F8,$00,$08

; ----------------------------------------------------------------------------
; Table of tile numbers for pill shapes.
; Indexed by 16×(LA6_PILL_SIZE - 2) + 4×LA5_PILL_DIR
LA50C:
    .byte $60,$70,$00,$00
    .byte $50,$40,$00,$00
    .byte $70,$60,$00,$00
    .byte $40,$50,$00,$00
    .byte $60,$A0,$70,$00
    .byte $50,$90,$40,$00
    .byte $70,$A0,$60,$00
    .byte $40,$90,$50,$00
    .byte $60,$A0,$A0,$70
    .byte $50,$90,$90,$40
    .byte $70,$A0,$A0,$60
    .byte $40,$90,$90,$50
; ----------------------------------------------------------------------------
; unused
    .byte $47,$57,$67,$77,$87,$97,$A7,$01,$02

; ----------------------------------------------------------------------------
; Used in R9C01_DROP_GARBAGE, indexed by $58.
LA545:
    .byte $00,$00,$00,$00,$80,$00
; ----------------------------------------------------------------------------
; unused
    .byte $11,$13,$15,$17,$10,$12,$14,$16,$09,$0B
    .byte $0D,$0F,$08,$0A,$0C,$0E,$10,$12,$14,$16,$11,$13,$15,$17,$08,$0A
    .byte $0C,$0E,$09,$0B,$0D,$0F

; ----------------------------------------------------------------------------
; Argument to RB6C2_PRINT
; Palette RAM indexes
LA56B:
    .byte $3F,$00,$20
    .byte $0F,$31,$2C,$0C,$0F,$32,$28,$0C,$0F,$28,$15,$21,$0F,$00,$22,$0C
    .byte $0F,$37,$30,$18,$0F,$28,$15,$0F,$0F,$28,$15,$21,$0F,$28,$21,$0F
    .byte $FF
; ----------------------------------------------------------------------------
; Argument to RB6C2_PRINT
; Palette RAM indexes
LA58F:
    .byte $3F,$00,$20
    .byte $0F,$0A,$1A,$11,$0F,$30,$28,$11,$0F,$0A,$1A,$15,$0F,$30,$28,$15
    .byte $0F,$37,$30,$18,$0F,$30,$15,$0C,$0F,$30,$2C,$0C,$0F,$38,$21,$0F
    .byte $FF
; ----------------------------------------------------------------------------
; Argument to RB6C2_PRINT
; Palette RAM indexes
LA5B3:
    .byte $3F,$00,$20
    .byte $0F,$30,$27,$15,$0F,$30,$17,$0F,$0F,$30,$29,$1A,$0F,$30,$0A,$0F
    .byte $0F,$30,$27,$15,$0F,$30,$17,$0F,$0F,$30,$29,$1A,$0F,$29,$27,$21
    .byte $FF
; ----------------------------------------------------------------------------
; Argument to RB6C2_PRINT
; Palette RAM indexes
LA5D7:
    .byte $3F,$00,$20
    .byte $0F,$31,$2C,$0C,$0F,$32,$28,$0C,$0F,$28,$15,$21,$0F,$00,$22,$0C
    .byte $0F,$37,$30,$18,$0F,$28,$15,$0F,$0F,$28,$15,$21,$0F,$28,$21,$0F
    .byte $FF
; ----------------------------------------------------------------------------
; Argument to RB6C2_PRINT
; Palette RAM indexes
LA5FB:
    .byte $3F,$00,$20
    .byte $22,$1A,$0A,$28,$22,$30,$0F,$0F,$22,$28,$15,$21,$22,$08,$18,$0F
    .byte $22,$27,$15,$3C,$22,$30,$10,$0F,$22,$28,$15,$0F,$22,$35,$29,$0F
    .byte $FF
; ----------------------------------------------------------------------------
; Argument to RB6C2_PRINT
; Palette RAM indexes
LA61F:
    .byte $3F,$00,$20
    .byte $02,$0F,$0F,$0F,$02,$02,$0F,$0F,$02,$28,$15,$21,$02,$08,$18,$0F
    .byte $02,$0F,$0F,$0F,$02,$30,$10,$0F,$02,$28,$15,$0F,$02,$10,$00,$0F
    .byte $FF
; ----------------------------------------------------------------------------
; Argument to RB6C2_PRINT
; Palette RAM indexes
LA643:
    .byte $3F,$00,$20
    .byte $0F,$0F,$0F,$0F,$0F,$30,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$08,$18,$0F
    .byte $0F,$0F,$0F,$0F,$0F,$30,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F
    .byte $FF
; ----------------------------------------------------------------------------
; Argument to RB6C2_PRINT
; Palette RAM indexes (sprite palette only)
LA667:
    .byte $3F,$10                           ; PPU address $3F10
    .byte $10                               ; 16 non-repeated bytes
    .byte $02,$28,$15,$21
    .byte $02,$02,$10,$0F
    .byte $02,$28,$15,$0F
    .byte $02,$10,$00,$0F
    .byte $FF                               ; terminator byte
; ----------------------------------------------------------------------------
; Argument to RB6C2_PRINT
; Palette RAM indexes
LA67B:
    .byte $3F,$00,$20
    .byte $23,$19,$09,$18,$23,$30,$0F,$0F,$23,$28,$15,$21,$23,$08,$18,$0F
    .byte $23,$28,$16,$2C,$23,$10,$00,$0F,$23,$28,$15,$21,$23,$0F,$0F,$0F
    .byte $FF
; ----------------------------------------------------------------------------
; Argument to RB6C2_PRINT
; Palette RAM indexes
LA69F:
    .byte $3F,$00,$20
    .byte $13,$0A,$0F,$08,$13,$30,$0F,$0F,$13,$28,$15,$21,$13,$08,$18,$0F
    .byte $13,$08,$06,$1C,$13,$00,$21,$02,$13,$28,$15,$21,$13,$0F,$0F,$0F
    .byte $FF
; ----------------------------------------------------------------------------
; Argument to RB6C2_PRINT
; Palette RAM indexes
LA6C3:
    .byte $3F,$00,$20
    .byte $23,$19,$09,$18,$23,$30,$0F,$0F,$23,$28,$15,$21,$23,$08,$18,$0F
    .byte $23,$28,$16,$2C,$23,$10,$00,$0F,$23,$28,$15,$21,$23,$0F,$0F,$0F
    .byte $FF
; ----------------------------------------------------------------------------
; Argument to RB6C2_PRINT
; Palette RAM indexes
LA6E7:
    .byte $3F,$00,$10
    .byte $02,$0F,$0F,$0F,$02,$30,$0F,$0F,$02,$28,$15,$21,$02,$08,$18,$0F
    .byte $FF

; ----------------------------------------------------------------------------
; Table of 4 sprite x-coordinates, used in R871F_THIS_PILL_SPRITE.
; Left edges of playfields.
; Indexed by 2(NUM_PLAYERS - 1) + ($58 - 4)
LA6FB:
    .byte $60,$60,$20,$A0
    .byte $C0,$F8,$6E,$82
    .byte $00,$00,$30,$00,$00,$01,$00,$00
    .byte $00,$08,$00,$00,$00,$12,$00,$00
    .byte $00,$30,$00,$00

; ----------------------------------------------------------------------------
; Table of PPU addresses, used by R8321
; Screen position of play field rows (one player mode)
; Rows 10-25, column 12
LA717:
    .dbyt $214C,$216C,$218C,$21AC
    .dbyt $21CC,$21EC,$220C,$222C
    .dbyt $224C,$226C,$228C,$22AC
    .dbyt $22CC,$22EC,$230C,$232C

; ----------------------------------------------------------------------------
; Table of PPU addresses, used by R8321
; Screen position of play field rows (player 1 of 2)
; Rows 10-25, column 4
LA737:
    .dbyt $2144,$2164,$2184,$21A4
    .dbyt $21C4,$21E4,$2204,$2224
    .dbyt $2244,$2264,$2284,$22A4
    .dbyt $22C4,$22E4,$2304,$2324

; ----------------------------------------------------------------------------
; Table of PPU addresses, used by R8321
; Screen position of play field rows (player 2 of 2)
; Rows 10-25, column 20
LA757:
    .dbyt $2154,$2174,$2194,$21B4
    .dbyt $21D4,$21F4,$2214,$2234
    .dbyt $2254,$2274,$2294,$22B4
    .dbyt $22D4,$22F4,$2314,$2334

; ----------------------------------------------------------------------------
; lookup table, used in multiple places: R8393, R8508, R86AD, R87A2
; BCD table 00-29
LA777:
    .byte $00,$01,$02,$03,$04,$05,$06,$07
    .byte $08,$09,$10,$11,$12,$13,$14,$15
    .byte $16,$17,$18,$19,$20,$21,$22,$23
    .byte $24,$25,$26,$27,$28,$29

; ----------------------------------------------------------------------------
; 80-byte lookup table, used by R8D70_DROP_PILL.
; Indexed by LA38D,L8B_SPEED + L8A_EXTRA_SPEED
; Compared with L92_DROP_TIMER.
; Pill drop speed (frames per row).
LA795:
    .byte $45,$43,$41,$3F,$3D,$3B,$39,$37
    .byte $35,$33,$31,$2F,$2D,$2B,$29,$27
    .byte $25,$23,$21,$1F,$1D,$1B,$19,$17
    .byte $15,$13,$12,$11,$10,$0F,$0E,$0D
    .byte $0C,$0B,$0A,$09,$09,$08,$08,$07
    .byte $07,$06,$06,$05,$05,$05,$05,$05
    .byte $05,$05,$05,$05,$05,$05,$05,$04
    .byte $04,$04,$04,$04,$03,$03,$03,$03
    .byte $03,$02,$02,$02,$02,$02,$01,$01
    .byte $01,$01,$01,$01,$01,$01,$01,$01
; ----------------------------------------------------------------------------
; unused
    .byte $00,$01,$02,$03,$04,$05,$06,$03

; ----------------------------------------------------------------------------
; Table of 16 virus colors, used by R9CFF_ADD_VIRUS
LA7ED:
    .byte $00,$01,$02,$02,$01,$00,$00,$01
    .byte $02,$02,$01,$00,$00,$01,$02,$01

; ----------------------------------------------------------------------------
; 9-byte lookup table, used by R8E8D_NEW_PILL. Copied to L9A_NEXT_COLOR_0.
LA7FD:
    .byte $00,$00,$00,$01,$01,$01,$02,$02,$02

; ----------------------------------------------------------------------------
; 9-byte lookup table, used by R8E8D_NEW_PILL. Copied to L9B_NEXT_COLOR_1.
LA806:
    .byte $00,$01,$02,$00,$01,$02,$00,$01,$02

; ----------------------------------------------------------------------------
; 40-byte null-terminated string, used by R9691_DRAW_MESSAGE
LA80F:
    .byte $8B,$8C,$8C,$8C,$8C,$8C,$8C,$8D
    .byte $8E,$FE,$FE,$FE,$FE,$FE,$FE,$8F
    .byte $8E,$FE,$0D,$1B,$0A,$20,$FE,$8F ; " DRAW "
    .byte $8E,$FE,$FE,$FE,$FE,$FE,$FE,$8F
    .byte $ED,$EE,$EE,$EE,$EE,$EE,$EE,$EF
    .byte $00

; ----------------------------------------------------------------------------
; 56-byte null-terminated string, used by R96D4_GAME_OVER
; Copied to $0410 or $0510.
LA838:
    .byte $8B,$8C,$8C,$8C,$8C,$8C,$8C,$8D
    .byte $8E,$FE,$FE,$FE,$FE,$FE,$FE,$8F
    .byte $8E,$FE,$10,$0A,$16,$0E,$FE,$8F ; " GAME "
    .byte $8E,$FE,$FE,$FE,$FE,$FE,$FE,$8F
    .byte $8E,$FE,$18,$1F,$0E,$1B,$FE,$8F ; " OVER "
    .byte $8E,$FE,$FE,$FE,$FE,$FE,$FE,$8F
    .byte $ED,$EE,$EE,$EE,$EE,$EE,$EE,$EF
    .byte $00

; ----------------------------------------------------------------------------
; 80-byte null-terminated string, used by RB337_STAGE_CLEAR
; Copied to $0400-$044f or $0500-$054f.
LA871:
    .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    .byte $8B,$8C,$8C,$8C,$8C,$8C,$8C,$8D
    .byte $8E,$FE,$FE,$FE,$FE,$FE,$FE,$8F
    .byte $8E,$1C,$1D,$0A,$10,$0E,$FE,$8F ; "STAGE "
    .byte $8E,$FE,$0C,$15,$0E,$0A,$1B,$8F ; " CLEAR"
    .byte $8E,$FE,$FE,$FE,$FE,$FE,$FE,$8F
    .byte $8E,$1D,$1B,$22,$FE,$FE,$FE,$8F ; "TRY   "
    .byte $8E,$FE,$FE,$17,$0E,$21,$1D,$8F ; "  NEXT"
    .byte $8E,$FE,$FE,$FE,$FE,$FE,$FE,$8F
    .byte $ED,$EE,$EE,$EE,$EE,$EE,$EE,$EF
    .byte $00

; ----------------------------------------------------------------------------
; Array of 75 pointers to strings, indexed by L53_SPRITE_NUM * 2.
; Sprite data used in R88F6_SPRITE.
LA8C2:
.scope
    ; 00
    .word LA958, LA96D, LA96D, LA97A
    .word LA987, LA9C8, LA9F9, LAA26
    .word LAA67, LAAA4, LAAE1, LAB1E
    .word LAB63, LABA0, LABAD, LABBA
    ; 10
    .word LABC3, LABD8, LAC05, LAC05
    .word LAC2A, LAC4F, LAC74, LAC9D
    .word LACB6, LACBF, LACBF, LACBF
    .word LACBF, LACBF, LACC4, LACC9
    ; 20
    .word LACC9, LACD6, LACDB, LACE8
    .word LAD0D, LAD32, LAD57, LAD7C
    .word LADA1, LADC6, LADEB, LAE10
    .word LAE35, LAE56, LAE77, LAE98
    ; 30
    .word LAEB9, LAEDA, LAEFB, LAF44
    .word LAF65, LAFD6, LAFE7, LAFF8
    .word LB029, LB042, LB05B, LB074
    .word LB08D, LB08D, LB0B6, LB0D7
    ; 40
    .word LB0F8, LB10D, LB122, LB13B
    .word LB15C, LB175, LB18E, LB1CB
    .word LB208, LB23D, LB246

; 4 bytes of sprite attributes:
; - Y position of top of sprite
; - Tile index number
; - Attribute flags: v-flip, h-flip, priority, palette
; - X position of left side of sprite

; Sprite $00: Pause (page 2)
; 0A 0B 0C 0D 0E
LA958:
    .byte $00,$0A,$00,$00
    .byte $00,$0B,$00,$08
    .byte $00,$0C,$00,$10
    .byte $00,$0D,$00,$18
    .byte $00,$0E,$00,$20
    .byte $80
; Sprite $01/$02: slider pointer (page 5)
; F0 F1 F2
LA96D:
    .byte $00,$F0,$03,$00
    .byte $00,$F1,$03,$08
    .byte $00,$F2,$03,$10
    .byte $80
; Sprite $03: slider pointer (v-flipped)
; F0 F1 F2
LA97A:
    .byte $00,$F0,$83,$00
    .byte $00,$F1,$83,$08
    .byte $00,$F2,$83,$10
    .byte $80
; Sprite $04: 7x3 box (page 5)
; 3F 2F 2F 2F 2F 2F 5F
; 2E                2E
; 4F 2F 2F 2F 2F 2F 6F
LA987:
    .byte $00,$3F,$03,$00,$00,$2F,$03,$08,$00,$2F,$03,$10,$00,$2F,$03,$18
    .byte $00,$2F,$03,$20,$00,$2F,$03,$28,$00,$5F,$03,$30,$08,$2E,$03,$00
    .byte $08,$2E,$03,$30,$10,$4F,$03,$00,$10,$2F,$03,$08,$10,$2F,$03,$10
    .byte $10,$2F,$03,$18,$10,$2F,$03,$20,$10,$2F,$03,$28,$10,$6F,$03,$30
    .byte $80
; Sprite $05: 5x3 box (page 5)
; 3F 2F 2F 2F 5F
; 2E          2E
; 4F 2F 2F 2F 6F
LA9C8:
    .byte $00,$3F,$03,$00,$00,$2F,$03,$08,$00,$2F,$03,$10,$00,$2F,$03,$18
    .byte $00,$5F,$03,$20,$08,$2E,$03,$00,$08,$2E,$03,$20,$10,$4F,$03,$00
    .byte $10,$2F,$03,$08,$10,$2F,$03,$10,$10,$2F,$03,$18,$10,$6F,$03,$20
    .byte $80
; Sprite $06: Red virus with arm raised (page 2)
; 20 21 84 83
; 22 23 94 93
;    24 A4 A3
LA9F9:
    .byte $00,$20,$01,$00,$00,$21,$01,$08,$00,$84,$01,$10,$00,$83,$41,$18
    .byte $08,$22,$01,$00,$08,$23,$01,$08,$08,$94,$01,$10,$08,$93,$41,$18
    .byte $10,$24,$01,$08,$10,$A4,$01,$10,$10,$A3,$41,$18,$80
; Sprite $07: Big X in a box (page 2)
; 10 11 11 10 (bottom v-flipped, right side h-flipped)
; 12 13 13 12
; 12 13 13 12
; 10 11 11 10
LAA26:
    .byte $E0,$10,$01,$F8,$E0,$11,$01,$00,$E0,$11,$41,$08,$E0,$10,$41,$10
    .byte $E8,$12,$01,$F8,$E8,$13,$01,$00,$E8,$13,$41,$08,$E8,$12,$41,$10
    .byte $F0,$12,$81,$F8,$F0,$13,$81,$00,$F0,$13,$C1,$08,$F0,$12,$C1,$10
    .byte $F8,$10,$81,$F8,$F8,$11,$81,$00,$F8,$11,$C1,$08,$F8,$10,$C1,$10
    .byte $80
; Sprite $08: open-mouth mario (page 2)
; 67 68 69
; 15 16 17
; 18 19 1A
; 1B 1C 1D
; 30 31 32
LAA67:
    .byte $00,$67,$00,$00,$00,$68,$00,$08,$00,$69,$00,$10
    .byte $08,$15,$00,$00,$08,$16,$00,$08,$08,$17,$00,$10
    .byte $10,$18,$00,$00,$10,$19,$00,$08,$10,$1A,$00,$10
    .byte $18,$1B,$00,$00,$18,$1C,$00,$08,$18,$1D,$00,$10
    .byte $20,$30,$00,$00,$20,$31,$00,$08,$20,$32,$00,$10,$80
; Sprite $09: open-mouth, arm-raised mario (page 2)
; 1E 68 69
; 2E 16 17
; 3E 19 1A
; 4E 1C 1D
; 30 31 32
LAAA4:
    .byte $00,$1E,$00,$00,$00,$68,$00,$08,$00,$69,$00,$10
    .byte $08,$2E,$00,$00,$08,$16,$00,$08,$08,$17,$00,$10
    .byte $10,$3E,$00,$00,$10,$19,$00,$08,$10,$1A,$00,$10
    .byte $18,$4E,$00,$00,$18,$1C,$00,$08,$18,$1D,$00,$10
    .byte $20,$30,$00,$00,$20,$31,$00,$08,$20,$32,$00,$10,$80
; Sprite $0A: side, arm high mario (page 2)
; 33 34 35
; 43 44 45
; 53 54 55
; 63 64 65
; 73 74 75
LAAE1:
    .byte $00,$33,$00,$00,$00,$34,$00,$08,$00,$35,$00,$10
    .byte $08,$43,$00,$00,$08,$44,$00,$08,$08,$45,$00,$10
    .byte $10,$53,$00,$00,$10,$54,$00,$08,$10,$55,$00,$10
    .byte $18,$63,$00,$00,$18,$64,$00,$08,$18,$65,$00,$10
    .byte $20,$73,$00,$00,$20,$74,$00,$08,$20,$75,$00,$10,$80
;    36 34 35
; 66 46 44 45
; 76 56 54 55
;    73 74 75
LAB1E:
    .byte $00,$36,$00,$00,$00,$34,$00,$08,$00,$35,$00,$10
    .byte $08,$66,$00,$F8,$08,$46,$00,$00,$08,$44,$00,$08,$08,$45,$00,$10
    .byte $10,$76,$00,$F8,$10,$56,$00,$00,$10,$54,$00,$08,$10,$55,$00,$10
    .byte $18,$63,$00,$00,$18,$64,$00,$08,$18,$65,$00,$10
    .byte $20,$73,$00,$00,$20,$74,$00,$08,$20,$75,$00,$10,$80
LAB63:
    .byte $00,$36,$00,$00,$00,$34,$00,$08,$00,$35,$00,$10,$08,$37,$00,$00
    .byte $08,$44,$00,$08,$08,$45,$00,$10,$10,$47,$00,$00,$10,$54,$00,$08
    .byte $10,$55,$00,$10,$18,$57,$00,$00,$18,$64,$00,$08,$18,$65,$00,$10
    .byte $20,$73,$00,$00,$20,$74,$00,$08,$20,$75,$00,$10,$80
LABA0:
    .byte $00,$15,$00,$00,$00,$18,$00,$08,$00,$20,$00,$10,$80
LABAD:
    .byte $00,$16,$00,$00,$00,$0E,$00,$08,$00,$0D,$00,$10,$80
LABBA:
    .byte $00,$11,$00,$00,$00,$12,$00,$08,$80
; Sprite $10: "START" (page 2)
; 0D 0F 0B 14 0F
LABC3:
    .byte $00,$0D,$00,$00,$00,$0F,$00,$08,$00,$0B,$00,$10,$00,$14,$00,$18
    .byte $00,$0F,$00,$20,$80
; Sprite $11: red virus
; 20 2B 39 38
; 22 2C 49 48
;    2D 59 58
LABD8:
    .byte $00,$20,$01,$00,$00,$2B,$01,$08,$00,$39,$01,$10,$00,$38,$41,$18
    .byte $08,$22,$01,$00,$08,$2C,$01,$08,$08,$49,$01,$10,$08,$48,$41,$18
    .byte $10,$2D,$01,$08,$10,$59,$01,$10,$10,$58,$41,$18,$80
LAC05:
    .byte $00,$38,$01,$00,$00,$39,$01,$08,$00,$38,$41,$10,$08,$48,$01,$00
    .byte $08,$49,$01,$08,$08,$48,$41,$10,$10,$58,$01,$00,$10,$59,$01,$08
    .byte $10,$58,$41,$10,$80
LAC2A:
    .byte $00,$3A,$03,$00,$00,$3B,$03,$08,$00,$3A,$43,$10,$08,$4A,$03,$00
    .byte $08,$4B,$03,$08,$08,$4A,$43,$10,$10,$5A,$03,$00,$10,$5B,$03,$08
    .byte $10,$5A,$43,$10,$80
LAC4F:
    .byte $00,$3C,$03,$00,$00,$3D,$03,$08,$00,$3C,$43,$10,$08,$4C,$03,$00
    .byte $08,$4D,$03,$08,$08,$4C,$43,$10,$10,$5C,$03,$00,$10,$5D,$03,$08
    .byte $10,$5C,$43,$10,$80
; Sprite $16: big cloud
; 20 21 22 23 24
; 30 31 32 33 34
LAC74:
    .byte $00,$20,$21,$00,$00,$21,$21,$08,$00,$22,$21,$10,$00,$23,$21,$18
    .byte $00,$24,$21,$20,$08,$30,$21,$00,$08,$31,$21,$08,$08,$32,$21,$10
    .byte $08,$33,$21,$18,$08,$34,$21,$20,$80
; Sprite $17: medium clound
; 03 04 05
; 13 14 15
LAC9D:
    .byte $00,$03,$21,$00,$00,$04,$21,$08,$00,$05,$21,$10
    .byte $08,$13,$21,$00,$08,$14,$21,$08,$08,$15,$21,$10,$80
; Sprite $18: small cloud
; 44 45
LACB6:
    .byte $00,$44,$21,$00,$00,$45,$21,$08,$80
; Sprite $19-$1D:
; 45
LACBF:
    .byte $00,$45,$00,$00,$80
; Sprite $1E:
; 45 (v-flip)
LACC4:
    .byte $00,$45,$80,$00,$80
; Sprite $20: Tiny animals (page 7)
; 00  01  02
LACC9:
    .byte $00,$00,$00,$00,$00,$01,$00,$0A,$00,$02,$00,$14,$80
; Sprite $21
; 29
LACD6:
    .byte $00,$29,$01,$00,$80
; Sprite $22: Tiny animals (page 7)
; 10  11  12
LACDB:
    .byte $00,$10,$00,$00,$00,$11,$00,$0A,$00,$12,$00,$14,$80
; Sprite $23: Red virus, symmetrical (page 2)
; 83 84 83
; 93 94 93
; A3 A4 A3
LACE8:
    .byte $00,$83,$01,$00,$00,$84,$01,$08,$00,$83,$41,$10
    .byte $08,$93,$01,$00,$08,$94,$01,$08,$08,$93,$41,$10
    .byte $10,$A3,$01,$00,$10,$A4,$01,$08,$10,$A3,$41,$10,$80
LAD0D:
    .byte $00,$85,$01,$00,$00,$86,$01,$08,$00,$87,$01,$10,$08,$95,$01,$00
    .byte $08,$96,$01,$08,$08,$97,$01,$10,$10,$A5,$01,$00,$10,$A6,$01,$08
    .byte $10,$A7,$01,$10,$80
LAD32:
    .byte $00,$87,$41,$00,$00,$86,$41,$08,$00,$85,$41,$10,$08,$97,$41,$00
    .byte $08,$96,$41,$08,$08,$95,$41,$10,$10,$A7,$41,$00,$10,$A6,$41,$08
    .byte $10,$A5,$41,$10,$80
; Sprite $26: Blue virus, symmetrical (page 2)
; B3 B4 B3
; C3 C4 C3
; D3 D4 D3
LAD57:
    .byte $00,$B3,$03,$00,$00,$B4,$03,$08,$00,$B3,$43,$10
    .byte $08,$C3,$03,$00,$08,$C4,$03,$08,$08,$C3,$43,$10
    .byte $10,$D3,$03,$00,$10,$D4,$03,$08,$10,$D3,$43,$10,$80
LAD7C:
    .byte $00,$B5,$03,$00,$00,$B6,$03,$08,$00,$B7,$03,$10,$08,$C5,$03,$00
    .byte $08,$C6,$03,$08,$08,$C7,$03,$10,$10,$D5,$03,$00,$10,$D6,$03,$08
    .byte $10,$D7,$03,$10,$80
LADA1:
    .byte $00,$B7,$43,$00,$00,$B6,$43,$08,$00,$B5,$43,$10,$08,$C7,$43,$00
    .byte $08,$C6,$43,$08,$08,$C5,$43,$10,$10,$D7,$43,$00,$10,$D6,$43,$08
    .byte $10,$D5,$43,$10,$80
; Sprite $29: Yellow virus, symmetrical (page 2)
; 88 89 88
; 98 99 98
; A8 A9 A8
LADC6:
    .byte $00,$88,$03,$00,$00,$89,$03,$08,$00,$88,$43,$10
    .byte $08,$98,$03,$00,$08,$99,$03,$08,$08,$98,$43,$10
    .byte $10,$A8,$03,$00,$10,$A9,$03,$08,$10,$A8,$43,$10,$80
; Sprite $2A: Yellow virus, marching R (page 2)
; 8A 8B 8C
; 9A 9B 9C
; AA AB AC
LADEB:
    .byte $00,$8A,$03,$00,$00,$8B,$03,$08,$00,$8C,$03,$10
    .byte $08,$9A,$03,$00,$08,$9B,$03,$08,$08,$9C,$03,$10
    .byte $10,$AA,$03,$00,$10,$AB,$03,$08,$10,$AC,$03,$10,$80
; Sprite $2B: Yellow virus, marching L (page 2)
; 8C 8B 8A
; 9C 9B 9A
; AC AB AA
LAE10:
    .byte $00,$8C,$43,$00,$00,$8B,$43,$08,$00,$8A,$43,$10
    .byte $08,$9C,$43,$00,$08,$9B,$43,$08,$08,$9A,$43,$10
    .byte $10,$AC,$43,$00,$10,$AB,$43,$08,$10,$AA,$43,$10,$80
; Sprite $2C: Red virus fussy
; BB BC
; CB CC CD
; DB DC DD
LAE35:
    .byte $00,$BB,$01,$00,$00,$BC,$01,$08
    .byte $08,$CB,$01,$00,$08,$CC,$01,$08,$08,$CD,$01,$10
    .byte $10,$DB,$01,$00,$10,$DC,$01,$08,$10,$DD,$01,$10,$80
LAE56:
    .byte $00,$BC,$41,$08,$00,$BB,$41,$10,$08,$CD,$41,$00,$08,$CC,$41,$08
    .byte $08,$CB,$41,$10,$10,$DD,$41,$00,$10,$DC,$41,$08,$10,$DB,$41,$10
    .byte $80
LAE77:
    .byte $00,$B8,$03,$00,$00,$B9,$03,$08,$08,$C8,$03,$00,$08,$C9,$03,$08
    .byte $08,$CA,$03,$10,$10,$D8,$03,$00,$10,$D9,$03,$08,$10,$DA,$03,$10
    .byte $80
LAE98:
    .byte $00,$B9,$43,$08,$00,$B8,$43,$10,$08,$CA,$43,$00,$08,$C9,$43,$08
    .byte $08,$C8,$43,$10,$10,$DA,$43,$00,$10,$D9,$43,$08,$10,$D8,$43,$10
    .byte $80
; Sprite $30: yellow virus fussy
; 8D 8E
; 9D 9E 9F
; AD AE AF
LAEB9:
    .byte $00,$8D,$03,$00,$00,$8E,$03,$08,$08,$9D,$03,$00,$08,$9E,$03,$08
    .byte $08,$9F,$03,$10,$10,$AD,$03,$00,$10,$AE,$03,$08,$10,$AF,$03,$10
    .byte $80
; Sprite $31: yellow virus fussy (h-flip)
;    8E 8D
; 9F 9E 9D
; AF AE AD
LAEDA:
    .byte $00,$8E,$43,$08,$00,$8D,$43,$10,$08,$9F,$43,$00,$08,$9E,$43,$08
    .byte $08,$9D,$43,$10,$10,$AF,$43,$00,$10,$AE,$43,$08,$10,$AD,$43,$10
    .byte $80
; Sprite $32: shrugging mario
;    67 68 69
;    6A 6B 6C
; 77 78 79 7A 7B
;    7C 7D 7E 7F
;    73 74 75
LAEFB:
    .byte $00,$67,$00,$00,$00,$68,$00,$08,$00,$69,$00,$10,$08,$6A,$00,$00
    .byte $08,$6B,$00,$08,$08,$6C,$00,$10,$10,$77,$00,$F8,$10,$78,$00,$00
    .byte $10,$79,$00,$08,$10,$7A,$00,$10,$10,$7B,$00,$18,$18,$7C,$00,$00
    .byte $18,$7D,$00,$08,$18,$7E,$00,$10,$18,$7F,$00,$18,$20,$73,$00,$00
    .byte $20,$74,$00,$08,$20,$75,$00,$10,$80
; Sprite $33: 8-way lines
; 90 91 90'
; 92    92'
; 90`91`90"
LAF44:
    .byte $00,$90,$00,$00,$00,$91,$00,$08,$00,$90,$40,$10,$08,$92,$00,$00
    .byte $08,$92,$40,$10,$10,$90,$80,$00,$10,$91,$80,$08,$10,$90,$C0,$10
    .byte $80
; Sprite $34: UFO top
;       0A 0B 0C 0D
; 18 19 1A 1B 1C 1D 1E 1F
; 28 29 2A 2B 2C 2D 2E 2F
; 38 39 3A 3B 3C 3D 3E 3F
LAF65:
    .byte $00,$0A,$22,$10,$00,$0B,$22,$18,$00,$0C,$22,$20,$00,$0D,$22,$28
    .byte $08,$18,$22,$00,$08,$19,$22,$08,$08,$1A,$22,$10,$08,$1B,$22,$18
    .byte $08,$1C,$22,$20,$08,$1D,$22,$28,$08,$1E,$22,$30,$08,$1F,$22,$38
    .byte $10,$28,$22,$00,$10,$29,$22,$08,$10,$2A,$22,$10,$10,$2B,$22,$18
    .byte $10,$2C,$22,$20,$10,$2D,$22,$28,$10,$2E,$22,$30,$10,$2F,$22,$38
    .byte $18,$38,$22,$00,$18,$39,$22,$08,$18,$3A,$22,$10,$18,$3B,$22,$18
    .byte $18,$3C,$22,$20,$18,$3D,$22,$28,$18,$3E,$22,$30,$18,$3F,$22,$38
    .byte $80
; Sprite $35: UFO bottom 1 (page 7)
; 4A 4B 4C 4D
LAFD6:
    .byte $20,$4A,$22,$10,$20,$4B,$22,$18,$20,$4C,$22,$20,$20,$4D,$22,$28
    .byte $80
; Sprite $36: UFO bottom 2 (page 7)
; 5A 5B 5C 5D
LAFE7:
    .byte $20,$5A,$22,$10,$20,$5B,$22,$18,$20,$5C,$22,$20,$20,$5D,$22,$28
    .byte $80
; Sprite $37: UFO beam (page 7)
;    07 07
;    17 17
; 26 27 27 26
; 36 37 37 36
LAFF8:
    .byte $28,$07,$02,$18,$28,$07,$42,$20
    .byte $30,$17,$02,$18,$30,$17,$42,$20
    .byte $38,$26,$02,$10,$38,$27,$02,$18,$38,$27,$42,$20,$38,$26,$42,$28
    .byte $40,$36,$02,$10,$40,$37,$02,$18,$40,$37,$42,$20,$40,$36,$42,$28
    .byte $80
; Sprite $38: Flying pig (page 7)
; 54 55 56
; 64 65 66
LB029:
    .byte $00,$54,$23,$00,$00,$55,$23,$08,$00,$56,$23,$10
    .byte $08,$64,$23,$00,$08,$65,$23,$08,$08,$66,$23,$10,$80
; Sprite $39: Flying pig 2 (page 7)
; 54 55 57
; 64 65 66
LB042:
    .byte $00,$54,$23,$00,$00,$55,$23,$08,$00,$57,$23,$10
    .byte $08,$64,$23,$00,$08,$65,$23,$08,$08,$66,$23,$10,$80
; Sprite $3A: Flying turtle
; 72 71 70
; 82 81 80
LB05B:
    .byte $00,$72,$63,$00,$00,$71,$63,$08,$00,$70,$63,$10
    .byte $08,$82,$63,$00,$08,$81,$63,$08,$08,$80,$63,$10,$80
LB074:
    .byte $00,$72,$63,$00,$00,$71,$63,$08,$00,$70,$63,$10,$08,$92,$63,$00
    .byte $08,$91,$63,$08,$08,$90,$63,$10,$80
; Sprite $3C/$3D: Flying chick
; A0 A1 A2
; B0 B1 B2 B3
;    C1 C2 C3
LB08D:
    .byte $00,$A0,$21,$00,$00,$A1,$21,$08,$00,$A2,$21,$10
    .byte $08,$B0,$21,$00,$08,$B1,$21,$08,$08,$B2,$21,$10,$08,$B3,$21,$18
    .byte $10,$C1,$21,$08,$10,$C2,$21,$10,$10,$C3,$21,$18,$80
; Sprite $3E: Flying witch
;    74 73
; 85 84 83
; 95 94 93
LB0B6:
    .byte $00,$74,$63,$08,$00,$73,$63,$10
    .byte $08,$85,$63,$00,$08,$84,$63,$08,$08,$83,$63,$10
    .byte $10,$95,$63,$00,$10,$94,$63,$08,$10,$93,$63,$10,$80
LB0D7:
    .byte $00,$74,$63,$08,$00,$73,$63,$10
    .byte $08,$75,$63,$00,$08,$84,$63,$08,$08,$83,$63,$10
    .byte $10,$95,$63,$00,$10,$94,$63,$08,$10,$93,$63,$10,$80
; Sprite $40: Flying chicken
; 76 77
; 86 87 89
LB0F8:
   .byte $00,$76,$22,$00,$00,$77,$22,$08
   .byte $08,$86,$22,$00,$08,$87,$22,$08,$08,$89,$22,$10,$80
; Sprite $41: Flying chicken 2
; 76 78
; 86 88 89
LB10D:
    .byte $00,$76,$22,$00,$00,$78,$22,$08
    .byte $08,$86,$22,$00,$08,$88,$22,$08,$08,$89,$22,$10,$80
; Sprite $42: Spray can
; 6A 6B
; 7A 7B
; 8A 8B
LB122:
    .byte $00,$6A,$21,$00,$00,$6B,$21,$08
    .byte $08,$7A,$21,$00,$08,$7B,$21,$08
    .byte $10,$8A,$21,$00,$10,$8B,$21,$08,$80
LB13B:
    .byte $00,$6A,$21,$00,$00,$6B,$21,$08
    .byte $08,$7A,$21,$00,$08,$7B,$21,$08
    .byte $10,$8A,$21,$00,$10,$8B,$21,$08,$10,$6C,$22,$10,$10,$6D,$22,$18
    .byte $80
; Sprite $44: Book 1
; 7E 7D 7C
; 8E 8D 8C
LB15C:
    .byte $00,$7E,$62,$00,$00,$7D,$62,$08,$00,$7C,$62,$10
    .byte $08,$8E,$62,$00,$08,$8D,$62,$08,$08,$8C,$62,$10,$80
; Sprite $45: Book 2
; 9E 9D 9C
; AE AD AC
LB175:
    .byte $00,$9E,$62,$00,$00,$9D,$62,$08,$00,$9C,$62,$10
    .byte $08,$AE,$62,$00,$08,$AD,$62,$08,$08,$AC,$62,$10,$80
; Sprite $46: Hatching dinosaur
;    A6 A5 A4
; B7 B6 B5 B4
; C7 C6 C5 C4
; D7 D6 D5 D4
LB18E:
    .byte $00,$A6,$63,$08,$00,$A5,$63,$10,$00,$A4,$63,$18
    .byte $08,$B7,$63,$00,$08,$B6,$63,$08,$08,$B5,$63,$10,$08,$B4,$63,$18
    .byte $10,$C7,$63,$00,$10,$C6,$63,$08,$10,$C5,$63,$10,$10,$C4,$63,$18
    .byte $18,$D7,$63,$00,$18,$D6,$63,$08,$18,$D5,$63,$10,$18,$D4,$63,$18
    .byte $80
LB1CB:
    .byte $00,$A6,$63,$08,$00,$A5,$63,$10,$00,$A4,$63,$18,$08,$B7,$63,$00
    .byte $08,$98,$63,$08,$08,$97,$63,$10,$08,$B4,$63,$18,$10,$C7,$63,$00
    .byte $10,$A8,$63,$08,$10,$A7,$63,$10,$10,$C4,$63,$18,$18,$D7,$63,$00
    .byte $18,$D6,$63,$08,$18,$D5,$63,$10,$18,$D4,$63,$18,$80
; Sprite $48: foot-tapping mario (no right foot)
; 67 68 69
; 15 16 17
; 5E 5F 3F
; 6E 6F 4F
; 30
LB208:
    .byte $00,$67,$00,$00,$00,$68,$00,$08,$00,$69,$00,$10,$08,$15,$00,$00
    .byte $08,$16,$00,$08,$08,$17,$00,$10,$10,$5E,$00,$00,$10,$5F,$00,$08
    .byte $10,$3F,$00,$10,$18,$6E,$00,$00,$18,$6F,$00,$08,$18,$4F,$00,$10
    .byte $20,$30,$00,$00,$80
; Sprite $49: foot-tapping mario's right foot down
;    31 32
LB23D:
    .byte $20,$31,$00,$08,$20,$32,$00,$10,$80
; Sprite $4A: foot-tapping mario's right foot raised
;    1F 2F
LB246:
    .byte $20,$1F,$00,$08,$20,$2F,$00,$10,$80
.endscope

; ----------------------------------------------------------------------------
; If neither player has 0 virus remaining, then return immediately.
; If a player has 0 virus remaining, then set L55_ROUND_WINNER,
; display "stage clear" message, wait for player to press "start",
; and finally set L46_TOP_STATE to 3.
RB24F_CHECK_WIN:
.scope
.scope
    lda L0324_P1_VIRUS                          ; B24F AD 24 03
    if_ne                                       ; B252 F0 08
        lda L03A4_P2_VIRUS                      ; B254 AD A4 03
        if_ne                                   ; B257 F0 03
            jmp LB336 ; rts                     ; B259 4C 36 B3
        end_if
    end_if
    lda #$0F                                    ; B25C A9 0F
    sta L0300_P1_UPDATE_ROW                     ; B25E 8D 00 03
    sta L0380_P2_UPDATE_ROW                     ; B261 8D 80 03
    lda #$40                                    ; B264 A9 40
    jsr R9701_SLEEP                             ; B266 20 01 97
    lda L0324_P1_VIRUS                          ; B269 AD 24 03
    if_eq                                       ; B26C D0 22
        lda L0727_NUM_PLAYERS                   ; B26E AD 27 07
        cmp #$01                                ; B271 C9 01
        if_ne                                   ; B273 F0 0B
            lda L03A4_P2_VIRUS                  ; B275 AD A4 03
            if_eq                               ; B278 D0 06
                jsr R9682_DRAW_GAME             ; B27A 20 82 96
                jmp LB2A2                       ; B27D 4C A2 B2
            end_if
        end_if
        jsr R9075_LOAD_P1                       ; B280 20 75 90
        jsr RB337_STAGE_CLEAR                   ; B283 20 37 B3
        jsr R90AF_SAVE_P1                       ; B286 20 AF 90
        lda #$01                                ; B289 A9 01
        sta L55_ROUND_WINNER                    ; B28B 85 55
        jmp LB2A2                               ; B28D 4C A2 B2
    end_if
    lda L03A4_P2_VIRUS                          ; B290 AD A4 03
    if_eq                                       ; B293 D0 0D
        jsr R9092_LOAD_P2                       ; B295 20 92 90
        jsr RB337_STAGE_CLEAR                   ; B298 20 37 B3
        jsr R90BC_SAVE_P2                       ; B29B 20 BC 90
        lda #$02                                ; B29E A9 02
        sta L55_ROUND_WINNER                    ; B2A0 85 55
    end_if
LB2A2:
    lda #$0F                                    ; B2A2 A9 0F
    sta L0300_P1_UPDATE_ROW                     ; B2A4 8D 00 03
    sta L0380_P2_UPDATE_ROW                     ; B2A7 8D 80 03
    lda #$10                                    ; B2AA A9 10
    jsr R9701_SLEEP                             ; B2AC 20 01 97
    ldx L0731_MUSIC_CHOICE                      ; B2AF AE 31 07
    lda LA261,x                                 ; B2B2 BD 61 A2
    sta L06F5_                                  ; B2B5 8D F5 06
    lda L0727_NUM_PLAYERS                       ; B2B8 AD 27 07
    cmp #$01                                    ; B2BB C9 01
    if_eq                                       ; B2BD D0 0A
        lda L0316_P1_LEVEL                      ; B2BF AD 16 03
        cmp #$18                                ; B2C2 C9 18
        if_ne                                   ; B2C4 F0 03
            inc L0316_P1_LEVEL                  ; B2C6 EE 16 03
        end_if
    end_if
    ; set bit 7 (victory marker)
    lda #$80                                    ; B2C9 A9 80
    ora L52_REDRAW_FLAGS                        ; B2CB 05 52
    sta L52_REDRAW_FLAGS                        ; B2CD 85 52
    lda #$0F                                    ; B2CF A9 0F
    sta L0300_P1_UPDATE_ROW                     ; B2D1 8D 00 03
    sta L0380_P2_UPDATE_ROW                     ; B2D4 8D 80 03
    lda #$10                                    ; B2D7 A9 10
    jsr R9701_SLEEP                             ; B2D9 20 01 97
    lda #$0F                                    ; B2DC A9 0F
    sta L0300_P1_UPDATE_ROW                     ; B2DE 8D 00 03
    sta L0380_P2_UPDATE_ROW                     ; B2E1 8D 80 03
    loop
        lda L43_CLOCK                           ; B2E4 A5 43
        and #$08                                ; B2E6 29 08
        if_ne                                   ; B2E8 F0 13
            lda #$6D                            ; B2EA A9 6D
            sta L44_SPRITE_X                    ; B2EC 85 44
            ldx L0727_NUM_PLAYERS               ; B2EE AE 27 07
            lda LA105,x                         ; B2F1 BD 05 A1
            sta L45_SPRITE_Y                    ; B2F4 85 45
            lda #$10                            ; B2F6 A9 10
            sta L53_SPRITE_NUM                  ; B2F8 85 53
            jsr R88F6_SPRITE                    ; B2FA 20 F6 88
            ; "START" sprite
        end_if
        jsr RB654_NEXT_FRAME                    ; B2FD 20 54 B6
        lda LF5_P1_INPUT_NEW                    ; B300 A5 F5
        ora LF7_P1_INPUT_OLD                    ; B302 05 F7
        and #$10 ; "start"                      ; B304 29 10
    while_eq                                    ; B306 F0 DC
    lda L0727_NUM_PLAYERS                       ; B308 AD 27 07
    cmp #$02                                    ; B30B C9 02
    if_ne                                       ; B30D F0 0A
        jsr R9E4C_NEXT_LEVEL                    ; B30F 20 4C 9E
        ; enter top-level state 3
        lda #$03                                ; B312 A9 03
        sta L46_TOP_STATE                       ; B314 85 46
    else                                        ; B316 4C 36 B3
        lda #$FF                                ; B319 A9 FF
        ldx #$04                                ; B31B A2 04
        ldy #$05                                ; B31D A0 05
        jsr RB894_FILL_PAGES ; page 4-5 with FF ; B31F 20 94 B8
        lda #$0F                                ; B322 A9 0F
        sta L0300_P1_UPDATE_ROW                 ; B324 8D 00 03
        sta L0380_P2_UPDATE_ROW                 ; B327 8D 80 03
        lda #$10                                ; B32A A9 10
        jsr R9701_SLEEP                         ; B32C 20 01 97
        ; enter top-level state 3
        lda #$03                                ; B32F A9 03
        sta L46_TOP_STATE                       ; B331 85 46
        jmp LB336                               ; B333 4C 36 B3
    end_if
LB336:
    rts                                         ; B336 60
.endscope

; --------------------------------------
; Print "STAGE CLEAR" message in playfield at $0400 or $0500.
; Fill the page with $FF, and copy 80 bytes from LA871.
; Called by RB24F_CHECK_WIN.
RB337_STAGE_CLEAR:
    lda L58_                                    ; B337 A5 58
    tax                                         ; B339 AA
    tay                                         ; B33A A8
    lda #$FF                                    ; B33B A9 FF
    jsr RB894_FILL_PAGES ; page ($58) with FF   ; B33D 20 94 B8
    lda #$00                                    ; B340 A9 00
    sta L57_                                    ; B342 85 57
    ldy #$00                                    ; B344 A0 00
    loop
        lda LA871,y                             ; B346 B9 71 A8
        beq break                               ; B349 F0 06
        sta ($57),y                             ; B34B 91 57
        iny                                     ; B34D C8
    forever                                     ; B34E 4C 46 B3
    rts                                         ; B351 60
.endscope

; ----------------------------------------------------------------------------
; Initialize L0580_
; Interleave $26 (38) values each from LB3BF, LB40A, and LB3E5
; into L0580_-$05f1.
RB352:
    ldx #$00                                    ; B352 A2 00
    ldy #$00                                    ; B354 A0 00
    loop
        lda LB3BF,x                             ; B356 BD BF B3
        sta L0580_,y                            ; B359 99 80 05
        iny                                     ; B35C C8
        lda LB40A,x                             ; B35D BD 0A B4
        sta L0580_,y                            ; B360 99 80 05
        iny                                     ; B363 C8
        lda LB3E5,x                             ; B364 BD E5 B3
        sta L0580_,y                            ; B367 99 80 05
        iny                                     ; B36A C8
        inx                                     ; B36B E8
        cpx #$26                                ; B36C E0 26
    while_ne                                    ; B36E D0 E6
    rts                                         ; B370 60

; ----------------------------------------------------------------------------
; Copy 38 entries into sprite attribute table based on L0580_.
; Quit unless L8B_SPEED == #$02.
RB371:
    lda L8B_SPEED                           ; B371 A5 8B
    cmp #$02                                ; B373 C9 02
    if_eq                                   ; B375 D0 47
        ldx #$00                            ; B377 A2 00
        ldy L42_OAM_OFFSET                  ; B379 A4 42
        ; increment x by 3 every loop
        ; increment y by 4 every loop
        loop
            ; if L43_ & 3 == 0 then increment Y-coordinate
            lda L0580_,x                    ; B37B BD 80 05
            sta L47_TEMP                    ; B37E 85 47
            lda L43_CLOCK                   ; B380 A5 43
            and #$03                        ; B382 29 03
            if_eq                           ; B384 D0 02
                inc L47_TEMP                ; B386 E6 47
            end_if
            lda L47_TEMP                    ; B388 A5 47
            sta L0580_,x                    ; B38A 9D 80 05
            sta L0200_OAM,y                 ; B38D 99 00 02
            inx                             ; B390 E8
            iny                             ; B391 C8
            ; if L43_ & 1 then rotate bottom 2 bits of tile index
            lda L0580_,x                    ; B392 BD 80 05
            sta L47_TEMP                    ; B395 85 47
            lda L43_CLOCK                   ; B397 A5 43
            and #$01                        ; B399 29 01
            add L47_TEMP                    ; B39B 18 65 47
            and #$03                        ; B39E 29 03
            ora #$40                        ; B3A0 09 40
            sta L0580_,x                    ; B3A2 9D 80 05
            sta L0200_OAM,y                 ; B3A5 99 00 02
            inx                             ; B3A8 E8
            iny                             ; B3A9 C8
            ; flags are always #$20
            ; (no flips, behind background, palette 0)
            lda #$20                        ; B3AA A9 20
            sta L0200_OAM,y                 ; B3AC 99 00 02
            iny                             ; B3AF C8
            ; copy X-coordinate
            lda L0580_,x                    ; B3B0 BD 80 05
            sta L0200_OAM,y                 ; B3B3 99 00 02
            inx                             ; B3B6 E8
            iny                             ; B3B7 C8
            cpx #$72                        ; B3B8 E0 72
        while_ne                            ; B3BA D0 BF
        ; loop 38 times
        sty L42_OAM_OFFSET                  ; B3BC 84 42
    end_if
    rts                                     ; B3BE 60

; ----------------------------------------------------------------------------
; Lookup table of sprite Y coordinates, used by RB352.
LB3BF:
    .byte $00,$07,$0E,$15,$1C,$23,$2A,$31
    .byte $38,$3F,$46,$4D,$54,$5B,$62,$69
    .byte $70,$77,$7E,$85,$8C,$93,$9A,$A1
    .byte $A8,$AF,$B6,$BD,$C4,$CB,$D2,$D9
    .byte $E0,$E7,$EE,$F5,$FC,$FF

; ----------------------------------------------------------------------------
; Lookup table of sprite tile numbers, used by RB352.
LB3E5:
    .byte $58,$C0,$40,$E0,$90,$10,$60,$A8
    .byte $70,$C0,$30,$D8,$50,$E8,$90,$B0
    .byte $10,$68,$C8,$38,$78,$20,$A8,$50
    .byte $D8,$C0,$88,$E8,$48,$98,$30,$C8
    .byte $60,$D8,$10,$A0,$80

; ----------------------------------------------------------------------------
; Lookup table of sprite X coordinates, used by RB352.
LB40A:
    .byte $F1,$F0,$F2,$F1,$F2,$F1,$F0,$F0
    .byte $F1,$F2,$F2,$F0,$F0,$F1,$F1,$F2
    .byte $F0,$F2,$F0,$F1,$F0,$F2,$F2,$F0
    .byte $F1,$F0,$F2,$F2,$F1,$F1,$F0,$F2
    .byte $F2,$F1,$F2,$F0,$F1

; ----------------------------------------------------------------------------
; If L8B_SPEED == #$02 and L96_LEVEL == #$15 then RB43F_ENDING.
RB42F_MAYBE_ENDING:
.scope
    lda L8B_SPEED                               ; B42F A5 8B
    cmp #$02                                    ; B431 C9 02
    if_eq                                       ; B433 D0 09
        lda L96_LEVEL                           ; B435 A5 96
        cmp #$15                                ; B437 C9 15
        if_eq                                   ; B439 D0 03
            jsr RB43F_ENDING                    ; B43B 20 3F B4
        end_if
    end_if
    rts                                         ; B43E 60

; ----------------------------------------------------------------------------
; Jump to one of 31 subroutines based on L5E_ENDING_STATE.

; -------D--/AXY-CZ--VN
; RTS: 0->6->0
; READS $43 $8b ($47),Y L0760,X L0762,X La085,X La0e1,X La0ef,X La8c2,X
; WRITES $47 $48 $49 $4a $4b L53_SPRITE_NUM L66_PALETTE $7f L06f0 L06f3 L06f4 L06f5 L0200,Y L0200,X
; MODIFIES L39_V1_Y $42 L44_SPRITE_X L45_SPRITE_Y $4f $50 $5e L0580,X L0761,X
; JSR $9f28 $b371 $b569 $b5a7 $b8ac

RB43F_ENDING:
    lda L5E_ENDING_STATE                        ; B43F A5 5E
    jsr RB8AC_JUMP_TABLE                        ; B441 20 AC B8
    .word clouds_256 ; 0
    .word clouds_256 ; 1
    .word clouds_256 ; 2
    .word palette_88 ; 3
    .word clouds_256 ; 4
    .word clouds_256 ; 5
    .word palette_89 ; 6
    .word clouds_256 ; 7
    .word clouds_256 ; 8
    .word palette_85 ; 9
    .word erase_congrats ; 10
    .word wait_256   ; 11
    .word LB483 ; 12
    .word lightning   ; 13
    .word ufo_descend ; 14
    .word ufo_256     ; 15
    .word LB512 ; 16
    .word LB496 ; 17
    .word LB4E0 ; 18
    .word LB589 ; 19
    .word LB4A6 ; 20
    .word ufo_256      ; 21
    .word ufo_ascend_1 ; 22
    .word LB48B ; 23
    .word ufo_ascend_2 ; 24
    .word wait_256 ; 25
    .word lightning  ; 26
    .word palette_8B ; 27
    .word LB512 ; 28
    .word LB4B6 ; 29
    .word LB565 ; 30

; unreachable
    rts                                         ; B482 60

; routine 12.
LB483:
    lda #$03                                    ; B483 A9 03
    sta L06F4_                                  ; B485 8D F4 06
    inc L5E_ENDING_STATE                        ; B488 E6 5E
    rts                                         ; B48A 60

; routine 23.
LB48B:
    jsr ufo_sprite                              ; B48B 20 69 B5
    lda #$04                                    ; B48E A9 04
    sta L06F0_                                  ; B490 8D F0 06
    inc L5E_ENDING_STATE                        ; B493 E6 5E
    rts                                         ; B495 60

; routine 17.
LB496:
    jsr ufo_sprite                              ; B496 20 69 B5
    lda #$01                                    ; B499 A9 01
    sta L06F3_                                  ; B49B 8D F3 06
    lda #$06                                    ; B49E A9 06
    sta L06F0_                                  ; B4A0 8D F0 06
    inc L5E_ENDING_STATE                        ; B4A3 E6 5E
    rts                                         ; B4A5 60

; routine 20.
LB4A6:
    jsr ufo_sprite                              ; B4A6 20 69 B5
    lda #$03                                    ; B4A9 A9 03
    sta L06F3_                                  ; B4AB 8D F3 06
    lda #$07                                    ; B4AE A9 07
    sta L06F0_                                  ; B4B0 8D F0 06
    inc L5E_ENDING_STATE                        ; B4B3 E6 5E
    rts                                         ; B4B5 60

; routine 29.
LB4B6:
    jsr ufo_sprite                              ; B4B6 20 69 B5
    lda #$0C                                    ; B4B9 A9 0C
    sta L06F5_                                  ; B4BB 8D F5 06
    inc L5E_ENDING_STATE                        ; B4BE E6 5E
    rts                                         ; B4C0 60

; routine 10.
erase_congrats:
    lda #$81                                    ; B4C1 A9 81
    sta L7F_CONGRATS_IDX                        ; B4C3 85 7F
    inc L5E_ENDING_STATE                        ; B4C5 E6 5E
    rts                                         ; B4C7 60

; unreachable
    lda #$41                                    ; B4C8 A9 41
    sta L7F_CONGRATS_IDX                        ; B4CA 85 7F
    inc L5E_ENDING_STATE                        ; B4CC E6 5E
    rts                                         ; B4CE 60

; routine 13.
lightning:
    lda L43_CLOCK                               ; B4CF A5 43
    cmp #$C0                                    ; B4D1 C9 C0
    bcc wait_256                                ; B4D3 90 1A
    and #$0F                                    ; B4D5 29 0F
    tax                                         ; B4D7 AA
    lda LA085,x ; #$85 or #$8A                  ; B4D8 BD 85 A0
    sta L66_PALETTE                             ; B4DB 85 66
    jmp wait_256                                ; B4DD 4C EF B4

; routine 18.
LB4E0:
    jsr ufo_with_beam                           ; B4E0 20 A7 B5
    jmp wait_256                                ; B4E3 4C EF B4

; routine 0,1,2,4,5,7,8.
clouds_256:
    jsr R9F28_CLOUD_SPRITES                     ; B4E6 20 28 9F
    jmp wait_256                                ; B4E9 4C EF B4

; routine 15.
ufo_256:
    jsr ufo_sprite                              ; B4EC 20 69 B5

; routine 11.
wait_256:
    lda L43_CLOCK                               ; B4EF A5 43
    if_eq                                       ; B4F1 D0 02
        inc L5E_ENDING_STATE                    ; B4F3 E6 5E
    end_if
    rts                                         ; B4F5 60

; routine 3.
palette_88:
    lda #$88                                    ; B4F6 A9 88
    sta L66_PALETTE                             ; B4F8 85 66
    inc L5E_ENDING_STATE                        ; B4FA E6 5E
    rts                                         ; B4FC 60

; routine 6.
palette_89:
    lda #$89                                    ; B4FD A9 89
    sta L66_PALETTE                             ; B4FF 85 66
    inc L5E_ENDING_STATE                        ; B501 E6 5E
    rts                                         ; B503 60

; routine 9.
palette_85:
    lda #$85                                    ; B504 A9 85
    sta L66_PALETTE                             ; B506 85 66
    inc L5E_ENDING_STATE                        ; B508 E6 5E
    rts                                         ; B50A 60

; routine 27.
palette_8B:
    lda #$8B                                    ; B50B A9 8B
    sta L66_PALETTE                             ; B50D 85 66
    inc L5E_ENDING_STATE                        ; B50F E6 5E
    rts                                         ; B511 60

; routine 16 and 28.
LB512:
    jsr ufo_sprite                              ; B512 20 69 B5
    lda #$87                                    ; B515 A9 87
    sta L66_PALETTE                             ; B517 85 66
    inc L5E_ENDING_STATE                        ; B519 E6 5E
    rts                                         ; B51B 60

; routine 14.
ufo_descend:
    lda L50_UFO_Y                               ; B51C A5 50
    cmp #$44                                    ; B51E C9 44
    if_eq                                       ; B520 D0 05
        inc L5E_ENDING_STATE                    ; B522 E6 5E
    else                                        ; B524 4C 2F B5
        lda L43_CLOCK                           ; B527 A5 43
        and #$03                                ; B529 29 03
        if_eq                                   ; B52B D0 02
            inc L50_UFO_Y                       ; B52D E6 50
        end_if
    end_if
    jsr ufo_sprite                              ; B52F 20 69 B5
    rts                                         ; B532 60

; routine 22.
ufo_ascend_1:
    lda L50_UFO_Y                               ; B533 A5 50
    cmp #$30                                    ; B535 C9 30
    if_eq                                       ; B537 D0 05
        inc L5E_ENDING_STATE                    ; B539 E6 5E
    else                                        ; B53B 4C 46 B5
        lda L43_CLOCK                           ; B53E A5 43
        and #$03                                ; B540 29 03
        if_eq                                   ; B542 D0 02
            dec L50_UFO_Y                       ; B544 C6 50
        end_if
    end_if
    jsr ufo_sprite                              ; B546 20 69 B5
    rts                                         ; B549 60

; routine 24.
ufo_ascend_2:
    lda L4F_UFO_X                               ; B54A A5 4F
    cmp #$E0                                    ; B54C C9 E0
    if_eq                                       ; B54E D0 05
        inc L5E_ENDING_STATE                    ; B550 E6 5E
    else                                        ; B552 4C 61 B5
        dec L4F_UFO_X                           ; B555 C6 4F
        dec L4F_UFO_X                           ; B557 C6 4F
        lda L43_CLOCK                           ; B559 A5 43
        and #$01                                ; B55B 29 01
        if_eq                                   ; B55D D0 02
            dec L50_UFO_Y                       ; B55F C6 50
        end_if
    end_if
    jsr ufo_sprite                              ; B561 20 69 B5
    rts                                         ; B564 60

; routine 30.
LB565:
    jsr RB371                                   ; B565 20 71 B3
    rts                                         ; B568 60

; Draw UFO sprite at coordinates (L4F_UFO_X, L50_UFO_Y)
; Toggle bottom part every 4 frames.
ufo_sprite:
    lda L4F_UFO_X                               ; B569 A5 4F
    if_ne                                       ; B56B F0 1B
        sta L44_SPRITE_X                        ; B56D 85 44
        lda L50_UFO_Y                           ; B56F A5 50
        sta L45_SPRITE_Y                        ; B571 85 45
        lda #$34 ; UFO top                      ; B573 A9 34
        sta L53_SPRITE_NUM                      ; B575 85 53
        jsr R88F6_SPRITE                        ; B577 20 F6 88
        lda L43_CLOCK                           ; B57A A5 43
        and #$04                                ; B57C 29 04
        lsr a                                   ; B57E 4A
        lsr a                                   ; B57F 4A
        add #$35 ; UFO bottom                   ; B580 18 69 35
        sta L53_SPRITE_NUM                      ; B583 85 53
        jsr R88F6_SPRITE                        ; B585 20 F6 88
    end_if
    rts                                         ; B588 60

; routine 19.
LB589:
    jsr ufo_with_beam                           ; B589 20 A7 B5
    lda L39_V1_Y                                ; B58C A5 39
    sub #$24                                    ; B58E 38 E9 24
    cmp L50_UFO_Y                               ; B591 C5 50
    if_cc                                       ; B593 B0 09
        lda #$F8                                ; B595 A9 F8
        sta L39_V1_Y                            ; B597 85 39
        inc L5E_ENDING_STATE                    ; B599 E6 5E
    else                                        ; B59B 4C A6 B5
        lda L43_CLOCK                           ; B59E A5 43
        and #$03                                ; B5A0 29 03
        if_eq                                   ; B5A2 D0 02
            dec L39_V1_Y                        ; B5A4 C6 39
        end_if
    end_if
    rts                                         ; B5A6 60

; Draw UFO sprite with flashing light beam below.
ufo_with_beam:
    jsr ufo_sprite                              ; B5A7 20 69 B5
    lda L43_CLOCK                               ; B5AA A5 43
    and #$01                                    ; B5AC 29 01
    if_ne                                       ; B5AE F0 07
        lda #$37 ; UFO beam                     ; B5B0 A9 37
        sta L53_SPRITE_NUM                      ; B5B2 85 53
        jsr R88F6_SPRITE                        ; B5B4 20 F6 88
    end_if
    rts                                         ; B5B7 60

.endscope

; ----------------------------------------------------------------------------
; Display cutscene sprite.
RB5B8:
    begin
        ; test for cutscene
        lda L8B_SPEED                           ; B5B8 A5 8B
        asl a                                   ; B5BA 0A
        asl a                                   ; B5BB 0A
        asl a                                   ; B5BC 0A
        asl a                                   ; B5BD 0A
        asl a                                   ; B5BE 0A
        add L96_LEVEL                           ; B5BF 18 65 96
        tax                                     ; B5C2 AA
        lda L9FF8,x                             ; B5C3 BD F8 9F
        if_eq                                   ; B5C6 D0 03
            jmp break                           ; B5C8 4C 53 B6
        end_if
        lda L3D_V3_Y                            ; B5CB A5 3D
        cmp #$04                                ; B5CD C9 04
        if_eq                                   ; B5CF D0 06
            ; erase congratulations message
            lda #$81                            ; B5D1 A9 81
            sta L7F_CONGRATS_IDX                ; B5D3 85 7F
            inc L3D_V3_Y                        ; B5D5 E6 3D
        end_if
        lda L3D_V3_Y                            ; B5D7 A5 3D
        cmp #$06                                ; B5D9 C9 06
        if_ne                                   ; B5DB F0 2E
            lda L43_CLOCK                       ; B5DD A5 43
            if_ne                               ; B5DF F0 03
                jmp break                       ; B5E1 4C 53 B6
            end_if
            inc L3D_V3_Y                        ; B5E4 E6 3D
            lda L3D_V3_Y                        ; B5E6 A5 3D
            cmp #$02                            ; B5E8 C9 02
            if_ne                               ; B5EA F0 03
                jmp break                       ; B5EC 4C 53 B6
            end_if
            lda L8B_SPEED                       ; B5EF A5 8B
            asl a                               ; B5F1 0A
            asl a                               ; B5F2 0A
            asl a                               ; B5F3 0A
            asl a                               ; B5F4 0A
            asl a                               ; B5F5 0A
            add L96_LEVEL                       ; B5F6 18 65 96
            tax                                 ; B5F9 AA
            lda L9FF8,x                         ; B5FA BD F8 9F
            ; MED: 6 -> 7, 11 -> 5, 15 -> 6, 21 -> 8
            ; HI: 6 -> 2, 11 -> 1, 15 -> 4
            ; 1-8
            sta L3A_V2_X                        ; B5FD 85 3A
            lda L3A_V2_X                        ; B5FF A5 3A
            tax                                 ; B601 AA
            lda LA06A,x                         ; B602 BD 6A A0
            ; F0 for x=1,3,5,6; 0 otherwise
            sta L3B_V2_Y                        ; B605 85 3B
            lda #$50                            ; B607 A9 50
            sta L3C_V3_X                        ; B609 85 3C
        end_if
        ldx L3A_V2_X                            ; B60B A6 3A
        lda LA073,x                             ; B60D BD 73 A0
        sta L47_TEMP                            ; B610 85 47
        lda L43_CLOCK                           ; B612 A5 43
        and L47_TEMP                            ; B614 25 47
        if_eq                                   ; B616 D0 13
            lda LA07C,x                         ; B618 BD 7C A0
            add L3B_V2_Y                        ; B61B 18 65 3B
            sta L3B_V2_Y                        ; B61E 85 3B
            cmp #$F1                            ; B620 C9 F1
            if_cs                               ; B622 90 07
                lda #$F8                        ; B624 A9 F8
                sta L3B_V2_Y                    ; B626 85 3B
                jmp break                       ; B628 4C 53 B6
            end_if
        end_if
        lda LA058,x                             ; B62B BD 58 A0
        sta L47_TEMP                            ; B62E 85 47
        lda L43_CLOCK                           ; B630 A5 43
        and L47_TEMP                            ; B632 25 47
        if_eq                                   ; B634 D0 08
            lda L3E_VIRUS_CYCLE                 ; B636 A5 3E
            eor #$01                            ; B638 49 01
            and #$01                            ; B63A 29 01
            sta L3E_VIRUS_CYCLE                 ; B63C 85 3E
        end_if
        lda L3B_V2_Y                            ; B63E A5 3B
        sta L44_SPRITE_X                        ; B640 85 44
        lda L3C_V3_X                            ; B642 A5 3C
        sta L45_SPRITE_Y                        ; B644 85 45
        ldx L3A_V2_X                            ; B646 A6 3A
        lda LA061,x                             ; B648 BD 61 A0
        add L3E_VIRUS_CYCLE                     ; B64B 18 65 3E
        sta L53_SPRITE_NUM                      ; B64E 85 53
        jsr R88F6_SPRITE                        ; B650 20 F6 88
        ; $38,$3A,$3C,$3E,$40,$42,$44,$46
    end
    rts                                         ; B653 60

; ----------------------------------------------------------------------------
; Finish frame
; Draw sprites (if needed), call audio routine, wait for NMI.
RB654_NEXT_FRAME:
    lda L5D_SHOW_LEVEL                          ; B654 A5 5D
    if_ne                                       ; B656 F0 03
        jsr R87A2_LEVEL_SPRITES                 ; B658 20 A2 87
    end_if
    ; top-level audio routine
    jsr RFFD0                                   ; B65B 20 D0 FF
    lda #$00                                    ; B65E A9 00
    sta L33_NMI_SIGNAL                          ; B660 85 33
    ; busy wait until NMI writes to L33_
    loop
        lda L33_NMI_SIGNAL                      ; B662 A5 33
    while_eq                                    ; B664 F0 FC
    lda #$FF                                    ; B666 A9 FF
    ldx #$02                                    ; B668 A2 02
    ldy #$02                                    ; B66A A0 02
    jsr RB894_FILL_PAGES ; page 2 with FF       ; B66C 20 94 B8
    rts                                         ; B66F 60

; ----------------------------------------------------------------------------
; Finish frame
; Call audio routine, wait for NMI.
RB670_NEXT_FRAME:
    ; top-level audio routine
    jsr RFFD0                                   ; B670 20 D0 FF
    lda #$00                                    ; B673 A9 00
    sta L33_NMI_SIGNAL                          ; B675 85 33
    ; busy wait until NMI writes to L33_
    loop
        lda L33_NMI_SIGNAL                      ; B677 A5 33
    while_eq                                    ; B679 F0 FC
    rts                                         ; B67B 60

; ----------------------------------------------------------------------------
; Next frame, and turn off background and sprites.
RB67C_DISABLE_VIDEO:
    jsr RB670_NEXT_FRAME                        ; B67C 20 70 B6
    lda LFE_PPUMASK                             ; B67F A5 FE
    and #$E1                                    ; B681 29 E1
LB683:
    sta L2001_PPUMASK                           ; B683 8D 01 20
    sta LFE_PPUMASK                             ; B686 85 FE
    rts                                         ; B688 60

; Next frame, and turn on background and sprites.
RB689_ENABLE_VIDEO:
    jsr RB670_NEXT_FRAME                        ; B689 20 70 B6
    jsr RB6B4                                   ; B68C 20 B4 B6
    lda LFE_PPUMASK                             ; B68F A5 FE
    ora #$1E                                    ; B691 09 1E
    bne LB683 ; always branch                   ; B693 D0 EE

; ----------------------------------------------------------------------------
; Wait for VBLANK, and enable PPU NMI.
RB695_ENABLE_NMI:
    loop
        lda L2002_PPUSTATUS                     ; B695 AD 02 20
        and #$80                                ; B698 29 80
    while_ne                                    ; B69A D0 F9
    lda LFF_PPUCTRL                             ; B69C A5 FF
    ora #$80                                    ; B69E 09 80
    bne LB6A6 ; always                          ; B6A0 D0 04

; Disable PPU NMI.
RB6A2_DISABLE_NMI:
    lda LFF_PPUCTRL                             ; B6A2 A5 FF
    and #$7F                                    ; B6A4 29 7F
LB6A6:
    sta L2000_PPUCTRL                           ; B6A6 8D 00 20
    sta LFF_PPUCTRL                             ; B6A9 85 FF
    rts                                         ; B6AB 60

; ----------------------------------------------------------------------------
; Input in A: PPU page of nametable
; Fill nametable with #$FF, and attributes with #$00.
RB6AC_INIT_NAMETABLE:
    ldx #$FF                                    ; B6AC A2 FF
    ldy #$00                                    ; B6AE A0 00
    jsr RB846_FILL_PPU_PAGES                    ; B6B0 20 46 B8
    rts                                         ; B6B3 60

; ----------------------------------------------------------------------------
RB6B4:
    lda #$00                                    ; B6B4 A9 00
    sta L2005_PPUSCROLL                         ; B6B6 8D 05 20
    sta L2005_PPUSCROLL                         ; B6B9 8D 05 20
    lda LFF_PPUCTRL                             ; B6BC A5 FF
    sta L2000_PPUCTRL                           ; B6BE 8D 00 20
    rts                                         ; B6C1 60

; ----------------------------------------------------------------------------

; Non-standard subroutine, it takes an inline pointer argument.
; Subroutine RB74B copies the pointer argument to L00_/L01_, and adjusts
; the return address.

; $80 (or any other byte with bit 7 set) indicates the end of the program.
; $4C followed by a 2-byte address indicates a call to a subroutine.
; $60 indicates a return from a subroutine.
; Otherwise the first two bytes are a PPU address (high byte first).
; Following the address is a draw sequence:
; Bits 0-5: Length of sequence (1 to 63, or all 0s = 64)
; Bit 6 = 0: Non-repeated data (followed by sequence of bytes)
; Bit 6 = 1: Repeated byte (followed by one data byte, to be repeated n times)
; Bit 7 = 0: Horizontal sequence (increment PPU address by 1)
; Bit 7 = 1: Vertical sequence (increment PPU address by 32)

RB6C2_PRINT:
.scope
    jsr RB74B                                   ; B6C2 20 4B B7
    jmp read_byte                               ; B6C5 4C 1C B7

normal_byte:
; case A = anything 00-7F except 60 or 4C
; Y = 0
    pha                                         ; B6C8 48
        sta L2006_PPUADDR                       ; B6C9 8D 06 20    ;p[0] -> $2006 (PPU addr hi)
        iny                                     ; B6CC C8          ;Y=1
        lda ($00),y                             ; B6CD B1 00       ;A=p[1]
        sta L2006_PPUADDR                       ; B6CF 8D 06 20    ;p[1] -> $2006 (PPU addr lo)
        iny                                     ; B6D2 C8          ;Y=2
        lda ($00),y                             ; B6D3 B1 00       ;A = p[2] = abcdefgh
        asl a                                   ; B6D5 0A          ;A = p[2]*2 = bcdefgh0
        pha                                     ; B6D6 48          ;push p[2]*2
            lda LFF_PPUCTRL                     ; B6D7 A5 FF
            ; set PPUCTRL bit 2
            ; (auto-increment PPUADDR by 32)
            ora #$04                            ; B6D9 09 04       ;copy high bit of p[2] (i.e. 'a') to bit 2 of $ff
            if_cc                               ; B6DB B0 02
                ; clear PPUCTRL bit 2
                ; (auto-increment PPUADDR by 1)
                and #$FB                        ; B6DD 29 FB
            end_if
            sta L2000_PPUCTRL                   ; B6DF 8D 00 20
            sta LFF_PPUCTRL                     ; B6E2 85 FF
        pla                                     ; B6E4 68          ;A = p[2]*2 = bcdefgh0
        asl a                                   ; B6E5 0A          ;A = p[2]*4 = cdefgh00 (C = b)
        php                                     ; B6E6 08
            if_cs                               ; B6E7 90 03       ;if 'b'
                ora #$02                        ; B6E9 09 02       ;A = cdefghb0
                iny                             ; B6EB C8          ;Y = 2+b
            end_if
        plp                                     ; B6EC 28
        clc                                     ; B6ED 18
        if_eq                                   ; B6EE D0 01       ;C = (if cdefgh = 0 then 0 else 1)
            sec                                 ; B6F0 38
        end_if
        ror a                                   ; B6F1 6A          ;A = 0cdefghb OR 1000000b, C=0
        lsr a                                   ; B6F2 4A          ;A = 00cdefgh OR 01000000, C=b
        tax                                     ; B6F3 AA          ;X = 00cdefgh OR 01000000, C=b
        loop                                                       ;bits 5:0 of p[2] determine the count.
            if_cc                               ; B6F4 B0 01       ;bit 6 of p[2] determines whether it is a repeated value
                iny                             ; B6F6 C8
            end_if
            lda ($00),y                         ; B6F7 B1 00
            sta L2007_PPUDATA                   ; B6F9 8D 07 20    ;Copy value to PPU data
            dex                                 ; B6FC CA
        while_ne                                ; B6FD D0 F5
    pla                                         ; B6FF 68          ;a=p[0]
    cmp #$3F                                    ; B700 C9 3F       ;if PPU addr hi = $3f
    if_eq                                       ; B702 D0 0C
        sta L2006_PPUADDR                       ; B704 8D 06 20    ;PPU addr = $3f00
        stx L2006_PPUADDR                       ; B707 8E 06 20
        stx L2006_PPUADDR                       ; B70A 8E 06 20    ;PPU addr = $0000
        stx L2006_PPUADDR                       ; B70D 8E 06 20
    end_if

; Increment $00/$01 by Y+1.
next_byte:
    sec                                         ; B710 38
    tya                                         ; B711 98
    adc L00_                                    ; B712 65 00
    sta L00_                                    ; B714 85 00
    lda #$00                                    ; B716 A9 00
    adc L01_                                    ; B718 65 01
    sta L01_                                    ; B71A 85 01

; Interpret printing program at address pointed to by $00/$01.
read_byte:
    ldx L2002_PPUSTATUS                         ; B71C AE 02 20
    ldy #$00                                    ; B71F A0 00
    lda ($00),y                                 ; B721 B1 00
    if_mi                                       ; B723 10 01
        rts                                     ; B725 60
    end_if

    cmp #$60                                    ; B726 C9 60
    if_eq                                       ; B728 D0 0A
        ; case 60 (RTS):
        ; pull $00/$01 from the stack,
        ; increment $00/$01 by 3, and repeat.
        pla                                     ; B72A 68
        sta $01                                 ; B72B 85 01
        pla                                     ; B72D 68
        sta $00                                 ; B72E 85 00
        ldy #$02                                ; B730 A0 02
        bne next_byte ; always                  ; B732 D0 DC
    end_if

    cmp #$4C                                    ; B734 C9 4C
    bne normal_byte                             ; B736 D0 90

; case 4C (JSR):
; push $00/$01 to the stack
; copy the following two bytes to $00/$01.
    lda $00                                     ; B738 A5 00
    pha                                         ; B73A 48
    lda $01                                     ; B73B A5 01
    pha                                         ; B73D 48
    iny                                         ; B73E C8
    lda ($00),y                                 ; B73F B1 00
    tax                                         ; B741 AA
    iny                                         ; B742 C8
    lda ($00),y                                 ; B743 B1 00
    sta $01                                     ; B745 85 01
    stx $00                                     ; B747 86 00
    bcs read_byte ; always                      ; B749 B0 D1

RB74B:
    tsx                                         ; B74B BA
    lda $0103,x                                 ; B74C BD 03 01
    sta L05_                                    ; B74F 85 05
    lda $0104,x                                 ; B751 BD 04 01
    sta L06_                                    ; B754 85 06
    ldy #$01                                    ; B756 A0 01
    lda (L05_),y                                ; B758 B1 05
    sta $00                                     ; B75A 85 00
    iny                                         ; B75C C8
    lda (L05_),y                                ; B75D B1 05
    sta $01                                     ; B75F 85 01
    clc                                         ; B761 18
    lda #$02                                    ; B762 A9 02
    adc L05_                                    ; B764 65 05
    sta $0103,x                                 ; B766 9D 03 01
    lda #$00                                    ; B769 A9 00
    adc L06_                                    ; B76B 65 06
    sta $0104,x                                 ; B76D 9D 04 01
    rts                                         ; B770 60
.endscope

; ----------------------------------------------------------------------------
; Advance LFSR.
; Input X and Y
; Reads bytes X and X+1 in zero page.
; If they differ in bit 1 (#$02) then set carry.
; Call ROR on Y bytes starting at X.
; (Always called with X = #L17_LFSR_0 and Y = #2.)
; This is the same LFSR as RD295.
RB771_STEP_LFSR:
    lda $00,x                                   ; B771 B5 00
    and #$02                                    ; B773 29 02
    sta L00_                                    ; B775 85 00
    lda $01,x                                   ; B777 B5 01
    and #$02                                    ; B779 29 02
    eor $00                                     ; B77B 45 00
    clc                                         ; B77D 18
    if_ne                                       ; B77E F0 01
        sec                                     ; B780 38
    end_if
    loop
        ror $00,x                               ; B781 76 00
        inx                                     ; B783 E8
        dey                                     ; B784 88
    while_ne                                    ; B785 D0 FA
    rts                                         ; B787 60

; ----------------------------------------------------------------------------
; Initiate DMA transfer of Object Attribute Memory from L0200_OAM to PPU.
; Called by NMI handler.
RB788_OAM_DMA:
    lda #<L0200_OAM                             ; B788 A9 00
    sta L2003_OAMADDR                           ; B78A 8D 03 20
    lda #>L0200_OAM                             ; B78D A9 02
    sta L4014_OAMDMA                            ; B78F 8D 14 40
    rts                                         ; B792 60

; ----------------------------------------------------------------------------
; Read controller inputs.
; LF5_P1_INPUT_NEW = controller 1 button state.
; LF6_P2_INPUT_NEW = controller 2 button state.
; $00 = expansion port controller 1 button state.
; $01 = expansion port controller 2 button state.
RB793_READ_CONTROLLERS:
    ldx LFB_                                    ; B793 A6 FB
    inx                                         ; B795 E8
    stx L4016_                                  ; B796 8E 16 40
    dex                                         ; B799 CA
    stx L4016_                                  ; B79A 8E 16 40
    ldx #$08                                    ; B79D A2 08
    loop
        lda L4016_                              ; B79F AD 16 40
        lsr a                                   ; B7A2 4A
        rol LF5_P1_INPUT_NEW                    ; B7A3 26 F5
        lsr a                                   ; B7A5 4A
        rol L00_                                ; B7A6 26 00
        lda L4017_                              ; B7A8 AD 17 40
        lsr a                                   ; B7AB 4A
        rol LF6_P2_INPUT_NEW                    ; B7AC 26 F6
        lsr a                                   ; B7AE 4A
        rol L01_                                ; B7AF 26 01
        dex                                     ; B7B1 CA
    while_ne                                    ; B7B2 D0 EB
    rts                                         ; B7B4 60

; ----------------------------------------------------------------------------
; Combine controller states from normal and expansion port controllers.
; Normal controller states in LF5_P1_INPUT_NEW/LF6_P2_INPUT_NEW
; Expansion controller states in $00/$01
RB7B5_COMBINE_CONTROLLERS:
    lda L00_                                    ; B7B5 A5 00
    ora LF5_P1_INPUT_NEW                        ; B7B7 05 F5
    sta LF5_P1_INPUT_NEW                        ; B7B9 85 F5
    lda L01_                                    ; B7BB A5 01
    ora LF6_P2_INPUT_NEW                        ; B7BD 05 F6
    sta LF6_P2_INPUT_NEW                        ; B7BF 85 F6
    rts                                         ; B7C1 60

; ----------------------------------------------------------------------------
; unreachable
    jsr RB793_READ_CONTROLLERS                  ; B7C2 20 93 B7
    beq LB7E7                                   ; B7C5 F0 20

; ----------------------------------------------------------------------------
; Read controller inputs twice and bitwise-AND them together to avoid glitches.
; XOR old and new and AND with new to get edge detection in LF5_P1_INPUT_NEW/LF6_P2_INPUT_NEW.
RB7C7_GET_INPUT:
    jsr RB793_READ_CONTROLLERS                  ; B7C7 20 93 B7
    ; read controller state into LF5_P1_INPUT_NEW,LF6_P2_INPUT_NEW
    jsr RB7B5_COMBINE_CONTROLLERS               ; B7CA 20 B5 B7
    lda LF5_P1_INPUT_NEW                        ; B7CD A5 F5
    sta L48_TEMP                                ; B7CF 85 48
    lda LF6_P2_INPUT_NEW                        ; B7D1 A5 F6
    sta L49_TEMP                                ; B7D3 85 49
    jsr RB793_READ_CONTROLLERS                  ; B7D5 20 93 B7  ; read controller state again
    jsr RB7B5_COMBINE_CONTROLLERS               ; B7D8 20 B5 B7
    lda LF5_P1_INPUT_NEW                        ; B7DB A5 F5
    and L48_TEMP                                ; B7DD 25 48
    sta LF5_P1_INPUT_NEW                        ; B7DF 85 F5
    lda LF6_P2_INPUT_NEW                        ; B7E1 A5 F6
    and L49_TEMP                                ; B7E3 25 49
    sta LF6_P2_INPUT_NEW                        ; B7E5 85 F6
LB7E7:
    ldx #$01                                    ; B7E7 A2 01
    loop
        lda LF5_P1_INPUT_NEW,x                  ; B7E9 B5 F5
        tay                                     ; B7EB A8
        eor LF7_P1_INPUT_OLD,x                  ; B7EC 55 F7
        and LF5_P1_INPUT_NEW,x                  ; B7EE 35 F5
        sta LF5_P1_INPUT_NEW,x                  ; B7F0 95 F5
        sty LF7_P1_INPUT_OLD,x                  ; B7F2 94 F7
        dex                                     ; B7F4 CA
    while_pl                                    ; B7F5 10 F2
    rts                                         ; B7F7 60

; ----------------------------------------------------------------------------
; unreachable
    jsr RB793_READ_CONTROLLERS                  ; B7F8 20 93 B7
    loop
        loop
            ldy LF5_P1_INPUT_NEW                ; B7FB A4 F5
            lda LF6_P2_INPUT_NEW                ; B7FD A5 F6
            pha                                 ; B7FF 48
                jsr RB793_READ_CONTROLLERS      ; B800 20 93 B7
            pla                                 ; B803 68
            cmp LF6_P2_INPUT_NEW                ; B804 C5 F6
        while_ne                                ; B806 D0 F3
        cpy LF5_P1_INPUT_NEW                    ; B808 C4 F5
    while_ne                                    ; B80A D0 EF
    beq LB7E7                                   ; B80C F0 D9
    jsr RB793_READ_CONTROLLERS                  ; B80E 20 93 B7
    jsr RB7B5_COMBINE_CONTROLLERS               ; B811 20 B5 B7
    loop
        loop
            ldy LF5_P1_INPUT_NEW                ; B814 A4 F5
            lda LF6_P2_INPUT_NEW                ; B816 A5 F6
            pha                                 ; B818 48
                jsr RB793_READ_CONTROLLERS      ; B819 20 93 B7
                jsr RB7B5_COMBINE_CONTROLLERS   ; B81C 20 B5 B7
            pla                                 ; B81F 68
            cmp LF6_P2_INPUT_NEW                ; B820 C5 F6
        while_ne                                ; B822 D0 F0
        cpy LF5_P1_INPUT_NEW                    ; B824 C4 F5
    while_ne                                    ; B826 D0 EC
    beq LB7E7                                   ; B828 F0 BD
    jsr RB793_READ_CONTROLLERS                  ; B82A 20 93 B7
    lda L00_                                    ; B82D A5 00
    sta LF7_P1_INPUT_OLD                        ; B82F 85 F7
    lda L01_                                    ; B831 A5 01
    sta LF8_P2_INPUT_OLD                        ; B833 85 F8
    ldx #$03                                    ; B835 A2 03
    loop
        lda LF5_P1_INPUT_NEW,x                  ; B837 B5 F5
        tay                                     ; B839 A8
        eor LF1_,x                              ; B83A 55 F1
        and LF5_P1_INPUT_NEW,x                  ; B83C 35 F5
        sta LF5_P1_INPUT_NEW,x                  ; B83E 95 F5
        sty LF1_,x                              ; B840 94 F1
        dex                                     ; B842 CA
    while_pl                                    ; B843 10 F2
    rts                                         ; B845 60

; ----------------------------------------------------------------------------
; Input A = Starting PPU page
; Input X = Value to fill
; Input Y = Number of pages
; If A < #$20: Fill Y pages with X, starting at page A.
; If A ≥ #$20: Fill 4 pages with X, starting at A; also fill nametable attributes with Y.
; Called once in RB6AC_INIT_NAMETABLE.
RB846_FILL_PPU_PAGES:
    sta L00_                                    ; B846 85 00
    stx L01_                                    ; B848 86 01
    sty L02_                                    ; B84A 84 02
    lda L2002_PPUSTATUS                         ; B84C AD 02 20
    ; clear PPUCTRL bit 2
    ; (auto-increment PPUADDR by 1)
    lda LFF_PPUCTRL                             ; B84F A5 FF
    and #$FB                                    ; B851 29 FB
    sta L2000_PPUCTRL                           ; B853 8D 00 20
    sta LFF_PPUCTRL                             ; B856 85 FF
    ; PPU page A
    lda L00_                                     ; B858 A5 00
    sta L2006_PPUADDR                           ; B85A 8D 06 20
    ldy #$00                                    ; B85D A0 00
    sty L2006_PPUADDR                           ; B85F 8C 06 20
    ldx #$04                                    ; B862 A2 04
    cmp #$20                                    ; B864 C9 20
    if_cc                                       ; B866 B0 02
        ldx L02_                                ; B868 A6 02
    end_if
    ; num_pages = a<#$20 ? y : 4
    ldy #$00                                    ; B86A A0 00
    lda L01_                                    ; B86C A5 01
    loop
        loop
            sta L2007_PPUDATA                   ; B86E 8D 07 20
            dey                                 ; B871 88
        while_ne                                ; B872 D0 FA
        dex                                     ; B874 CA
    while_ne                                    ; B875 D0 F7
    ldy L02_                                    ; B877 A4 02
    lda L00_                                    ; B879 A5 00
    cmp #$20                                    ; B87B C9 20
    if_cs                                       ; B87D 90 12
        ; PPU address $03C0
        adc #$02                                ; B87F 69 02
        sta L2006_PPUADDR                       ; B881 8D 06 20
        lda #$C0                                ; B884 A9 C0
        sta L2006_PPUADDR                       ; B886 8D 06 20
        ldx #$40                                ; B889 A2 40
        loop
            sty L2007_PPUDATA                   ; B88B 8C 07 20
            dex                                 ; B88E CA
        while_ne                                ; B88F D0 FA
    end_if
    ldx L01_                                    ; B891 A6 01
    rts                                         ; B893 60

; ----------------------------------------------------------------------------
; Input A X Y
; Fill every byte in pages X through Y with A.
; Called with X=4, Y=5 and X=Y=2.
RB894_FILL_PAGES:
    pha                                         ; B894 48
        txa                                     ; B895 8A
        sty L01_                                ; B896 84 01
        clc                                     ; B898 18
        sbc L01_                                ; B899 E5 01
        tax                                     ; B89B AA
    pla                                         ; B89C 68
    ldy #$00                                    ; B89D A0 00
    sty L00_                                    ; B89F 84 00
    loop
        loop
            sta ($00),y                         ; B8A1 91 00
            dey                                 ; B8A3 88
        while_ne                                ; B8A4 D0 FB
        dec L01_                                ; B8A6 C6 01
        inx                                     ; B8A8 E8
    while_ne                                    ; B8A9 D0 F6
    rts                                         ; B8AB 60

; ----------------------------------------------------------------------------
; input A: index to jump table
; jump table vectors appear immediately after JSR instruction
; copies vector to L00_/L01_ and jumps to it
RB8AC_JUMP_TABLE:
    asl a                                       ; B8AC 0A
    tay                                         ; B8AD A8
    iny                                         ; B8AE C8
    pla                                         ; B8AF 68
    sta L00_                                    ; B8B0 85 00
    pla                                         ; B8B2 68
    sta L01_                                    ; B8B3 85 01
    lda ($00),y                                 ; B8B5 B1 00
    tax                                         ; B8B7 AA
    iny                                         ; B8B8 C8
    lda ($00),y                                 ; B8B9 B1 00
    sta L01_                                    ; B8BB 85 01
    stx L00_                                    ; B8BD 86 00
    jmp ($00)                                   ; B8BF 6C 00 00

; ----------------------------------------------------------------------------
; unreachable?
    sei                                         ; B8C2 78
    inc L8000                                   ; B8C3 EE 00 80
    lda #$1A                                    ; B8C6 A9 1A
    jsr RB8CC ; Set mapper control register.    ; B8C8 20 CC B8
    rts                                         ; B8CB 60

; ----------------------------------------------------------------------------
; Set MMC1 mapper Control register to A.
RB8CC:
    sta $9FFF                                   ; B8CC 8D FF 9F
    lsr a                                       ; B8CF 4A
    sta $9FFF                                   ; B8D0 8D FF 9F
    lsr a                                       ; B8D3 4A
    sta $9FFF                                   ; B8D4 8D FF 9F
    lsr a                                       ; B8D7 4A
    sta $9FFF                                   ; B8D8 8D FF 9F
    lsr a                                       ; B8DB 4A
    sta $9FFF                                   ; B8DC 8D FF 9F
    rts                                         ; B8DF 60

; ----------------------------------------------------------------------------
; Set MMC1 mapper CHR bank 0 to A.
RB8E0:
    sta $BFFF                                   ; B8E0 8D FF BF
    lsr a                                       ; B8E3 4A
    sta $BFFF                                   ; B8E4 8D FF BF
    lsr a                                       ; B8E7 4A
    sta $BFFF                                   ; B8E8 8D FF BF
    lsr a                                       ; B8EB 4A
    sta $BFFF                                   ; B8EC 8D FF BF
    lsr a                                       ; B8EF 4A
    sta $BFFF                                   ; B8F0 8D FF BF
    rts                                         ; B8F3 60

; ----------------------------------------------------------------------------
; Set MMC1 mapper CHR bank 1 to A.
RB8F4:
    sta $DFFF                                   ; B8F4 8D FF DF
    lsr a                                       ; B8F7 4A
    sta $DFFF                                   ; B8F8 8D FF DF
    lsr a                                       ; B8FB 4A
    sta $DFFF                                   ; B8FC 8D FF DF
    lsr a                                       ; B8FF 4A
    sta $DFFF                                   ; B900 8D FF DF
    lsr a                                       ; B903 4A
    sta $DFFF                                   ; B904 8D FF DF
    rts                                         ; B907 60

; ----------------------------------------------------------------------------
; Set MMC1 mapper PRG bank to A.
RB908:
    sta $FFF0                                   ; B908 8D F0 FF
    lsr a                                       ; B90B 4A
    sta $FFF0                                   ; B90C 8D F0 FF
    lsr a                                       ; B90F 4A
    sta $FFF0                                   ; B910 8D F0 FF
    lsr a                                       ; B913 4A
    sta $FFF0                                   ; B914 8D F0 FF
    lsr a                                       ; B917 4A
    sta $FFF0                                   ; B918 8D F0 FF
    rts                                         ; B91B 60

; ----------------------------------------------------------------------------
; Argument to RB6C2_PRINT
; Title screen
; 1024 bytes of data for PPU addresses $2000 to $23FF
; 96 bytes of chunk headers (32 at 3 bytes each)
LB91C:
    .byte $20,$00                           ; PPU address $2000
    .byte $20                               ; 32 bytes non-repeated
    .byte $FD,$FE,$FD,$FE,$FD,$FE,$FD,$FE
    .byte $FD,$FE,$FD,$FE,$FD,$FE,$FD,$FE
    .byte $FD,$FE,$FD,$FE,$FD,$FE,$FD,$FE
    .byte $FD,$FE,$FD,$FE,$FD,$FE,$FD,$FE
    .byte $20,$20                           ; PPU address $2020
    .byte $20                               ; 32 bytes non-repeated
    .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
    .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
    .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
    .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
    .byte $20,$40                           ; PPU address $2040
    .byte $20                               ; 32 bytes non-repeated
    .byte $FD,$FE,$FD,$FE,$FD,$FE,$FD,$FE
    .byte $FD,$FE,$FD,$FE,$FD,$FE,$FD,$FE
    .byte $FD,$FE,$FD,$FE,$FD,$FE,$FD,$FE
    .byte $FD,$FE,$FD,$FE,$FD,$FE,$FD,$FE
    .byte $20,$60                           ; PPU address $2060
    .byte $20                               ; 32 bytes non-repeated
    .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
    .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
    .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
    .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
    .byte $20,$80                           ; PPU address $2080
    .byte $20                               ; 32 bytes non-repeated
    .byte $FD,$FE,$FD,$FE,$FD,$FE,$FD,$FE
    .byte $FD,$FE,$FD,$FE,$FD,$FE,$FD,$FE
    .byte $FD,$FE,$FD,$FE,$FD,$FE,$FD,$FE
    .byte $FD,$FE,$FD,$FE,$FD,$FE,$FD,$FE
    .byte $20,$A0                           ; PPU address $20A0
    .byte $20                               ; 32 bytes non-repeated
    .byte $FE,$FD,$FE,$FD,$20,$21,$40,$40
    .byte $40,$40,$40,$40,$40,$40,$40,$40
    .byte $43,$40,$40,$40,$40,$40,$40,$40
    .byte $40,$40,$30,$31,$FE,$FD,$FE,$FD
    .byte $20,$C0                           ; PPU address $20C0
    .byte $20                               ; 32 bytes non-repeated
    .byte $FD,$FE,$FD,$22,$F7,$F8,$45,$46
    .byte $46,$46,$46,$46,$46,$46,$46,$46
    .byte $47,$46,$46,$46,$46,$46,$46,$46
    .byte $46,$48,$B6,$B6,$33,$FE,$FD,$FE
    .byte $20,$E0                           ; PPU address $20E0
    .byte $20                               ; 32 bytes non-repeated
    .byte $FE,$FD,$24,$25,$F9,$51,$52,$53
    .byte $54,$55,$56,$57,$58,$59,$5A,$5B
    .byte $5C,$5D,$5E,$5F,$B0,$B1,$B2,$B3
    .byte $B4,$B5,$B6,$B6,$34,$35,$FE,$FD
    .byte $21,$00
    .byte $20
    .byte $FD,$FE,$26,$FC,$60,$61,$62,$63
    .byte $64,$65,$66,$67,$68,$69,$6A,$6B
    .byte $6C,$6D,$6E,$6F,$C0,$C1,$C2,$C3
    .byte $C4,$C5,$C6,$0E,$0F,$36,$FD,$FE
    .byte $21,$20
    .byte $20
    .byte $FE,$FD,$27,$FC,$70,$71,$72,$73
    .byte $74,$75,$76,$77,$78,$79,$7A,$7B
    .byte $7C,$7D,$7E,$7F,$D0,$D1,$D2,$D3
    .byte $D4,$D5,$D6,$FC,$FC,$37,$FE,$FD
    .byte $21,$40,$20
    .byte $FD,$FE,$28,$FC,$80,$81,$82,$83
    .byte $84,$85,$86,$87,$88,$89,$8A,$8B
    .byte $8C,$8D,$8E,$8F,$E0,$E1,$E2,$E3
    .byte $E4,$E5,$E6,$FC,$FC,$38,$FD,$FE
    .byte $21,$60,$20
    .byte $FE,$FD,$29,$FC,$90,$91,$92,$93
    .byte $94,$95,$96,$97,$98,$99,$9A,$9B
    .byte $9C,$9D,$9E,$9F,$F0,$F1,$F2,$F3
    .byte $F4,$F5,$F6,$FC,$FC,$39,$FE,$FD
    .byte $21,$80,$20
    .byte $FD,$FE,$2A,$2B,$A0,$A1,$A2,$A3
    .byte $A4,$A5,$A6,$A7,$A8,$A9,$AA,$AB
    .byte $AC,$AD,$AE,$AF,$ED,$EE,$EF,$DC
    .byte $DD,$DE,$DF,$FC,$3A,$3B,$FD,$FE
    .byte $21,$A0,$20
    .byte $FE,$FD,$FE,$2C,$4C,$FC,$FC,$FC
    .byte $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
    .byte $42,$FC,$FC,$FC,$FC,$FC,$FC,$FC
    .byte $FC,$FC,$FC,$4F,$3D,$FD,$FE,$FD
    .byte $21,$C0,$20
    .byte $FD,$FE,$FD,$FE,$2E,$2F,$4D,$4D
    .byte $4D,$4D,$4D,$4D,$4D,$4D,$4D,$4D
    .byte $4E,$4D,$4D,$4D,$4D,$4D,$4D,$4D
    .byte $4D,$4D,$3E,$3F,$FD,$FE,$FD,$FE
    .byte $21,$E0,$20
    .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
    .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
    .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
    .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
    .byte $22,$00,$20
    .byte $FD,$FE,$FD,$FE,$FD,$FE,$FD,$FE
    .byte $FD,$FE,$FD,$FE,$FD,$FE,$FD,$FE
    .byte $FD,$FE,$FD,$FE,$FD,$FE,$FD,$FE
    .byte $FD,$FE,$FD,$FE,$FD,$FE,$FD,$FE
    .byte $22,$20,$20
    .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
    .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
    .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
    .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
    .byte $22,$40,$20
    .byte $FD,$FE,$FD,$FE,$FD,$FE,$FD,$FE
    .byte $FD,$FE,$FD,$FE,$FD,$FE,$FD,$FE
    .byte $FD,$FE,$FD,$FE,$FD,$FE,$FD,$FE
    .byte $FD,$FE,$FD,$FE,$FD,$FE,$FD,$FE
    .byte $22,$60,$20
    .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
    .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
    .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
    .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
    .byte $22,$80,$20
    .byte $FD,$FE,$FD,$FE,$FD,$CB,$CC,$CD
    .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    .byte $CE,$CF,$E7,$FE,$FD,$FE,$FD,$FE
    .byte $22,$A0,$20
    .byte $FE,$FD,$FE,$FD,$C9,$CA,$FF,$FF
    .byte $FF,$FF,$01,$FF,$09,$07,$04,$0B
    .byte $05,$0A,$FF,$06,$04,$08,$05,$FF
    .byte $FF,$FF,$E8,$E9,$FE,$FD,$FE,$FD
    .byte $22,$C0,$20
    .byte $FD,$FE,$FD,$FE,$C8,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$EA,$FD,$FE,$FD,$FE
    .byte $22,$E0,$20
    .byte $FE,$FD,$FE,$FD,$B7,$FF,$FF,$FF
    .byte $FF,$FF,$02,$FF,$09,$07,$04,$0B
    .byte $05,$0A,$FF,$06,$04,$08,$05,$FF
    .byte $FF,$FF,$FF,$C7,$FE,$FD,$FE,$FD
    .byte $23,$00,$20
    .byte $FD,$FE,$FD,$FE,$B8,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$DA,$FD,$FE,$FD,$FE
    .byte $23,$20,$20
    .byte $FE,$FD,$FE,$FD,$B9,$BA,$FF,$FF
    .byte $FF,$FF,$0C,$FF,$01,$03,$03,$00
    .byte $FF,$FF,$10,$11,$12,$13,$14,$15
    .byte $FF,$FF,$D8,$D9,$FE,$FD,$FE,$FD
    .byte $23,$40,$20
    .byte $FD,$FE,$FD,$FE,$FD,$BB,$BC,$BD
    .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    .byte $BE,$BF,$D7,$FE,$FD,$FE,$FD,$FE
    .byte $23,$60,$20
    .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
    .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
    .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
    .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
    .byte $23,$80,$20
    .byte $FD,$FE,$FD,$FE,$FD,$FE,$FD,$FE
    .byte $FD,$FE,$FD,$FE,$FD,$FE,$FD,$FE
    .byte $FD,$FE,$FD,$FE,$FD,$FE,$FD,$FE
    .byte $FD,$FE,$FD,$FE,$FD,$FE,$FD,$FE
    .byte $23,$A0,$20
    .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
    .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
    .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
    .byte $FE,$FD,$FE,$FD,$FE,$FD,$FE,$FD
    .byte $23,$C0,$20
    .byte $0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A
    .byte $00,$50,$50,$50,$FA,$FA,$FA,$20
    .byte $00,$55,$55,$55,$FF,$FF,$FF,$22
    .byte $00,$05,$05,$05,$AF,$AF,$AF,$22
    .byte $23,$E0,$20
    .byte $00,$00,$00,$00,$00,$00,$00,$00
    .byte $00,$00,$44,$55,$55,$55,$00,$00
    .byte $00,$00,$04,$05,$84,$A5,$00,$00
    .byte $00,$00,$00,$00,$00,$00,$00,$00
    .byte $FF
; ----------------------------------------------------------------------------
; Argument to RB6C2_PRINT
; Settings screen
; 960 bytes of data for PPU addresses $2000 to $23BF
; 90 bytes of chunk headers (30 at 3 bytes each)
LBD7D:
    .byte $20,$00,$20
    .byte $FD,$FC,$FD,$FC,$FD,$FC,$FD,$FC
    .byte $FD,$FC,$FD,$FC,$FD,$FC,$FD,$FC
    .byte $FD,$FC,$FD,$FC,$FD,$FC,$FD,$FC
    .byte $FD,$FC,$FD,$FC,$FD,$FC,$FD,$FC
    .byte $20,$20,$20
    .byte $FC,$FD,$FC,$FD,$FC,$FD,$FC,$FD
    .byte $FC,$FD,$FC,$FD,$FC,$FD,$FC,$FD
    .byte $FC,$FD,$FC,$FD,$FC,$FD,$FC,$FD
    .byte $FC,$FD,$FC,$FD,$FC,$FD,$FC,$FD
    .byte $20,$40,$20
    .byte $FD,$FC,$FD,$FC,$FD,$FC,$FD,$FC
    .byte $FD,$FC,$FD,$FC,$FD,$FC,$FD,$FC
    .byte $FD,$FC,$FD,$FC,$FD,$FC,$FD,$FC
    .byte $FD,$FC,$FD,$FC,$FD,$FC,$FD,$FC
    .byte $20,$60,$20
    .byte $FC,$FD,$FC,$FD,$FC,$FD,$FC,$39
    .byte $3A,$3A,$3A,$3A,$3A,$3A,$3A,$3A
    .byte $3A,$3A,$3A,$3A,$3A,$3A,$3A,$3A
    .byte $3B,$FD,$FC,$FD,$FC,$FD,$FC,$FD
    .byte $20,$80,$20
    .byte $FD,$FC,$FD,$FC,$FD,$FC,$FD,$49
    .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    .byte $4B,$FC,$FD,$FC,$FD,$FC,$FD,$FC
    .byte $20,$A0,$20
    .byte $FC,$FD,$FC,$39,$3A,$3A,$3A,$79
    .byte $FF,$FF,$01,$FF,$19,$15,$0A,$22
    .byte $0E,$1B,$FF,$10,$0A,$16,$0E,$FF
    .byte $7C,$3A,$3A,$3A,$3B,$FD,$FC,$FD
    .byte $20,$C0,$20
    .byte $FD,$FC,$FD,$49,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$4B,$FC,$FD,$FC
    .byte $20,$E0,$20
    .byte $FC,$FD,$FC,$49,$FF,$3C,$3D,$3D
    .byte $3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D
    .byte $3D,$3E,$FF,$FF,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$4B,$FD,$FC,$FD
    .byte $21,$00,$20
    .byte $FD,$FC,$FD,$49,$FF,$4C,$1F,$12
    .byte $1B,$1E,$1C,$FF,$15,$0E,$1F,$0E
    .byte $15,$4E,$FF,$FF,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$4B,$FC,$FD,$FC
    .byte $21,$20,$20
    .byte $FC,$FD,$FC,$49,$FF,$5C,$5D,$5D
    .byte $5D,$5D,$5D,$5D,$5D,$5D,$5D,$5D
    .byte $5D,$5E,$FF,$FF,$FF,$FF,$3F,$2F
    .byte $2F,$5F,$FF,$FF,$4B,$FD,$FC,$FD
    .byte $21,$40,$20
    .byte $FD,$FC,$FD,$49,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$FF,$FF,$2E,$FF
    .byte $FF,$2E,$FF,$FF,$4B,$FC,$FD,$FC
    .byte $21,$60,$20
    .byte $FC,$FD,$FC,$49,$FF,$FF,$FF,$FF
    .byte $01,$19,$FF,$33,$30,$32,$30,$30
    .byte $31,$30,$32,$30,$30,$34,$4F,$2F
    .byte $2F,$6F,$FF,$FF,$4B,$FD,$FC,$FD
    .byte $21,$80,$20
    .byte $FD,$FC,$FD,$49,$FF,$FF,$FF,$FF
    .byte $02,$19,$FF,$43,$40,$42,$40,$40
    .byte $41,$40,$42,$40,$40,$44,$3F,$2F
    .byte $2F,$5F,$FF,$FF,$4B,$FC,$FD,$FC
    .byte $21,$A0,$20
    .byte $FC,$FD,$FC,$49,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$FF,$FF,$2E,$FF
    .byte $FF,$2E,$FF,$FF,$4B,$FD,$FC,$FD
    .byte $21,$C0,$20
    .byte $FD,$FC,$FD,$49,$FF,$3C,$3D,$3D
    .byte $3D,$3D,$3D,$3E,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$FF,$FF,$4F,$2F
    .byte $2F,$6F,$FF,$FF,$4B,$FC,$FD,$FC
    .byte $21,$E0,$20
    .byte $FC,$FD,$FC,$49,$FF,$4C,$1C,$19
    .byte $0E,$0E,$0D,$4E,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$4B,$FD,$FC,$FD
    .byte $22,$00,$20
    .byte $FD,$FC,$FD,$49,$FF,$5C,$5D,$5D
    .byte $5D,$5D,$5D,$5E,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$4B,$FC,$FD,$FC
    .byte $22,$20,$20
    .byte $FC,$FD,$FC,$49,$FF,$FF,$FF,$FF
    .byte $73,$74,$FF,$FF,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$4B,$FD,$FC,$FD
    .byte $22,$40,$20
    .byte $FD,$FC,$FD,$49,$FF,$FF,$FF,$FF
    .byte $75,$76,$FF,$15,$18,$20,$FF,$FF
    .byte $16,$0E,$0D,$FF,$FF,$11,$12,$FF
    .byte $FF,$FF,$FF,$FF,$4B,$FC,$FD,$FC
    .byte $22,$60,$20
    .byte $FC,$FD,$FC,$49,$FF,$FF,$FF,$FF
    .byte $77,$78,$FF,$FF,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$4B,$FD,$FC,$FD
    .byte $22,$80,$20
    .byte $FD,$FC,$FD,$49,$FF,$3C,$3D,$3D
    .byte $3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D
    .byte $3E,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$4B,$FC,$FD,$FC
    .byte $22,$A0,$20
    .byte $FC,$FD,$FC,$49,$FF,$4C,$16,$1E
    .byte $1C,$12,$0C,$FF,$1D,$22,$19,$0E
    .byte $4E,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$4B,$FD,$FC,$FD
    .byte $22,$C0,$20
    .byte $FD,$FC,$FD,$49,$FF,$5C,$5D,$5D
    .byte $5D,$5D,$5D,$5D,$5D,$5D,$5D,$5D
    .byte $5E,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$4B,$FC,$FD,$FC
    .byte $22,$E0,$20
    .byte $FC,$FD,$FC,$49,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$4B,$FD,$FC,$FD
    .byte $23,$00,$20
    .byte $FD,$FC,$FD,$49,$FF,$FF,$FF,$FF
    .byte $0F,$0E,$1F,$0E,$1B,$FF,$FF,$0C
    .byte $11,$12,$15,$15,$FF,$FF,$18,$0F
    .byte $0F,$FF,$FF,$FF,$4B,$FC,$FD,$FC
    .byte $23,$20,$20
    .byte $FC,$FD,$FC,$49,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$4B,$FD,$FC,$FD
    .byte $23,$40,$20
    .byte $FD,$FC,$FD,$59,$5A,$5A,$5A,$5A
    .byte $5A,$5A,$5A,$5A,$5A,$5A,$5A,$5A
    .byte $5A,$5A,$5A,$5A,$5A,$5A,$5A,$5A
    .byte $5A,$5A,$5A,$5A,$5B,$FC,$FD,$FC
    .byte $23,$60,$20
    .byte $FC,$FD,$FC,$FD,$FC,$FD,$FC,$FD
    .byte $FC,$FD,$FC,$FD,$FC,$FD,$FC,$FD
    .byte $FC,$FD,$FC,$FD,$FC,$FD,$FC,$FD
    .byte $FC,$FD,$FC,$FD,$FC,$FD,$FC,$FD
    .byte $23,$80,$20
    .byte $FD,$FC,$FD,$FC,$FD,$FC,$FD,$FC
    .byte $FD,$FC,$FD,$FC,$FD,$FC,$FD,$FC
    .byte $FD,$FC,$FD,$FC,$FD,$FC,$FD,$FC
    .byte $FD,$FC,$FD,$FC,$FD,$FC,$FD,$FC
    .byte $23,$A0,$20
    .byte $FC,$FD,$FC,$FD,$FC,$FD,$FC,$FD
    .byte $FC,$FD,$FC,$FD,$FC,$FD,$FC,$FD
    .byte $FC,$FD,$FC,$FD,$FC,$FD,$FC,$FD
    .byte $FC,$FD,$FC,$FD,$FC,$FD,$FC,$FD
    .byte $FF                               ; terminator byte
; ----------------------------------------------------------------------------
; Argument to RB6C2_PRINT
; Level screen
; 1024 bytes of data for PPU addresses $2000 to $23FF
LC198:
    .byte $20,$00,$20
    .byte $FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF
    .byte $FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF
    .byte $FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF
    .byte $FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF
    .byte $20,$20,$20
    .byte $FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC
    .byte $FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC
    .byte $FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC
    .byte $FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC
    .byte $20,$40,$20
    .byte $FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF
    .byte $FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF
    .byte $FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF
    .byte $FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF
    .byte $20,$60,$20
    .byte $FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC
    .byte $FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC
    .byte $FF,$FC,$FF,$FC,$FF,$FC,$9B,$FC
    .byte $9D,$FC,$9F,$FC,$FF,$99,$9A,$FC
    .byte $20,$80,$20
    .byte $FC,$FF,$FC,$D5,$D6,$EC,$D6,$76
    .byte $FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF
    .byte $FC,$FF,$FC,$FF,$A9,$AA,$AB,$AC
    .byte $AD,$AE,$AF,$D9,$DA,$DB,$F5,$FF
    .byte $20,$A0,$20
    .byte $FF,$E3,$E4,$E5,$E6,$E6,$E6,$E7
    .byte $E4,$E8,$FF,$FC,$FF,$38,$43,$44
    .byte $43,$44,$39,$FC,$B9,$BA,$BB,$BC
    .byte $BD,$BE,$BF,$E9,$EA,$EB,$F6,$FC
    .byte $20,$C0,$20
    .byte $FC,$D3,$FE,$FE,$FE,$FE,$FE,$FE
    .byte $FE,$D4,$FC,$FF,$FC,$33,$FF,$FF
    .byte $FF,$FF,$34,$FF,$C9,$CA,$CB,$CC
    .byte $CD,$CE,$CF,$F9,$FA,$FB,$F7,$FF
    .byte $20,$E0,$20
    .byte $FF,$D3,$1D,$18,$19,$FE,$FE,$FE
    .byte $FE,$D4,$FF,$FC,$FF,$3A,$3B,$FF
    .byte $FF,$3C,$3D,$FC,$FF,$FC,$FF,$FC
    .byte $FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC
    .byte $21,$00,$20
    .byte $FC,$D3,$00,$00,$00,$00,$00,$00
    .byte $00,$D4,$FC,$FF,$FC,$FF,$33,$FF
    .byte $FF,$34,$FC,$FF,$FC,$FF,$4B,$4C
    .byte $4C,$4C,$4C,$4C,$4E,$FF,$FC,$FF
    .byte $21,$20,$20
    .byte $FF,$D3,$FE,$FE,$FE,$FE,$FE,$FE
    .byte $FE,$D4,$FF,$30,$31,$31,$3E,$46
    .byte $47,$3F,$31,$31,$32,$FC,$5B,$FF
    .byte $FF,$FF,$FF,$FF,$5E,$FC,$FF,$FC
    .byte $21,$40,$20
    .byte $FC,$D3,$1C,$0C,$18,$1B,$0E,$FE
    .byte $FE,$D4,$FC,$33,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$34,$FF,$5B,$FF
    .byte $FF,$FF,$FF,$FF,$5E,$FF,$FC,$FF
    .byte $21,$60,$20
    .byte $FF,$D3,$00,$00,$00,$00,$00,$00
    .byte $00,$D4,$FF,$33,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$34,$FC,$5B,$FF
    .byte $FF,$FF,$FF,$FF,$5E,$FC,$FF,$FC
    .byte $21,$80,$20
    .byte $FC,$D3,$FE,$FE,$FE,$FE,$FE,$FE
    .byte $FE,$D4,$FC,$33,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$34,$FF,$5B,$FF
    .byte $FF,$FF,$FF,$FF,$5E,$FF,$FC,$FF
    .byte $21,$A0,$20
    .byte $FF,$F3,$F4,$F4,$F4,$F4,$F4,$F4
    .byte $F4,$F8,$FF,$33,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$34,$FC,$5B,$FF
    .byte $FF,$FF,$FF,$FF,$5E,$FC,$FF,$FC
    .byte $21,$C0,$20
    .byte $FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF
    .byte $FC,$FF,$FC,$33,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$34,$FF,$6B,$4D
    .byte $4D,$4D,$4D,$4D,$6E,$FF,$FC,$FF
    .byte $21,$E0,$20
    .byte $FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC
    .byte $FF,$FC,$FF,$33,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$34,$FC,$FF,$FC
    .byte $D5,$D6,$EC,$D7,$FF,$FC,$FF,$FC
    .byte $22,$00,$20
    .byte $FC,$FF,$FC,$90,$91,$65,$A0,$A1
    .byte $FC,$FF,$FC,$33,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$34,$FF,$E3,$E4
    .byte $E5,$E6,$E6,$E7,$E4,$E8,$FC,$FF
    .byte $22,$20,$20
    .byte $FF,$FC,$92,$93,$FD,$FD,$FD,$A2
    .byte $A3,$FC,$FF,$33,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$34,$FC,$D3,$FE
    .byte $FE,$FE,$FE,$FE,$FE,$D4,$FF,$FC
    .byte $22,$40,$20
    .byte $FC,$94,$95,$FD,$FD,$FD,$FD,$FD
    .byte $A4,$A5,$FC,$33,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$34,$FF,$D3,$15
    .byte $0E,$1F,$0E,$15,$FE,$D4,$FC,$FF
    .byte $22,$60,$20
    .byte $FF,$96,$FD,$FD,$FD,$FD,$FD,$FD
    .byte $FD,$A6,$FF,$33,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$34,$FC,$D3,$FE
    .byte $FE,$FE,$FE,$FE,$FE,$D4,$FF,$FC
    .byte $22,$80,$20
    .byte $FC,$63,$FD,$FD,$FD,$FD,$FD,$FD
    .byte $FD,$64,$FC,$33,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$34,$FF,$D3,$FE
    .byte $FE,$FE,$FE,$FE,$FE,$D4,$FC,$FF
    .byte $22,$A0,$20
    .byte $FF,$83,$FD,$FD,$FD,$FD,$FD,$FD
    .byte $FD,$84,$FF,$33,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$34,$FC,$D3,$1C
    .byte $19,$0E,$0E,$0D,$FE,$D4,$FF,$FC
    .byte $22,$C0,$20
    .byte $FC,$C0,$FD,$FD,$FD,$FD,$FD,$FD
    .byte $FD,$B0,$FC,$33,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$34,$FF,$D3,$FE
    .byte $FE,$FE,$FE,$FE,$FE,$D4,$FC,$FF
    .byte $22,$E0,$20
    .byte $FF,$C1,$C2,$FD,$FD,$FD,$FD,$FD
    .byte $B1,$B2,$FF,$33,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$34,$FC,$D3,$FE
    .byte $FE,$FE,$FE,$FE,$FE,$D4,$FF,$FC
    .byte $23,$00,$20
    .byte $FC,$DF,$C3,$C4,$FD,$FD,$FD,$B3
    .byte $B4,$FF,$FC,$33,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$34,$FF,$D3,$1F
    .byte $12,$1B,$1E,$1C,$FE,$D4,$FC,$FF
    .byte $23,$20,$20
    .byte $DC,$DD,$DE,$C5,$C6,$75,$B5,$B6
    .byte $FF,$FC,$FF,$33,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$34,$FC,$D3,$FE
    .byte $FE,$FE,$FE,$FE,$FE,$D4,$FF,$FC
    .byte $23,$40,$20
    .byte $85,$86,$FC,$FF,$FC,$FF,$FC,$FF
    .byte $FC,$FF,$FC,$35,$36,$36,$36,$36
    .byte $36,$36,$36,$36,$37,$FF,$D3,$FE
    .byte $FE,$FE,$FE,$FE,$FE,$D4,$FC,$FF
    .byte $23,$60,$20
    .byte $FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC
    .byte $FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC
    .byte $FF,$FC,$FF,$FC,$FF,$FC,$F3,$F4
    .byte $F4,$F4,$F4,$F4,$F4,$F8,$FF,$FC
    .byte $23,$80,$20
    .byte $FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF
    .byte $FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF
    .byte $FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF
    .byte $FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF
    .byte $23,$A0,$20
    .byte $FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC
    .byte $FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC
    .byte $FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC
    .byte $FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC
    .byte $23,$C0,$20
    .byte $00,$00,$00,$00,$00,$50,$50,$50
    .byte $55,$55,$11,$00,$00,$55,$55,$55
    .byte $55,$55,$11,$A0,$A0,$44,$55,$11
    .byte $05,$05,$01,$AA,$AA,$44,$55,$11
    .byte $23,$E0,$20
    .byte $FF,$FF,$33,$AA,$AA,$44,$55,$11
    .byte $FF,$FF,$33,$AA,$AA,$44,$55,$11
    .byte $FF,$0F,$03,$0A,$0A,$44,$55,$11
    .byte $00,$00,$00,$00,$00,$00,$00,$00
    .byte $FF
; ----------------------------------------------------------------------------
; Argument to RB6C2_PRINT
; Two player level screen
; 1024 bytes of data for PPU addresses $2000 to $23FF
LC5F9:
    .byte $20,$00,$20,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF
    .byte $20,$20,$20,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC
    .byte $20,$40,$20,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$2C,$74,$49,$2D,$7E,$7D,$2E,$74,$49,$2F,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF
    .byte $20,$60,$20,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$53,$01,$19,$54,$45,$45,$55,$02,$19,$56,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC
    .byte $20,$80,$20,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$57,$FE,$A7,$A8,$B7,$B8,$C7,$C8,$FE,$58,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF
    .byte $20,$A0,$20,$FF,$FC,$FF,$FC,$FF,$38,$43,$44,$43,$44,$39,$53,$FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE,$56,$38,$43,$44,$43,$44,$39,$FC,$FF,$FC,$FF,$FC
    .byte $20,$C0,$20,$FC,$FF,$FC,$FF,$FC,$33,$FF,$FF,$FF,$FF,$34,$57,$FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE,$58,$33,$FF,$FF,$FF,$FF,$34,$FF,$FC,$FF,$FC,$FF
    .byte $20,$E0,$20,$FF,$FC,$FF,$FC,$FF,$3A,$3B,$FF,$FF,$3C,$3D,$53,$FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE,$56,$3A,$3B,$FF,$FF,$3C,$3D,$FC,$FF,$FC,$FF,$FC
    .byte $21,$00,$20,$FC,$FF,$FC,$FF,$FC,$FF,$33,$FF,$FF,$34,$FC,$7B,$73,$4A,$73,$4A,$73,$4A,$73,$4A,$7C,$FF,$33,$FF,$FF,$34,$FC,$FF,$FC,$FF,$FC,$FF
    .byte $21,$20,$20,$FF,$FC,$FF,$30,$31,$31,$3E,$46,$47,$3F,$31,$31,$32,$FC,$D5,$D6,$EC,$D7,$FF,$30,$31,$31,$3E,$46,$47,$3F,$31,$31,$32,$FC,$FF,$FC
    .byte $21,$40,$20,$FC,$FF,$FC,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$E4,$E5,$E6,$E6,$E7,$E4,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FF,$FC,$FF
    .byte $21,$60,$20,$FF,$FC,$FF,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FE,$FE,$FE,$FE,$FE,$FE,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FC,$FF,$FC
    .byte $21,$80,$20,$FC,$FF,$FC,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FE,$4F,$6F,$4F,$6F,$FE,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FF,$FC,$FF
    .byte $21,$A0,$20,$FF,$FC,$FF,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FE,$5F,$7F,$5F,$7F,$FE,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FC,$FF,$FC
    .byte $21,$C0,$20,$FC,$FF,$FC,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FE,$4F,$6F,$4F,$6F,$FE,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FF,$FC,$FF
    .byte $21,$E0,$20,$FF,$FC,$FF,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FE,$5F,$7F,$5F,$7F,$FE,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FC,$FF,$FC
    .byte $22,$00,$20,$FC,$FF,$FC,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FE,$4F,$6F,$4F,$6F,$FE,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FF,$FC,$FF
    .byte $22,$20,$20,$FF,$FC,$FF,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FE,$5F,$7F,$5F,$7F,$FE,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FC,$FF,$FC
    .byte $22,$40,$20,$FC,$FF,$FC,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FE,$FE,$FE,$FE,$FE,$FE,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FF,$FC,$FF
    .byte $22,$60,$20,$FF,$FC,$FF,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$D8,$48,$D8,$48,$D8,$48,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FC,$FF,$FC
    .byte $22,$80,$20,$FC,$FF,$FC,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FF,$FC,$FF,$FC,$FF,$FC,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FF,$FC,$FF
    .byte $22,$A0,$20,$FF,$FC,$FF,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$77,$78,$87,$88,$97,$98,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FC,$FF,$FC
    .byte $22,$C0,$20,$FC,$FF,$FC,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$2C,$74,$27,$28,$49,$2F,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FF,$FC,$FF
    .byte $22,$E0,$20,$FF,$FC,$FF,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$53,$FE,$69,$6A,$FE,$56,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FC,$FF,$FC
    .byte $23,$00,$20,$FC,$FF,$FC,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$57,$FE,$79,$7A,$FE,$58,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FF,$FC,$FF
    .byte $23,$20,$20,$FF,$FC,$FF,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$59,$4A,$73,$4A,$73,$5A,$33,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$34,$FC,$FF,$FC
    .byte $23,$40,$20,$FC,$FF,$FC,$35,$36,$36,$36,$36,$36,$36,$36,$36,$37,$FF,$FC,$FF,$FC,$FF,$FC,$35,$36,$36,$36,$36,$36,$36,$36,$36,$37,$FF,$FC,$FF
    .byte $23,$60,$20,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC
    .byte $23,$80,$20,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF
    .byte $23,$A0,$20,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC,$FF,$FC
    .byte $23,$C0,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$A0,$A0,$00,$00,$A0,$A0,$00,$00,$AA,$AA,$88,$22,$AA,$AA,$00
    .byte $23,$E0,$20,$00,$AA,$AA,$08,$02,$AA,$AA,$00,$00,$AA,$AA,$00,$00,$AA,$AA,$00,$00,$0A,$0A,$00,$00,$0A,$0A,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .byte $FF

; ----------------------------------------------------------------------------
; Argument to RB6C2_PRINT
; Congratulations screen
; 1024 bytes of data for PPU addresses $2000 to $23FF
LCA5A:
    .byte $20,$00,$20,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
    .byte $20,$20,$20,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
    .byte $20,$40,$20,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
    .byte $20,$60,$20,$FC,$FC,$FC,$26,$27,$27,$27,$27,$27,$27,$27,$27,$27,$27,$27,$27,$27,$27,$27,$27,$27,$27,$27,$27,$27,$27,$27,$27,$28,$FC,$FC,$FC
    .byte $20,$80,$20,$FC,$FC,$FC,$29,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$2A,$FC,$FC,$FC
    .byte $20,$A0,$20,$FC,$FC,$FC,$29,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$2A,$FC,$FC,$FC
    .byte $20,$C0,$20,$FC,$FC,$FC,$29,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$2A,$FC,$FC,$FC
    .byte $20,$E0,$20,$FC,$FC,$FC,$29,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$2A,$FC,$FC,$FC
    .byte $21,$00,$20,$FC,$FC,$FC,$29,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$2A,$FC,$FC,$FC
    .byte $21,$20,$20,$FC,$FC,$FC,$29,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$2A,$FC,$FC,$FC
    .byte $21,$40,$20,$FC,$FC,$FC,$29,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$2A,$FC,$FC,$FC
    .byte $21,$60,$20,$FC,$FC,$FC,$29,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$2A,$FC,$FC,$FC
    .byte $21,$80,$20,$FC,$FC,$FC,$29,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$2A,$FC,$FC,$FC
    .byte $21,$A0,$20,$FC,$FC,$FC,$29,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$2A,$FC,$FC,$FC
    .byte $21,$C0,$20,$FC,$FC,$FC,$29,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$2A,$FC,$FC,$FC
    .byte $21,$E0,$20,$FC,$FC,$FC,$29,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$2A,$FC,$FC,$FC
    .byte $22,$00,$20,$FC,$FC,$FC,$29,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$2A,$FC,$FC,$FC
    .byte $22,$20,$20,$FC,$FC,$FC,$29,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$33,$34,$35,$36,$37,$38,$39,$3A,$3B,$3C,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$2A,$FC,$FC,$FC
    .byte $22,$40,$20,$FC,$FC,$FC,$29,$FF,$FF,$FF,$FF,$FF,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4A,$4B,$4C,$4D,$4E,$FF,$FF,$FF,$FF,$FF,$2A,$FC,$FC,$FC
    .byte $22,$60,$20,$FC,$FC,$FC,$29,$FF,$FF,$FF,$FF,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5A,$5B,$5C,$5D,$5E,$5F,$FF,$FF,$FF,$FF,$2A,$FC,$FC,$FC
    .byte $22,$80,$20,$FC,$FC,$FC,$29,$FF,$FF,$FF,$FF,$60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6A,$6B,$6C,$6D,$6E,$6F,$FF,$FF,$FF,$FF,$2A,$FC,$FC,$FC
    .byte $22,$A0,$20,$FC,$FC,$FC,$29,$FF,$FF,$FF,$FF,$70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7A,$7B,$7C,$7D,$7E,$7F,$FF,$FF,$FF,$FF,$2A,$FC,$FC,$FC
    .byte $22,$C0,$20,$FC,$FC,$FC,$29,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$85,$86,$87,$88,$89,$8A,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$2A,$FC,$FC,$FC
    .byte $22,$E0,$20,$FC,$FC,$FC,$29,$FF,$FF,$FF,$FF,$FF,$91,$92,$93,$94,$95,$96,$97,$98,$99,$9A,$9B,$9C,$9D,$9E,$FF,$FF,$FF,$FF,$FF,$2A,$FC,$FC,$FC
    .byte $23,$00,$20,$FC,$FC,$FC,$29,$FF,$FF,$C2,$C3,$A0,$A1,$A2,$A3,$A4,$A5,$A6,$A7,$A8,$A9,$AA,$AB,$AC,$AD,$AE,$C4,$C5,$FF,$FF,$FF,$2A,$FC,$FC,$FC
    .byte $23,$20,$20,$FC,$FC,$FC,$29,$D0,$D1,$D2,$D3,$B0,$B1,$B2,$B3,$B4,$B5,$B6,$B7,$B8,$B9,$BA,$BB,$BC,$BD,$BE,$D4,$D5,$D6,$D7,$FF,$2A,$FC,$FC,$FC
    .byte $23,$40,$20,$FC,$FC,$FC,$2B,$2C,$2C,$2C,$2C,$2C,$2C,$2C,$2C,$2C,$2C,$2C,$2C,$2C,$2C,$2C,$2C,$2C,$2C,$2C,$2C,$2C,$2C,$2C,$2C,$2D,$FC,$FC,$FC
    .byte $23,$60,$20,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
    .byte $23,$80,$20,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
    .byte $23,$A0,$20,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
    .byte $23,$C0,$20,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$55,$55,$55,$55,$55,$55,$FF,$FF,$55,$55,$55,$55,$55,$55,$FF,$FF,$55,$55,$55,$55,$55,$55,$FF
    .byte $23,$E0,$20,$FF,$00,$00,$00,$00,$00,$00,$FF,$FF,$00,$00,$00,$00,$00,$00,$FF,$FF,$F0,$F0,$F0,$F0,$F0,$F0,$FF,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F
    .byte $FF

; ----------------------------------------------------------------------------
; unused
.ifdef REV_A
    .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
.else
    .byte $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
    .byte $23,$C0,$20,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$55,$55,$55,$55,$55,$55,$FF,$FF,$55,$55,$55,$55,$55,$55,$FF,$FF,$55,$55,$55,$55,$55,$55,$FF
    .byte $23,$E0,$20,$FF,$00,$00,$00,$00,$00,$00,$FF,$FF,$00,$00,$00,$00,$00,$00,$FF,$FF,$F0,$F0,$F0
.endif

; ----------------------------------------------------------------------------
; At L9CEA, these 128 bytes are copied to $0400.
; Demo playfield
LCF00:
    .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    .byte $D2,$FF,$FF,$FF,$D2,$FF,$D1,$D0
    .byte $D2,$D1,$FF,$FF,$FF,$FF,$FF,$FF
    .byte $D0,$FF,$D2,$FF,$D0,$D2,$D2,$FF
    .byte $FF,$FF,$D2,$D0,$FF,$FF,$FF,$FF
    .byte $FF,$D2,$FF,$FF,$D1,$D0,$FF,$D1
    .byte $FF,$FF,$D1,$FF,$D2,$D1,$D1,$D2
    .byte $D2,$D1,$D0,$D2,$D2,$FF,$D1,$D0
    .byte $D1,$FF,$FF,$FF,$FF,$D0,$D0,$D1
    .byte $FF,$D2,$D2,$D0,$D0,$D1,$FF,$D2
    .byte $D2,$D1,$FF,$D0,$FF,$D1,$D1,$FF

; ----------------------------------------------------------------------------
; 128 numbers from 0-8. Used in R8E8D_NEW_PILL, indexed by LA7_PILL_INDEX.
; Used to index LA7FD and LA806.
LCF80:
    .byte $00,$00,$07,$02,$01,$05,$03,$05,$00,$06,$06,$03,$05,$00,$05,$03 ; CF80
    .byte $05,$00,$06,$06,$04,$08,$07,$02,$00,$02,$05,$00,$06,$07,$06,$04 ; CF90
    .byte $08,$06,$00,$06,$06,$04,$00,$00,$07,$03,$04,$04,$03,$00,$03,$00 ; CFA0
    .byte $00,$07,$03,$03,$00,$02,$05,$00,$05,$04,$00,$01,$01,$00,$06,$08 ; CFB0
    .byte $02,$06,$02,$00,$02,$06,$02,$01,$05,$04,$08,$06,$00,$05,$04,$08 ; CFC0
    .byte $06,$08,$03,$00,$01,$01,$01,$01,$00,$07,$02,$01,$05,$04,$08,$06 ; CFD0
    .byte $00,$06,$06,$04,$08,$07,$02,$01,$06,$06,$03,$05,$08,$02,$06,$03 ; CFE0
    .byte $04,$04,$03,$01,$05,$04,$00,$01,$00,$06,$00,$05,$04,$00,$01,$01 ; CFF0

; ----------------------------------------------------------------------------
; Demo mode input (run-length encoded)
; Alternating bytes: (Button state, frame count)
; $01 = right
; $02 = left
; $04 = down
; $08 = up
; $10 = start
; $20 = select
; $40 = B
; $80 = A

.align $100
LD000:
    .byte $00,$00,$00,$08,$00,$97,$01,$08,$41,$06,$01,$17,$00,$0E,$04,$08 ; D000
    .byte $00,$24,$01,$06,$00,$03,$01,$06,$00,$09,$04,$0E,$00,$31,$04,$0C ; D010
    .byte $00,$27,$01,$0C,$41,$07,$01,$03,$41,$06,$40,$00,$00,$6C,$01,$09 ; D020
    .byte $00,$05,$01,$04,$00,$02,$40,$05,$00,$04,$40,$05,$00,$11,$04,$03 ; D030
    .byte $00,$6E,$02,$05,$00,$1B,$04,$07,$00,$3A,$01,$04,$00,$07,$01,$06 ; D040
    .byte $00,$09,$40,$04,$00,$09,$01,$09,$00,$00,$40,$06,$00,$10,$04,$07 ; D050
    .byte $00,$27,$40,$04,$00,$05,$04,$07,$00,$69,$40,$05,$00,$05,$40,$06 ; D060
    .byte $00,$05,$04,$08,$00,$24,$40,$04,$00,$05,$40,$04,$00,$11,$04,$06 ; D070
    .byte $00,$7A,$02,$05,$00,$0C,$04,$0C,$00,$27,$01,$1C,$41,$05,$01,$04 ; D080
    .byte $41,$04,$40,$01,$00,$11,$04,$0C,$00,$2D,$01,$05,$41,$00,$40,$06
    .byte $00,$06,$04,$0E,$00,$24,$01,$11,$41,$06,$01,$03,$41,$02,$40,$03
    .byte $00,$0F,$04,$07,$00,$7B,$01,$04,$00,$00,$80,$08,$00,$09,$04,$09
    .byte $00,$88,$01,$07,$00,$0E,$04,$0B,$00,$5F,$01,$15,$40,$04,$00,$10
    .byte $04,$10,$00,$76,$01,$1A,$00,$04,$40,$05,$00,$05,$40,$05,$00,$19
    .byte $04,$08,$00,$0C,$01,$25,$41,$03,$01,$04,$00,$02,$40,$03,$00,$10
    .byte $04,$0D,$00,$3C,$02,$07,$40,$05,$00,$09,$04,$0C,$00,$3E,$02,$04
    .byte $00,$08,$40,$06,$00,$07,$04,$0B,$00,$49,$01,$06,$00,$17,$80,$07 ; D100
    .byte $00,$0A,$04,$0C,$00,$6B,$01,$29,$00,$04,$04,$0C,$00,$51,$01,$06
    .byte $00,$05,$01,$05,$00,$0B,$04,$09,$00,$67,$01,$04,$00,$18,$80,$06
    .byte $00,$0C,$04,$0D,$00,$86,$02,$09,$42,$07,$02,$03,$42,$06,$02,$0B
    .byte $00,$04,$04,$08,$00,$2B,$01,$05,$00,$00,$40,$05,$00,$0B,$04,$14
    .byte $00,$6F,$02,$0C,$42,$09,$02,$09,$00,$96,$02,$05,$00,$08,$40,$05
    .byte $00,$05,$40,$05,$00,$14,$04,$0D,$00,$7D,$04,$08,$00,$51,$02,$02
    .byte $42,$03,$40,$04,$00,$0A,$04,$13,$00,$53,$01,$02,$00,$01,$40,$06
    .byte $00,$02,$02,$05,$00,$0D,$04,$0E,$00,$95,$04,$0A,$00,$34,$02,$11 ; D180
    .byte $00,$22,$02,$1B,$42,$06,$02,$0C,$00,$08,$04,$0D,$00,$3D,$02,$05
    .byte $00,$0C,$04,$09,$00,$22,$02,$07,$00,$47,$04,$09,$00,$45,$02,$05
    .byte $00,$0C,$02,$07,$00,$68,$02,$08,$00,$04,$02,$05,$00,$03,$40,$04
    .byte $00,$06,$04,$09,$00,$40,$40,$05,$00,$05,$04,$20,$00,$3E,$01,$05
    .byte $00,$0D,$40,$07,$00,$16,$04,$17,$00,$39,$02,$1F,$00,$12,$04,$0F
    .byte $00,$32,$01,$02,$00,$13,$40,$03,$00,$06,$40,$04,$00,$08,$04,$10
    .byte $00,$15,$01,$1F,$00,$06,$01,$07,$00,$14,$04,$13,$00,$24,$01,$09
LD200:

; ----------------------------------------------------------------------------
; Addresses D200 to FEFF

.scope AUDIO
.include "audio.a65"
.endscope

; ----------------------------------------------------------------------------
; RESET vector
LFF00_RESET_HANDLER:
    cld                                         ; FF00 D8
    sei                                         ; FF01 78
    ldx #$00                                    ; FF02 A2 00
    stx L2000_PPUCTRL                           ; FF04 8E 00 20
    stx L2001_PPUMASK                           ; FF07 8E 01 20
    .ifdef REV_A
    stx LFE_PPUMASK
    .endif
    ; wait for vblank
    loop
        lda L2002_PPUSTATUS                     ; FF0A AD 02 20
    while_pl                                    ; FF0D 10 FB
    loop
        lda L2002_PPUSTATUS                     ; FF0F AD 02 20
    while_pl                                    ; FF12 10 FB
    dex                                         ; FF14 CA
    txs                                         ; FF15 9A
    inc LFF00_RESET_HANDLER                     ; FF16 EE 00 FF
    lda #$10                                    ; FF19 A9 10
    jsr RB8CC ; Set mapper control register.    ; FF1B 20 CC B8
    lda #$02                                    ; FF1E A9 02
    jsr RB8E0 ; Set mapper CHR bank 0.          ; FF20 20 E0 B8
    lda #$03                                    ; FF23 A9 03
    jsr RB8F4 ; Set mapper CHR bank 1.          ; FF25 20 F4 B8
    lda #$00                                    ; FF28 A9 00
    jsr RB908 ; Set mapper PRG bank.            ; FF2A 20 08 B9
    jmp L8000                                   ; FF2D 4C 00 80

; ----------------------------------------------------------------------------
.ifndef REV_A
    .byte $00,$00
.endif
    .byte $00,$00,$00,$00,$00,$00
    .byte $00,$00,$00,$00,$00,$00,$00,$00
    .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    .byte $00,$00,$00,$00,$00,$00,$00,$00
    .byte $00,$00,$00,$00,$00,$00,$00,$00
    .byte $00,$00,$00,$00,$00,$00,$00,$00
    .byte $00,$00,$00,$00,$00,$00,$00,$00
    .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    .byte $00,$00,$00,$00,$00,$00,$00,$00
    .byte $00,$00,$00,$00,$00,$00,$00,$00
    .byte $00,$00,$00,$00,$00,$00,$00,$00
    .byte $00,$00,$00,$00,$00,$00,$00,$00
    .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
; ----------------------------------------------------------------------------
; Entry points to audio code

RFFD0:
    jmp AUDIO::LD470                            ; FFD0 4C 70 D4

RFFD3:
    jmp AUDIO::RD4E5                            ; FFD3 4C E5 D4

; called from one place
RFFD6:
    jmp AUDIO::LD2BF                            ; FFD6 4C BF D2
; ----------------------------------------------------------------------------
    .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF           ; FFD9 FF FF FF FF FF FF FF
    .byte $20,$20,$20,$20,$20,$20,$20,$20       ; FFE0 20 20 20 20 20 20 20 20
    .byte $44,$52,$2E,$4D,$41,$52,$49,$4F       ; FFE8 44 52 2E 4D 41 52 49 4F
.ifdef REV_A
    .byte $2D,$85
.else
    .byte $1C,$87
.endif
    .byte $C2,$A1,$22,$04,$01,$07,$01,$6E       ; FFF2 C2 A1 22 04 01 07 01 6E

.segment "VECTORS"
LFFFA:
    .word L8005_NMI_HANDLER                     ; FFFA 05 80
LFFFC:
    .word LFF00_RESET_HANDLER                   ; FFFC 00 FF
LFFFE:
    .word L8035_IRQ_HANDLER                     ; FFFE 35 80
